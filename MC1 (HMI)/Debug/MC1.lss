
MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000144  00800060  00003f84  00004018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  008001a4  008001a4  0000415c  2**0
                  ALLOC
  3 .stab         000037c8  00000000  00000000  0000415c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013a0  00000000  00000000  00007924  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000abbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000baa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c858  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c9b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000cc45  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d413  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 0f 	jmp	0x1f88	; 0x1f88 <__vector_4>
      14:	0c 94 91 0f 	jmp	0x1f22	; 0x1f22 <__vector_5>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 5e 0f 	jmp	0x1ebc	; 0x1ebc <__vector_7>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 2b 0f 	jmp	0x1e56	; 0x1e56 <__vector_9>
      28:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <__vector_10>
      2c:	0c 94 c5 0e 	jmp	0x1d8a	; 0x1d8a <__vector_11>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__pack_f+0xba>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x162>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1e8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	e4 e8       	ldi	r30, 0x84	; 132
     162:	ff e3       	ldi	r31, 0x3F	; 63
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	a4 3a       	cpi	r26, 0xA4	; 164
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	11 e0       	ldi	r17, 0x01	; 1
     172:	a4 ea       	ldi	r26, 0xA4	; 164
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	ae 3b       	cpi	r26, 0xBE	; 190
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <main>
     184:	0c 94 c0 1f 	jmp	0x3f80	; 0x3f80 <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <__fixunssfsi>:
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	7b 01       	movw	r14, r22
     196:	8c 01       	movw	r16, r24
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	5f e4       	ldi	r21, 0x4F	; 79
     1a0:	0e 94 c6 03 	call	0x78c	; 0x78c <__gesf2>
     1a4:	88 23       	and	r24, r24
     1a6:	8c f0       	brlt	.+34     	; 0x1ca <__fixunssfsi+0x3e>
     1a8:	c8 01       	movw	r24, r16
     1aa:	b7 01       	movw	r22, r14
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	5f e4       	ldi	r21, 0x4F	; 79
     1b4:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
     1b8:	0e 94 26 04 	call	0x84c	; 0x84c <__fixsfsi>
     1bc:	9b 01       	movw	r18, r22
     1be:	ac 01       	movw	r20, r24
     1c0:	20 50       	subi	r18, 0x00	; 0
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	40 40       	sbci	r20, 0x00	; 0
     1c6:	50 48       	sbci	r21, 0x80	; 128
     1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <__fixunssfsi+0x4a>
     1ca:	c8 01       	movw	r24, r16
     1cc:	b7 01       	movw	r22, r14
     1ce:	0e 94 26 04 	call	0x84c	; 0x84c <__fixsfsi>
     1d2:	9b 01       	movw	r18, r22
     1d4:	ac 01       	movw	r20, r24
     1d6:	b9 01       	movw	r22, r18
     1d8:	ca 01       	movw	r24, r20
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	08 95       	ret

000001e4 <_fpadd_parts>:
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	e8 ef       	ldi	r30, 0xF8	; 248
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	0c 94 e9 1c 	jmp	0x39d2	; 0x39d2 <__prologue_saves__>
     1f0:	dc 01       	movw	r26, r24
     1f2:	2b 01       	movw	r4, r22
     1f4:	fa 01       	movw	r30, r20
     1f6:	9c 91       	ld	r25, X
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	08 f4       	brcc	.+2      	; 0x1fe <_fpadd_parts+0x1a>
     1fc:	39 c1       	rjmp	.+626    	; 0x470 <_fpadd_parts+0x28c>
     1fe:	eb 01       	movw	r28, r22
     200:	88 81       	ld	r24, Y
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	08 f4       	brcc	.+2      	; 0x208 <_fpadd_parts+0x24>
     206:	33 c1       	rjmp	.+614    	; 0x46e <_fpadd_parts+0x28a>
     208:	94 30       	cpi	r25, 0x04	; 4
     20a:	69 f4       	brne	.+26     	; 0x226 <_fpadd_parts+0x42>
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	09 f0       	breq	.+2      	; 0x212 <_fpadd_parts+0x2e>
     210:	2f c1       	rjmp	.+606    	; 0x470 <_fpadd_parts+0x28c>
     212:	11 96       	adiw	r26, 0x01	; 1
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	98 17       	cp	r25, r24
     21c:	09 f4       	brne	.+2      	; 0x220 <_fpadd_parts+0x3c>
     21e:	28 c1       	rjmp	.+592    	; 0x470 <_fpadd_parts+0x28c>
     220:	a9 e7       	ldi	r26, 0x79	; 121
     222:	b1 e0       	ldi	r27, 0x01	; 1
     224:	25 c1       	rjmp	.+586    	; 0x470 <_fpadd_parts+0x28c>
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	09 f4       	brne	.+2      	; 0x22c <_fpadd_parts+0x48>
     22a:	21 c1       	rjmp	.+578    	; 0x46e <_fpadd_parts+0x28a>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	a9 f4       	brne	.+42     	; 0x25a <_fpadd_parts+0x76>
     230:	92 30       	cpi	r25, 0x02	; 2
     232:	09 f0       	breq	.+2      	; 0x236 <_fpadd_parts+0x52>
     234:	1d c1       	rjmp	.+570    	; 0x470 <_fpadd_parts+0x28c>
     236:	9a 01       	movw	r18, r20
     238:	ad 01       	movw	r20, r26
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	ea 01       	movw	r28, r20
     23e:	09 90       	ld	r0, Y+
     240:	ae 01       	movw	r20, r28
     242:	e9 01       	movw	r28, r18
     244:	09 92       	st	Y+, r0
     246:	9e 01       	movw	r18, r28
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	c1 f7       	brne	.-16     	; 0x23c <_fpadd_parts+0x58>
     24c:	e2 01       	movw	r28, r4
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	9c 91       	ld	r25, X
     254:	89 23       	and	r24, r25
     256:	81 83       	std	Z+1, r24	; 0x01
     258:	08 c1       	rjmp	.+528    	; 0x46a <_fpadd_parts+0x286>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	09 f4       	brne	.+2      	; 0x260 <_fpadd_parts+0x7c>
     25e:	07 c1       	rjmp	.+526    	; 0x46e <_fpadd_parts+0x28a>
     260:	12 96       	adiw	r26, 0x02	; 2
     262:	2d 90       	ld	r2, X+
     264:	3c 90       	ld	r3, X
     266:	13 97       	sbiw	r26, 0x03	; 3
     268:	eb 01       	movw	r28, r22
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	14 96       	adiw	r26, 0x04	; 4
     270:	ad 90       	ld	r10, X+
     272:	bd 90       	ld	r11, X+
     274:	cd 90       	ld	r12, X+
     276:	dc 90       	ld	r13, X
     278:	17 97       	sbiw	r26, 0x07	; 7
     27a:	ec 80       	ldd	r14, Y+4	; 0x04
     27c:	fd 80       	ldd	r15, Y+5	; 0x05
     27e:	0e 81       	ldd	r16, Y+6	; 0x06
     280:	1f 81       	ldd	r17, Y+7	; 0x07
     282:	91 01       	movw	r18, r2
     284:	28 1b       	sub	r18, r24
     286:	39 0b       	sbc	r19, r25
     288:	b9 01       	movw	r22, r18
     28a:	37 ff       	sbrs	r19, 7
     28c:	04 c0       	rjmp	.+8      	; 0x296 <_fpadd_parts+0xb2>
     28e:	66 27       	eor	r22, r22
     290:	77 27       	eor	r23, r23
     292:	62 1b       	sub	r22, r18
     294:	73 0b       	sbc	r23, r19
     296:	60 32       	cpi	r22, 0x20	; 32
     298:	71 05       	cpc	r23, r1
     29a:	0c f0       	brlt	.+2      	; 0x29e <_fpadd_parts+0xba>
     29c:	61 c0       	rjmp	.+194    	; 0x360 <_fpadd_parts+0x17c>
     29e:	12 16       	cp	r1, r18
     2a0:	13 06       	cpc	r1, r19
     2a2:	6c f5       	brge	.+90     	; 0x2fe <_fpadd_parts+0x11a>
     2a4:	37 01       	movw	r6, r14
     2a6:	48 01       	movw	r8, r16
     2a8:	06 2e       	mov	r0, r22
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <_fpadd_parts+0xd0>
     2ac:	96 94       	lsr	r9
     2ae:	87 94       	ror	r8
     2b0:	77 94       	ror	r7
     2b2:	67 94       	ror	r6
     2b4:	0a 94       	dec	r0
     2b6:	d2 f7       	brpl	.-12     	; 0x2ac <_fpadd_parts+0xc8>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <_fpadd_parts+0xe6>
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	44 1f       	adc	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	d2 f7       	brpl	.-12     	; 0x2c2 <_fpadd_parts+0xde>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	40 40       	sbci	r20, 0x00	; 0
     2d4:	50 40       	sbci	r21, 0x00	; 0
     2d6:	2e 21       	and	r18, r14
     2d8:	3f 21       	and	r19, r15
     2da:	40 23       	and	r20, r16
     2dc:	51 23       	and	r21, r17
     2de:	21 15       	cp	r18, r1
     2e0:	31 05       	cpc	r19, r1
     2e2:	41 05       	cpc	r20, r1
     2e4:	51 05       	cpc	r21, r1
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <_fpadd_parts+0x10c>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	79 01       	movw	r14, r18
     2f2:	8a 01       	movw	r16, r20
     2f4:	e6 28       	or	r14, r6
     2f6:	f7 28       	or	r15, r7
     2f8:	08 29       	or	r16, r8
     2fa:	19 29       	or	r17, r9
     2fc:	3c c0       	rjmp	.+120    	; 0x376 <_fpadd_parts+0x192>
     2fe:	23 2b       	or	r18, r19
     300:	d1 f1       	breq	.+116    	; 0x376 <_fpadd_parts+0x192>
     302:	26 0e       	add	r2, r22
     304:	37 1e       	adc	r3, r23
     306:	35 01       	movw	r6, r10
     308:	46 01       	movw	r8, r12
     30a:	06 2e       	mov	r0, r22
     30c:	04 c0       	rjmp	.+8      	; 0x316 <_fpadd_parts+0x132>
     30e:	96 94       	lsr	r9
     310:	87 94       	ror	r8
     312:	77 94       	ror	r7
     314:	67 94       	ror	r6
     316:	0a 94       	dec	r0
     318:	d2 f7       	brpl	.-12     	; 0x30e <_fpadd_parts+0x12a>
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	04 c0       	rjmp	.+8      	; 0x32c <_fpadd_parts+0x148>
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	44 1f       	adc	r20, r20
     32a:	55 1f       	adc	r21, r21
     32c:	6a 95       	dec	r22
     32e:	d2 f7       	brpl	.-12     	; 0x324 <_fpadd_parts+0x140>
     330:	21 50       	subi	r18, 0x01	; 1
     332:	30 40       	sbci	r19, 0x00	; 0
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	50 40       	sbci	r21, 0x00	; 0
     338:	2a 21       	and	r18, r10
     33a:	3b 21       	and	r19, r11
     33c:	4c 21       	and	r20, r12
     33e:	5d 21       	and	r21, r13
     340:	21 15       	cp	r18, r1
     342:	31 05       	cpc	r19, r1
     344:	41 05       	cpc	r20, r1
     346:	51 05       	cpc	r21, r1
     348:	21 f0       	breq	.+8      	; 0x352 <_fpadd_parts+0x16e>
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	59 01       	movw	r10, r18
     354:	6a 01       	movw	r12, r20
     356:	a6 28       	or	r10, r6
     358:	b7 28       	or	r11, r7
     35a:	c8 28       	or	r12, r8
     35c:	d9 28       	or	r13, r9
     35e:	0b c0       	rjmp	.+22     	; 0x376 <_fpadd_parts+0x192>
     360:	82 15       	cp	r24, r2
     362:	93 05       	cpc	r25, r3
     364:	2c f0       	brlt	.+10     	; 0x370 <_fpadd_parts+0x18c>
     366:	1c 01       	movw	r2, r24
     368:	aa 24       	eor	r10, r10
     36a:	bb 24       	eor	r11, r11
     36c:	65 01       	movw	r12, r10
     36e:	03 c0       	rjmp	.+6      	; 0x376 <_fpadd_parts+0x192>
     370:	ee 24       	eor	r14, r14
     372:	ff 24       	eor	r15, r15
     374:	87 01       	movw	r16, r14
     376:	11 96       	adiw	r26, 0x01	; 1
     378:	9c 91       	ld	r25, X
     37a:	d2 01       	movw	r26, r4
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	8c 91       	ld	r24, X
     380:	98 17       	cp	r25, r24
     382:	09 f4       	brne	.+2      	; 0x386 <_fpadd_parts+0x1a2>
     384:	45 c0       	rjmp	.+138    	; 0x410 <_fpadd_parts+0x22c>
     386:	99 23       	and	r25, r25
     388:	39 f0       	breq	.+14     	; 0x398 <_fpadd_parts+0x1b4>
     38a:	a8 01       	movw	r20, r16
     38c:	97 01       	movw	r18, r14
     38e:	2a 19       	sub	r18, r10
     390:	3b 09       	sbc	r19, r11
     392:	4c 09       	sbc	r20, r12
     394:	5d 09       	sbc	r21, r13
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <_fpadd_parts+0x1c0>
     398:	a6 01       	movw	r20, r12
     39a:	95 01       	movw	r18, r10
     39c:	2e 19       	sub	r18, r14
     39e:	3f 09       	sbc	r19, r15
     3a0:	40 0b       	sbc	r20, r16
     3a2:	51 0b       	sbc	r21, r17
     3a4:	57 fd       	sbrc	r21, 7
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <_fpadd_parts+0x1d4>
     3a8:	11 82       	std	Z+1, r1	; 0x01
     3aa:	33 82       	std	Z+3, r3	; 0x03
     3ac:	22 82       	std	Z+2, r2	; 0x02
     3ae:	24 83       	std	Z+4, r18	; 0x04
     3b0:	35 83       	std	Z+5, r19	; 0x05
     3b2:	46 83       	std	Z+6, r20	; 0x06
     3b4:	57 83       	std	Z+7, r21	; 0x07
     3b6:	1d c0       	rjmp	.+58     	; 0x3f2 <_fpadd_parts+0x20e>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	81 83       	std	Z+1, r24	; 0x01
     3bc:	33 82       	std	Z+3, r3	; 0x03
     3be:	22 82       	std	Z+2, r2	; 0x02
     3c0:	88 27       	eor	r24, r24
     3c2:	99 27       	eor	r25, r25
     3c4:	dc 01       	movw	r26, r24
     3c6:	82 1b       	sub	r24, r18
     3c8:	93 0b       	sbc	r25, r19
     3ca:	a4 0b       	sbc	r26, r20
     3cc:	b5 0b       	sbc	r27, r21
     3ce:	84 83       	std	Z+4, r24	; 0x04
     3d0:	95 83       	std	Z+5, r25	; 0x05
     3d2:	a6 83       	std	Z+6, r26	; 0x06
     3d4:	b7 83       	std	Z+7, r27	; 0x07
     3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <_fpadd_parts+0x20e>
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	44 1f       	adc	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	24 83       	std	Z+4, r18	; 0x04
     3e2:	35 83       	std	Z+5, r19	; 0x05
     3e4:	46 83       	std	Z+6, r20	; 0x06
     3e6:	57 83       	std	Z+7, r21	; 0x07
     3e8:	82 81       	ldd	r24, Z+2	; 0x02
     3ea:	93 81       	ldd	r25, Z+3	; 0x03
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	93 83       	std	Z+3, r25	; 0x03
     3f0:	82 83       	std	Z+2, r24	; 0x02
     3f2:	24 81       	ldd	r18, Z+4	; 0x04
     3f4:	35 81       	ldd	r19, Z+5	; 0x05
     3f6:	46 81       	ldd	r20, Z+6	; 0x06
     3f8:	57 81       	ldd	r21, Z+7	; 0x07
     3fa:	da 01       	movw	r26, r20
     3fc:	c9 01       	movw	r24, r18
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	a1 09       	sbc	r26, r1
     402:	b1 09       	sbc	r27, r1
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	9f 4f       	sbci	r25, 0xFF	; 255
     408:	af 4f       	sbci	r26, 0xFF	; 255
     40a:	bf 43       	sbci	r27, 0x3F	; 63
     40c:	28 f3       	brcs	.-54     	; 0x3d8 <_fpadd_parts+0x1f4>
     40e:	0b c0       	rjmp	.+22     	; 0x426 <_fpadd_parts+0x242>
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	33 82       	std	Z+3, r3	; 0x03
     414:	22 82       	std	Z+2, r2	; 0x02
     416:	ea 0c       	add	r14, r10
     418:	fb 1c       	adc	r15, r11
     41a:	0c 1d       	adc	r16, r12
     41c:	1d 1d       	adc	r17, r13
     41e:	e4 82       	std	Z+4, r14	; 0x04
     420:	f5 82       	std	Z+5, r15	; 0x05
     422:	06 83       	std	Z+6, r16	; 0x06
     424:	17 83       	std	Z+7, r17	; 0x07
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	80 83       	st	Z, r24
     42a:	24 81       	ldd	r18, Z+4	; 0x04
     42c:	35 81       	ldd	r19, Z+5	; 0x05
     42e:	46 81       	ldd	r20, Z+6	; 0x06
     430:	57 81       	ldd	r21, Z+7	; 0x07
     432:	57 ff       	sbrs	r21, 7
     434:	1a c0       	rjmp	.+52     	; 0x46a <_fpadd_parts+0x286>
     436:	c9 01       	movw	r24, r18
     438:	aa 27       	eor	r26, r26
     43a:	97 fd       	sbrc	r25, 7
     43c:	a0 95       	com	r26
     43e:	ba 2f       	mov	r27, r26
     440:	81 70       	andi	r24, 0x01	; 1
     442:	90 70       	andi	r25, 0x00	; 0
     444:	a0 70       	andi	r26, 0x00	; 0
     446:	b0 70       	andi	r27, 0x00	; 0
     448:	56 95       	lsr	r21
     44a:	47 95       	ror	r20
     44c:	37 95       	ror	r19
     44e:	27 95       	ror	r18
     450:	82 2b       	or	r24, r18
     452:	93 2b       	or	r25, r19
     454:	a4 2b       	or	r26, r20
     456:	b5 2b       	or	r27, r21
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	95 83       	std	Z+5, r25	; 0x05
     45c:	a6 83       	std	Z+6, r26	; 0x06
     45e:	b7 83       	std	Z+7, r27	; 0x07
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	93 83       	std	Z+3, r25	; 0x03
     468:	82 83       	std	Z+2, r24	; 0x02
     46a:	df 01       	movw	r26, r30
     46c:	01 c0       	rjmp	.+2      	; 0x470 <_fpadd_parts+0x28c>
     46e:	d2 01       	movw	r26, r4
     470:	cd 01       	movw	r24, r26
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	e2 e1       	ldi	r30, 0x12	; 18
     478:	0c 94 05 1d 	jmp	0x3a0a	; 0x3a0a <__epilogue_restores__>

0000047c <__subsf3>:
     47c:	a0 e2       	ldi	r26, 0x20	; 32
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e4 e4       	ldi	r30, 0x44	; 68
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	0c 94 f5 1c 	jmp	0x39ea	; 0x39ea <__prologue_saves__+0x18>
     488:	69 83       	std	Y+1, r22	; 0x01
     48a:	7a 83       	std	Y+2, r23	; 0x02
     48c:	8b 83       	std	Y+3, r24	; 0x03
     48e:	9c 83       	std	Y+4, r25	; 0x04
     490:	2d 83       	std	Y+5, r18	; 0x05
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	4f 83       	std	Y+7, r20	; 0x07
     496:	58 87       	std	Y+8, r21	; 0x08
     498:	e9 e0       	ldi	r30, 0x09	; 9
     49a:	ee 2e       	mov	r14, r30
     49c:	f1 2c       	mov	r15, r1
     49e:	ec 0e       	add	r14, r28
     4a0:	fd 1e       	adc	r15, r29
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     4ac:	8e 01       	movw	r16, r28
     4ae:	0f 5e       	subi	r16, 0xEF	; 239
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	05 96       	adiw	r24, 0x05	; 5
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	89 27       	eor	r24, r25
     4c2:	8a 8b       	std	Y+18, r24	; 0x12
     4c4:	c7 01       	movw	r24, r14
     4c6:	b8 01       	movw	r22, r16
     4c8:	ae 01       	movw	r20, r28
     4ca:	47 5e       	subi	r20, 0xE7	; 231
     4cc:	5f 4f       	sbci	r21, 0xFF	; 255
     4ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     4d2:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__pack_f>
     4d6:	a0 96       	adiw	r28, 0x20	; 32
     4d8:	e6 e0       	ldi	r30, 0x06	; 6
     4da:	0c 94 11 1d 	jmp	0x3a22	; 0x3a22 <__epilogue_restores__+0x18>

000004de <__addsf3>:
     4de:	a0 e2       	ldi	r26, 0x20	; 32
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e5 e7       	ldi	r30, 0x75	; 117
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	0c 94 f5 1c 	jmp	0x39ea	; 0x39ea <__prologue_saves__+0x18>
     4ea:	69 83       	std	Y+1, r22	; 0x01
     4ec:	7a 83       	std	Y+2, r23	; 0x02
     4ee:	8b 83       	std	Y+3, r24	; 0x03
     4f0:	9c 83       	std	Y+4, r25	; 0x04
     4f2:	2d 83       	std	Y+5, r18	; 0x05
     4f4:	3e 83       	std	Y+6, r19	; 0x06
     4f6:	4f 83       	std	Y+7, r20	; 0x07
     4f8:	58 87       	std	Y+8, r21	; 0x08
     4fa:	f9 e0       	ldi	r31, 0x09	; 9
     4fc:	ef 2e       	mov	r14, r31
     4fe:	f1 2c       	mov	r15, r1
     500:	ec 0e       	add	r14, r28
     502:	fd 1e       	adc	r15, r29
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	b7 01       	movw	r22, r14
     50a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     50e:	8e 01       	movw	r16, r28
     510:	0f 5e       	subi	r16, 0xEF	; 239
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	ce 01       	movw	r24, r28
     516:	05 96       	adiw	r24, 0x05	; 5
     518:	b8 01       	movw	r22, r16
     51a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     51e:	c7 01       	movw	r24, r14
     520:	b8 01       	movw	r22, r16
     522:	ae 01       	movw	r20, r28
     524:	47 5e       	subi	r20, 0xE7	; 231
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     52c:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__pack_f>
     530:	a0 96       	adiw	r28, 0x20	; 32
     532:	e6 e0       	ldi	r30, 0x06	; 6
     534:	0c 94 11 1d 	jmp	0x3a22	; 0x3a22 <__epilogue_restores__+0x18>

00000538 <__mulsf3>:
     538:	a0 e2       	ldi	r26, 0x20	; 32
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e2 ea       	ldi	r30, 0xA2	; 162
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	0c 94 e9 1c 	jmp	0x39d2	; 0x39d2 <__prologue_saves__>
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	7a 83       	std	Y+2, r23	; 0x02
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
     54c:	2d 83       	std	Y+5, r18	; 0x05
     54e:	3e 83       	std	Y+6, r19	; 0x06
     550:	4f 83       	std	Y+7, r20	; 0x07
     552:	58 87       	std	Y+8, r21	; 0x08
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	be 01       	movw	r22, r28
     55a:	67 5f       	subi	r22, 0xF7	; 247
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     562:	ce 01       	movw	r24, r28
     564:	05 96       	adiw	r24, 0x05	; 5
     566:	be 01       	movw	r22, r28
     568:	6f 5e       	subi	r22, 0xEF	; 239
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     570:	99 85       	ldd	r25, Y+9	; 0x09
     572:	92 30       	cpi	r25, 0x02	; 2
     574:	88 f0       	brcs	.+34     	; 0x598 <__mulsf3+0x60>
     576:	89 89       	ldd	r24, Y+17	; 0x11
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	c8 f0       	brcs	.+50     	; 0x5ae <__mulsf3+0x76>
     57c:	94 30       	cpi	r25, 0x04	; 4
     57e:	19 f4       	brne	.+6      	; 0x586 <__mulsf3+0x4e>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	51 f4       	brne	.+20     	; 0x598 <__mulsf3+0x60>
     584:	04 c0       	rjmp	.+8      	; 0x58e <__mulsf3+0x56>
     586:	84 30       	cpi	r24, 0x04	; 4
     588:	29 f4       	brne	.+10     	; 0x594 <__mulsf3+0x5c>
     58a:	92 30       	cpi	r25, 0x02	; 2
     58c:	81 f4       	brne	.+32     	; 0x5ae <__mulsf3+0x76>
     58e:	89 e7       	ldi	r24, 0x79	; 121
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	c6 c0       	rjmp	.+396    	; 0x720 <__mulsf3+0x1e8>
     594:	92 30       	cpi	r25, 0x02	; 2
     596:	49 f4       	brne	.+18     	; 0x5aa <__mulsf3+0x72>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	9a 85       	ldd	r25, Y+10	; 0x0a
     59c:	8a 89       	ldd	r24, Y+18	; 0x12
     59e:	98 13       	cpse	r25, r24
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	2a 87       	std	Y+10, r18	; 0x0a
     5a4:	ce 01       	movw	r24, r28
     5a6:	09 96       	adiw	r24, 0x09	; 9
     5a8:	bb c0       	rjmp	.+374    	; 0x720 <__mulsf3+0x1e8>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	49 f4       	brne	.+18     	; 0x5c0 <__mulsf3+0x88>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b2:	8a 89       	ldd	r24, Y+18	; 0x12
     5b4:	98 13       	cpse	r25, r24
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	2a 8b       	std	Y+18, r18	; 0x12
     5ba:	ce 01       	movw	r24, r28
     5bc:	41 96       	adiw	r24, 0x11	; 17
     5be:	b0 c0       	rjmp	.+352    	; 0x720 <__mulsf3+0x1e8>
     5c0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5c6:	58 88       	ldd	r5, Y+16	; 0x10
     5c8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ca:	7e 88       	ldd	r7, Y+22	; 0x16
     5cc:	8f 88       	ldd	r8, Y+23	; 0x17
     5ce:	98 8c       	ldd	r9, Y+24	; 0x18
     5d0:	ee 24       	eor	r14, r14
     5d2:	ff 24       	eor	r15, r15
     5d4:	87 01       	movw	r16, r14
     5d6:	aa 24       	eor	r10, r10
     5d8:	bb 24       	eor	r11, r11
     5da:	65 01       	movw	r12, r10
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	e0 e0       	ldi	r30, 0x00	; 0
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	c1 01       	movw	r24, r2
     5ea:	81 70       	andi	r24, 0x01	; 1
     5ec:	90 70       	andi	r25, 0x00	; 0
     5ee:	89 2b       	or	r24, r25
     5f0:	e9 f0       	breq	.+58     	; 0x62c <__mulsf3+0xf4>
     5f2:	e6 0c       	add	r14, r6
     5f4:	f7 1c       	adc	r15, r7
     5f6:	08 1d       	adc	r16, r8
     5f8:	19 1d       	adc	r17, r9
     5fa:	9a 01       	movw	r18, r20
     5fc:	ab 01       	movw	r20, r22
     5fe:	2a 0d       	add	r18, r10
     600:	3b 1d       	adc	r19, r11
     602:	4c 1d       	adc	r20, r12
     604:	5d 1d       	adc	r21, r13
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e6 14       	cp	r14, r6
     610:	f7 04       	cpc	r15, r7
     612:	08 05       	cpc	r16, r8
     614:	19 05       	cpc	r17, r9
     616:	20 f4       	brcc	.+8      	; 0x620 <__mulsf3+0xe8>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 e0       	ldi	r26, 0x00	; 0
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	ba 01       	movw	r22, r20
     622:	a9 01       	movw	r20, r18
     624:	48 0f       	add	r20, r24
     626:	59 1f       	adc	r21, r25
     628:	6a 1f       	adc	r22, r26
     62a:	7b 1f       	adc	r23, r27
     62c:	aa 0c       	add	r10, r10
     62e:	bb 1c       	adc	r11, r11
     630:	cc 1c       	adc	r12, r12
     632:	dd 1c       	adc	r13, r13
     634:	97 fe       	sbrs	r9, 7
     636:	08 c0       	rjmp	.+16     	; 0x648 <__mulsf3+0x110>
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	a0 e0       	ldi	r26, 0x00	; 0
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	a8 2a       	or	r10, r24
     642:	b9 2a       	or	r11, r25
     644:	ca 2a       	or	r12, r26
     646:	db 2a       	or	r13, r27
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	e0 32       	cpi	r30, 0x20	; 32
     64c:	f1 05       	cpc	r31, r1
     64e:	49 f0       	breq	.+18     	; 0x662 <__mulsf3+0x12a>
     650:	66 0c       	add	r6, r6
     652:	77 1c       	adc	r7, r7
     654:	88 1c       	adc	r8, r8
     656:	99 1c       	adc	r9, r9
     658:	56 94       	lsr	r5
     65a:	47 94       	ror	r4
     65c:	37 94       	ror	r3
     65e:	27 94       	ror	r2
     660:	c3 cf       	rjmp	.-122    	; 0x5e8 <__mulsf3+0xb0>
     662:	fa 85       	ldd	r31, Y+10	; 0x0a
     664:	ea 89       	ldd	r30, Y+18	; 0x12
     666:	2b 89       	ldd	r18, Y+19	; 0x13
     668:	3c 89       	ldd	r19, Y+20	; 0x14
     66a:	8b 85       	ldd	r24, Y+11	; 0x0b
     66c:	9c 85       	ldd	r25, Y+12	; 0x0c
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	2e 5f       	subi	r18, 0xFE	; 254
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	17 c0       	rjmp	.+46     	; 0x6a6 <__mulsf3+0x16e>
     678:	ca 01       	movw	r24, r20
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	90 70       	andi	r25, 0x00	; 0
     67e:	89 2b       	or	r24, r25
     680:	61 f0       	breq	.+24     	; 0x69a <__mulsf3+0x162>
     682:	16 95       	lsr	r17
     684:	07 95       	ror	r16
     686:	f7 94       	ror	r15
     688:	e7 94       	ror	r14
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e8       	ldi	r27, 0x80	; 128
     692:	e8 2a       	or	r14, r24
     694:	f9 2a       	or	r15, r25
     696:	0a 2b       	or	r16, r26
     698:	1b 2b       	or	r17, r27
     69a:	76 95       	lsr	r23
     69c:	67 95       	ror	r22
     69e:	57 95       	ror	r21
     6a0:	47 95       	ror	r20
     6a2:	2f 5f       	subi	r18, 0xFF	; 255
     6a4:	3f 4f       	sbci	r19, 0xFF	; 255
     6a6:	77 fd       	sbrc	r23, 7
     6a8:	e7 cf       	rjmp	.-50     	; 0x678 <__mulsf3+0x140>
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <__mulsf3+0x18c>
     6ac:	44 0f       	add	r20, r20
     6ae:	55 1f       	adc	r21, r21
     6b0:	66 1f       	adc	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	17 fd       	sbrc	r17, 7
     6b6:	41 60       	ori	r20, 0x01	; 1
     6b8:	ee 0c       	add	r14, r14
     6ba:	ff 1c       	adc	r15, r15
     6bc:	00 1f       	adc	r16, r16
     6be:	11 1f       	adc	r17, r17
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	30 40       	sbci	r19, 0x00	; 0
     6c4:	40 30       	cpi	r20, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	59 07       	cpc	r21, r25
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	69 07       	cpc	r22, r25
     6ce:	90 e4       	ldi	r25, 0x40	; 64
     6d0:	79 07       	cpc	r23, r25
     6d2:	60 f3       	brcs	.-40     	; 0x6ac <__mulsf3+0x174>
     6d4:	2b 8f       	std	Y+27, r18	; 0x1b
     6d6:	3c 8f       	std	Y+28, r19	; 0x1c
     6d8:	db 01       	movw	r26, r22
     6da:	ca 01       	movw	r24, r20
     6dc:	8f 77       	andi	r24, 0x7F	; 127
     6de:	90 70       	andi	r25, 0x00	; 0
     6e0:	a0 70       	andi	r26, 0x00	; 0
     6e2:	b0 70       	andi	r27, 0x00	; 0
     6e4:	80 34       	cpi	r24, 0x40	; 64
     6e6:	91 05       	cpc	r25, r1
     6e8:	a1 05       	cpc	r26, r1
     6ea:	b1 05       	cpc	r27, r1
     6ec:	61 f4       	brne	.+24     	; 0x706 <__mulsf3+0x1ce>
     6ee:	47 fd       	sbrc	r20, 7
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <__mulsf3+0x1ce>
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	01 05       	cpc	r16, r1
     6f8:	11 05       	cpc	r17, r1
     6fa:	29 f0       	breq	.+10     	; 0x706 <__mulsf3+0x1ce>
     6fc:	40 5c       	subi	r20, 0xC0	; 192
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	6f 4f       	sbci	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	40 78       	andi	r20, 0x80	; 128
     706:	1a 8e       	std	Y+26, r1	; 0x1a
     708:	fe 17       	cp	r31, r30
     70a:	11 f0       	breq	.+4      	; 0x710 <__mulsf3+0x1d8>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	8a 8f       	std	Y+26, r24	; 0x1a
     710:	4d 8f       	std	Y+29, r20	; 0x1d
     712:	5e 8f       	std	Y+30, r21	; 0x1e
     714:	6f 8f       	std	Y+31, r22	; 0x1f
     716:	78 a3       	std	Y+32, r23	; 0x20
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	89 8f       	std	Y+25, r24	; 0x19
     71c:	ce 01       	movw	r24, r28
     71e:	49 96       	adiw	r24, 0x19	; 25
     720:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__pack_f>
     724:	a0 96       	adiw	r28, 0x20	; 32
     726:	e2 e1       	ldi	r30, 0x12	; 18
     728:	0c 94 05 1d 	jmp	0x3a0a	; 0x3a0a <__epilogue_restores__>

0000072c <__gtsf2>:
     72c:	a8 e1       	ldi	r26, 0x18	; 24
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ec e9       	ldi	r30, 0x9C	; 156
     732:	f3 e0       	ldi	r31, 0x03	; 3
     734:	0c 94 f5 1c 	jmp	0x39ea	; 0x39ea <__prologue_saves__+0x18>
     738:	69 83       	std	Y+1, r22	; 0x01
     73a:	7a 83       	std	Y+2, r23	; 0x02
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	2d 83       	std	Y+5, r18	; 0x05
     742:	3e 83       	std	Y+6, r19	; 0x06
     744:	4f 83       	std	Y+7, r20	; 0x07
     746:	58 87       	std	Y+8, r21	; 0x08
     748:	89 e0       	ldi	r24, 0x09	; 9
     74a:	e8 2e       	mov	r14, r24
     74c:	f1 2c       	mov	r15, r1
     74e:	ec 0e       	add	r14, r28
     750:	fd 1e       	adc	r15, r29
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	b7 01       	movw	r22, r14
     758:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     75c:	8e 01       	movw	r16, r28
     75e:	0f 5e       	subi	r16, 0xEF	; 239
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	ce 01       	movw	r24, r28
     764:	05 96       	adiw	r24, 0x05	; 5
     766:	b8 01       	movw	r22, r16
     768:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     76c:	89 85       	ldd	r24, Y+9	; 0x09
     76e:	82 30       	cpi	r24, 0x02	; 2
     770:	40 f0       	brcs	.+16     	; 0x782 <__gtsf2+0x56>
     772:	89 89       	ldd	r24, Y+17	; 0x11
     774:	82 30       	cpi	r24, 0x02	; 2
     776:	28 f0       	brcs	.+10     	; 0x782 <__gtsf2+0x56>
     778:	c7 01       	movw	r24, r14
     77a:	b8 01       	movw	r22, r16
     77c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__fpcmp_parts_f>
     780:	01 c0       	rjmp	.+2      	; 0x784 <__gtsf2+0x58>
     782:	8f ef       	ldi	r24, 0xFF	; 255
     784:	68 96       	adiw	r28, 0x18	; 24
     786:	e6 e0       	ldi	r30, 0x06	; 6
     788:	0c 94 11 1d 	jmp	0x3a22	; 0x3a22 <__epilogue_restores__+0x18>

0000078c <__gesf2>:
     78c:	a8 e1       	ldi	r26, 0x18	; 24
     78e:	b0 e0       	ldi	r27, 0x00	; 0
     790:	ec ec       	ldi	r30, 0xCC	; 204
     792:	f3 e0       	ldi	r31, 0x03	; 3
     794:	0c 94 f5 1c 	jmp	0x39ea	; 0x39ea <__prologue_saves__+0x18>
     798:	69 83       	std	Y+1, r22	; 0x01
     79a:	7a 83       	std	Y+2, r23	; 0x02
     79c:	8b 83       	std	Y+3, r24	; 0x03
     79e:	9c 83       	std	Y+4, r25	; 0x04
     7a0:	2d 83       	std	Y+5, r18	; 0x05
     7a2:	3e 83       	std	Y+6, r19	; 0x06
     7a4:	4f 83       	std	Y+7, r20	; 0x07
     7a6:	58 87       	std	Y+8, r21	; 0x08
     7a8:	89 e0       	ldi	r24, 0x09	; 9
     7aa:	e8 2e       	mov	r14, r24
     7ac:	f1 2c       	mov	r15, r1
     7ae:	ec 0e       	add	r14, r28
     7b0:	fd 1e       	adc	r15, r29
     7b2:	ce 01       	movw	r24, r28
     7b4:	01 96       	adiw	r24, 0x01	; 1
     7b6:	b7 01       	movw	r22, r14
     7b8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     7bc:	8e 01       	movw	r16, r28
     7be:	0f 5e       	subi	r16, 0xEF	; 239
     7c0:	1f 4f       	sbci	r17, 0xFF	; 255
     7c2:	ce 01       	movw	r24, r28
     7c4:	05 96       	adiw	r24, 0x05	; 5
     7c6:	b8 01       	movw	r22, r16
     7c8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     7cc:	89 85       	ldd	r24, Y+9	; 0x09
     7ce:	82 30       	cpi	r24, 0x02	; 2
     7d0:	40 f0       	brcs	.+16     	; 0x7e2 <__gesf2+0x56>
     7d2:	89 89       	ldd	r24, Y+17	; 0x11
     7d4:	82 30       	cpi	r24, 0x02	; 2
     7d6:	28 f0       	brcs	.+10     	; 0x7e2 <__gesf2+0x56>
     7d8:	c7 01       	movw	r24, r14
     7da:	b8 01       	movw	r22, r16
     7dc:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__fpcmp_parts_f>
     7e0:	01 c0       	rjmp	.+2      	; 0x7e4 <__gesf2+0x58>
     7e2:	8f ef       	ldi	r24, 0xFF	; 255
     7e4:	68 96       	adiw	r28, 0x18	; 24
     7e6:	e6 e0       	ldi	r30, 0x06	; 6
     7e8:	0c 94 11 1d 	jmp	0x3a22	; 0x3a22 <__epilogue_restores__+0x18>

000007ec <__ltsf2>:
     7ec:	a8 e1       	ldi	r26, 0x18	; 24
     7ee:	b0 e0       	ldi	r27, 0x00	; 0
     7f0:	ec ef       	ldi	r30, 0xFC	; 252
     7f2:	f3 e0       	ldi	r31, 0x03	; 3
     7f4:	0c 94 f5 1c 	jmp	0x39ea	; 0x39ea <__prologue_saves__+0x18>
     7f8:	69 83       	std	Y+1, r22	; 0x01
     7fa:	7a 83       	std	Y+2, r23	; 0x02
     7fc:	8b 83       	std	Y+3, r24	; 0x03
     7fe:	9c 83       	std	Y+4, r25	; 0x04
     800:	2d 83       	std	Y+5, r18	; 0x05
     802:	3e 83       	std	Y+6, r19	; 0x06
     804:	4f 83       	std	Y+7, r20	; 0x07
     806:	58 87       	std	Y+8, r21	; 0x08
     808:	89 e0       	ldi	r24, 0x09	; 9
     80a:	e8 2e       	mov	r14, r24
     80c:	f1 2c       	mov	r15, r1
     80e:	ec 0e       	add	r14, r28
     810:	fd 1e       	adc	r15, r29
     812:	ce 01       	movw	r24, r28
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	b7 01       	movw	r22, r14
     818:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     81c:	8e 01       	movw	r16, r28
     81e:	0f 5e       	subi	r16, 0xEF	; 239
     820:	1f 4f       	sbci	r17, 0xFF	; 255
     822:	ce 01       	movw	r24, r28
     824:	05 96       	adiw	r24, 0x05	; 5
     826:	b8 01       	movw	r22, r16
     828:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     82c:	89 85       	ldd	r24, Y+9	; 0x09
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	40 f0       	brcs	.+16     	; 0x842 <__ltsf2+0x56>
     832:	89 89       	ldd	r24, Y+17	; 0x11
     834:	82 30       	cpi	r24, 0x02	; 2
     836:	28 f0       	brcs	.+10     	; 0x842 <__ltsf2+0x56>
     838:	c7 01       	movw	r24, r14
     83a:	b8 01       	movw	r22, r16
     83c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__fpcmp_parts_f>
     840:	01 c0       	rjmp	.+2      	; 0x844 <__ltsf2+0x58>
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	68 96       	adiw	r28, 0x18	; 24
     846:	e6 e0       	ldi	r30, 0x06	; 6
     848:	0c 94 11 1d 	jmp	0x3a22	; 0x3a22 <__epilogue_restores__+0x18>

0000084c <__fixsfsi>:
     84c:	ac e0       	ldi	r26, 0x0C	; 12
     84e:	b0 e0       	ldi	r27, 0x00	; 0
     850:	ec e2       	ldi	r30, 0x2C	; 44
     852:	f4 e0       	ldi	r31, 0x04	; 4
     854:	0c 94 f9 1c 	jmp	0x39f2	; 0x39f2 <__prologue_saves__+0x20>
     858:	69 83       	std	Y+1, r22	; 0x01
     85a:	7a 83       	std	Y+2, r23	; 0x02
     85c:	8b 83       	std	Y+3, r24	; 0x03
     85e:	9c 83       	std	Y+4, r25	; 0x04
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	be 01       	movw	r22, r28
     866:	6b 5f       	subi	r22, 0xFB	; 251
     868:	7f 4f       	sbci	r23, 0xFF	; 255
     86a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     86e:	8d 81       	ldd	r24, Y+5	; 0x05
     870:	82 30       	cpi	r24, 0x02	; 2
     872:	61 f1       	breq	.+88     	; 0x8cc <__stack+0x6d>
     874:	82 30       	cpi	r24, 0x02	; 2
     876:	50 f1       	brcs	.+84     	; 0x8cc <__stack+0x6d>
     878:	84 30       	cpi	r24, 0x04	; 4
     87a:	21 f4       	brne	.+8      	; 0x884 <__stack+0x25>
     87c:	8e 81       	ldd	r24, Y+6	; 0x06
     87e:	88 23       	and	r24, r24
     880:	51 f1       	breq	.+84     	; 0x8d6 <__stack+0x77>
     882:	2e c0       	rjmp	.+92     	; 0x8e0 <__stack+0x81>
     884:	2f 81       	ldd	r18, Y+7	; 0x07
     886:	38 85       	ldd	r19, Y+8	; 0x08
     888:	37 fd       	sbrc	r19, 7
     88a:	20 c0       	rjmp	.+64     	; 0x8cc <__stack+0x6d>
     88c:	6e 81       	ldd	r22, Y+6	; 0x06
     88e:	2f 31       	cpi	r18, 0x1F	; 31
     890:	31 05       	cpc	r19, r1
     892:	1c f0       	brlt	.+6      	; 0x89a <__stack+0x3b>
     894:	66 23       	and	r22, r22
     896:	f9 f0       	breq	.+62     	; 0x8d6 <__stack+0x77>
     898:	23 c0       	rjmp	.+70     	; 0x8e0 <__stack+0x81>
     89a:	8e e1       	ldi	r24, 0x1E	; 30
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	82 1b       	sub	r24, r18
     8a0:	93 0b       	sbc	r25, r19
     8a2:	29 85       	ldd	r18, Y+9	; 0x09
     8a4:	3a 85       	ldd	r19, Y+10	; 0x0a
     8a6:	4b 85       	ldd	r20, Y+11	; 0x0b
     8a8:	5c 85       	ldd	r21, Y+12	; 0x0c
     8aa:	04 c0       	rjmp	.+8      	; 0x8b4 <__stack+0x55>
     8ac:	56 95       	lsr	r21
     8ae:	47 95       	ror	r20
     8b0:	37 95       	ror	r19
     8b2:	27 95       	ror	r18
     8b4:	8a 95       	dec	r24
     8b6:	d2 f7       	brpl	.-12     	; 0x8ac <__stack+0x4d>
     8b8:	66 23       	and	r22, r22
     8ba:	b1 f0       	breq	.+44     	; 0x8e8 <__stack+0x89>
     8bc:	50 95       	com	r21
     8be:	40 95       	com	r20
     8c0:	30 95       	com	r19
     8c2:	21 95       	neg	r18
     8c4:	3f 4f       	sbci	r19, 0xFF	; 255
     8c6:	4f 4f       	sbci	r20, 0xFF	; 255
     8c8:	5f 4f       	sbci	r21, 0xFF	; 255
     8ca:	0e c0       	rjmp	.+28     	; 0x8e8 <__stack+0x89>
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	40 e0       	ldi	r20, 0x00	; 0
     8d2:	50 e0       	ldi	r21, 0x00	; 0
     8d4:	09 c0       	rjmp	.+18     	; 0x8e8 <__stack+0x89>
     8d6:	2f ef       	ldi	r18, 0xFF	; 255
     8d8:	3f ef       	ldi	r19, 0xFF	; 255
     8da:	4f ef       	ldi	r20, 0xFF	; 255
     8dc:	5f e7       	ldi	r21, 0x7F	; 127
     8de:	04 c0       	rjmp	.+8      	; 0x8e8 <__stack+0x89>
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	40 e0       	ldi	r20, 0x00	; 0
     8e6:	50 e8       	ldi	r21, 0x80	; 128
     8e8:	b9 01       	movw	r22, r18
     8ea:	ca 01       	movw	r24, r20
     8ec:	2c 96       	adiw	r28, 0x0c	; 12
     8ee:	e2 e0       	ldi	r30, 0x02	; 2
     8f0:	0c 94 15 1d 	jmp	0x3a2a	; 0x3a2a <__epilogue_restores__+0x20>

000008f4 <__pack_f>:
     8f4:	df 92       	push	r13
     8f6:	ef 92       	push	r14
     8f8:	ff 92       	push	r15
     8fa:	0f 93       	push	r16
     8fc:	1f 93       	push	r17
     8fe:	fc 01       	movw	r30, r24
     900:	e4 80       	ldd	r14, Z+4	; 0x04
     902:	f5 80       	ldd	r15, Z+5	; 0x05
     904:	06 81       	ldd	r16, Z+6	; 0x06
     906:	17 81       	ldd	r17, Z+7	; 0x07
     908:	d1 80       	ldd	r13, Z+1	; 0x01
     90a:	80 81       	ld	r24, Z
     90c:	82 30       	cpi	r24, 0x02	; 2
     90e:	48 f4       	brcc	.+18     	; 0x922 <__pack_f+0x2e>
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	a0 e1       	ldi	r26, 0x10	; 16
     916:	b0 e0       	ldi	r27, 0x00	; 0
     918:	e8 2a       	or	r14, r24
     91a:	f9 2a       	or	r15, r25
     91c:	0a 2b       	or	r16, r26
     91e:	1b 2b       	or	r17, r27
     920:	a5 c0       	rjmp	.+330    	; 0xa6c <__pack_f+0x178>
     922:	84 30       	cpi	r24, 0x04	; 4
     924:	09 f4       	brne	.+2      	; 0x928 <__pack_f+0x34>
     926:	9f c0       	rjmp	.+318    	; 0xa66 <__pack_f+0x172>
     928:	82 30       	cpi	r24, 0x02	; 2
     92a:	21 f4       	brne	.+8      	; 0x934 <__pack_f+0x40>
     92c:	ee 24       	eor	r14, r14
     92e:	ff 24       	eor	r15, r15
     930:	87 01       	movw	r16, r14
     932:	05 c0       	rjmp	.+10     	; 0x93e <__pack_f+0x4a>
     934:	e1 14       	cp	r14, r1
     936:	f1 04       	cpc	r15, r1
     938:	01 05       	cpc	r16, r1
     93a:	11 05       	cpc	r17, r1
     93c:	19 f4       	brne	.+6      	; 0x944 <__pack_f+0x50>
     93e:	e0 e0       	ldi	r30, 0x00	; 0
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	96 c0       	rjmp	.+300    	; 0xa70 <__pack_f+0x17c>
     944:	62 81       	ldd	r22, Z+2	; 0x02
     946:	73 81       	ldd	r23, Z+3	; 0x03
     948:	9f ef       	ldi	r25, 0xFF	; 255
     94a:	62 38       	cpi	r22, 0x82	; 130
     94c:	79 07       	cpc	r23, r25
     94e:	0c f0       	brlt	.+2      	; 0x952 <__pack_f+0x5e>
     950:	5b c0       	rjmp	.+182    	; 0xa08 <__pack_f+0x114>
     952:	22 e8       	ldi	r18, 0x82	; 130
     954:	3f ef       	ldi	r19, 0xFF	; 255
     956:	26 1b       	sub	r18, r22
     958:	37 0b       	sbc	r19, r23
     95a:	2a 31       	cpi	r18, 0x1A	; 26
     95c:	31 05       	cpc	r19, r1
     95e:	2c f0       	brlt	.+10     	; 0x96a <__pack_f+0x76>
     960:	20 e0       	ldi	r18, 0x00	; 0
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	40 e0       	ldi	r20, 0x00	; 0
     966:	50 e0       	ldi	r21, 0x00	; 0
     968:	2a c0       	rjmp	.+84     	; 0x9be <__pack_f+0xca>
     96a:	b8 01       	movw	r22, r16
     96c:	a7 01       	movw	r20, r14
     96e:	02 2e       	mov	r0, r18
     970:	04 c0       	rjmp	.+8      	; 0x97a <__pack_f+0x86>
     972:	76 95       	lsr	r23
     974:	67 95       	ror	r22
     976:	57 95       	ror	r21
     978:	47 95       	ror	r20
     97a:	0a 94       	dec	r0
     97c:	d2 f7       	brpl	.-12     	; 0x972 <__pack_f+0x7e>
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	a0 e0       	ldi	r26, 0x00	; 0
     984:	b0 e0       	ldi	r27, 0x00	; 0
     986:	04 c0       	rjmp	.+8      	; 0x990 <__pack_f+0x9c>
     988:	88 0f       	add	r24, r24
     98a:	99 1f       	adc	r25, r25
     98c:	aa 1f       	adc	r26, r26
     98e:	bb 1f       	adc	r27, r27
     990:	2a 95       	dec	r18
     992:	d2 f7       	brpl	.-12     	; 0x988 <__pack_f+0x94>
     994:	01 97       	sbiw	r24, 0x01	; 1
     996:	a1 09       	sbc	r26, r1
     998:	b1 09       	sbc	r27, r1
     99a:	8e 21       	and	r24, r14
     99c:	9f 21       	and	r25, r15
     99e:	a0 23       	and	r26, r16
     9a0:	b1 23       	and	r27, r17
     9a2:	00 97       	sbiw	r24, 0x00	; 0
     9a4:	a1 05       	cpc	r26, r1
     9a6:	b1 05       	cpc	r27, r1
     9a8:	21 f0       	breq	.+8      	; 0x9b2 <__pack_f+0xbe>
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	a0 e0       	ldi	r26, 0x00	; 0
     9b0:	b0 e0       	ldi	r27, 0x00	; 0
     9b2:	9a 01       	movw	r18, r20
     9b4:	ab 01       	movw	r20, r22
     9b6:	28 2b       	or	r18, r24
     9b8:	39 2b       	or	r19, r25
     9ba:	4a 2b       	or	r20, r26
     9bc:	5b 2b       	or	r21, r27
     9be:	da 01       	movw	r26, r20
     9c0:	c9 01       	movw	r24, r18
     9c2:	8f 77       	andi	r24, 0x7F	; 127
     9c4:	90 70       	andi	r25, 0x00	; 0
     9c6:	a0 70       	andi	r26, 0x00	; 0
     9c8:	b0 70       	andi	r27, 0x00	; 0
     9ca:	80 34       	cpi	r24, 0x40	; 64
     9cc:	91 05       	cpc	r25, r1
     9ce:	a1 05       	cpc	r26, r1
     9d0:	b1 05       	cpc	r27, r1
     9d2:	39 f4       	brne	.+14     	; 0x9e2 <__pack_f+0xee>
     9d4:	27 ff       	sbrs	r18, 7
     9d6:	09 c0       	rjmp	.+18     	; 0x9ea <__pack_f+0xf6>
     9d8:	20 5c       	subi	r18, 0xC0	; 192
     9da:	3f 4f       	sbci	r19, 0xFF	; 255
     9dc:	4f 4f       	sbci	r20, 0xFF	; 255
     9de:	5f 4f       	sbci	r21, 0xFF	; 255
     9e0:	04 c0       	rjmp	.+8      	; 0x9ea <__pack_f+0xf6>
     9e2:	21 5c       	subi	r18, 0xC1	; 193
     9e4:	3f 4f       	sbci	r19, 0xFF	; 255
     9e6:	4f 4f       	sbci	r20, 0xFF	; 255
     9e8:	5f 4f       	sbci	r21, 0xFF	; 255
     9ea:	e0 e0       	ldi	r30, 0x00	; 0
     9ec:	f0 e0       	ldi	r31, 0x00	; 0
     9ee:	20 30       	cpi	r18, 0x00	; 0
     9f0:	a0 e0       	ldi	r26, 0x00	; 0
     9f2:	3a 07       	cpc	r19, r26
     9f4:	a0 e0       	ldi	r26, 0x00	; 0
     9f6:	4a 07       	cpc	r20, r26
     9f8:	a0 e4       	ldi	r26, 0x40	; 64
     9fa:	5a 07       	cpc	r21, r26
     9fc:	10 f0       	brcs	.+4      	; 0xa02 <__pack_f+0x10e>
     9fe:	e1 e0       	ldi	r30, 0x01	; 1
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	79 01       	movw	r14, r18
     a04:	8a 01       	movw	r16, r20
     a06:	27 c0       	rjmp	.+78     	; 0xa56 <__pack_f+0x162>
     a08:	60 38       	cpi	r22, 0x80	; 128
     a0a:	71 05       	cpc	r23, r1
     a0c:	64 f5       	brge	.+88     	; 0xa66 <__pack_f+0x172>
     a0e:	fb 01       	movw	r30, r22
     a10:	e1 58       	subi	r30, 0x81	; 129
     a12:	ff 4f       	sbci	r31, 0xFF	; 255
     a14:	d8 01       	movw	r26, r16
     a16:	c7 01       	movw	r24, r14
     a18:	8f 77       	andi	r24, 0x7F	; 127
     a1a:	90 70       	andi	r25, 0x00	; 0
     a1c:	a0 70       	andi	r26, 0x00	; 0
     a1e:	b0 70       	andi	r27, 0x00	; 0
     a20:	80 34       	cpi	r24, 0x40	; 64
     a22:	91 05       	cpc	r25, r1
     a24:	a1 05       	cpc	r26, r1
     a26:	b1 05       	cpc	r27, r1
     a28:	39 f4       	brne	.+14     	; 0xa38 <__pack_f+0x144>
     a2a:	e7 fe       	sbrs	r14, 7
     a2c:	0d c0       	rjmp	.+26     	; 0xa48 <__pack_f+0x154>
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	a0 e0       	ldi	r26, 0x00	; 0
     a34:	b0 e0       	ldi	r27, 0x00	; 0
     a36:	04 c0       	rjmp	.+8      	; 0xa40 <__pack_f+0x14c>
     a38:	8f e3       	ldi	r24, 0x3F	; 63
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	a0 e0       	ldi	r26, 0x00	; 0
     a3e:	b0 e0       	ldi	r27, 0x00	; 0
     a40:	e8 0e       	add	r14, r24
     a42:	f9 1e       	adc	r15, r25
     a44:	0a 1f       	adc	r16, r26
     a46:	1b 1f       	adc	r17, r27
     a48:	17 ff       	sbrs	r17, 7
     a4a:	05 c0       	rjmp	.+10     	; 0xa56 <__pack_f+0x162>
     a4c:	16 95       	lsr	r17
     a4e:	07 95       	ror	r16
     a50:	f7 94       	ror	r15
     a52:	e7 94       	ror	r14
     a54:	31 96       	adiw	r30, 0x01	; 1
     a56:	87 e0       	ldi	r24, 0x07	; 7
     a58:	16 95       	lsr	r17
     a5a:	07 95       	ror	r16
     a5c:	f7 94       	ror	r15
     a5e:	e7 94       	ror	r14
     a60:	8a 95       	dec	r24
     a62:	d1 f7       	brne	.-12     	; 0xa58 <__pack_f+0x164>
     a64:	05 c0       	rjmp	.+10     	; 0xa70 <__pack_f+0x17c>
     a66:	ee 24       	eor	r14, r14
     a68:	ff 24       	eor	r15, r15
     a6a:	87 01       	movw	r16, r14
     a6c:	ef ef       	ldi	r30, 0xFF	; 255
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	6e 2f       	mov	r22, r30
     a72:	67 95       	ror	r22
     a74:	66 27       	eor	r22, r22
     a76:	67 95       	ror	r22
     a78:	90 2f       	mov	r25, r16
     a7a:	9f 77       	andi	r25, 0x7F	; 127
     a7c:	d7 94       	ror	r13
     a7e:	dd 24       	eor	r13, r13
     a80:	d7 94       	ror	r13
     a82:	8e 2f       	mov	r24, r30
     a84:	86 95       	lsr	r24
     a86:	49 2f       	mov	r20, r25
     a88:	46 2b       	or	r20, r22
     a8a:	58 2f       	mov	r21, r24
     a8c:	5d 29       	or	r21, r13
     a8e:	b7 01       	movw	r22, r14
     a90:	ca 01       	movw	r24, r20
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	ff 90       	pop	r15
     a98:	ef 90       	pop	r14
     a9a:	df 90       	pop	r13
     a9c:	08 95       	ret

00000a9e <__unpack_f>:
     a9e:	fc 01       	movw	r30, r24
     aa0:	db 01       	movw	r26, r22
     aa2:	40 81       	ld	r20, Z
     aa4:	51 81       	ldd	r21, Z+1	; 0x01
     aa6:	22 81       	ldd	r18, Z+2	; 0x02
     aa8:	62 2f       	mov	r22, r18
     aaa:	6f 77       	andi	r22, 0x7F	; 127
     aac:	70 e0       	ldi	r23, 0x00	; 0
     aae:	22 1f       	adc	r18, r18
     ab0:	22 27       	eor	r18, r18
     ab2:	22 1f       	adc	r18, r18
     ab4:	93 81       	ldd	r25, Z+3	; 0x03
     ab6:	89 2f       	mov	r24, r25
     ab8:	88 0f       	add	r24, r24
     aba:	82 2b       	or	r24, r18
     abc:	28 2f       	mov	r18, r24
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	99 1f       	adc	r25, r25
     ac2:	99 27       	eor	r25, r25
     ac4:	99 1f       	adc	r25, r25
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	9c 93       	st	X, r25
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	21 15       	cp	r18, r1
     ace:	31 05       	cpc	r19, r1
     ad0:	a9 f5       	brne	.+106    	; 0xb3c <__unpack_f+0x9e>
     ad2:	41 15       	cp	r20, r1
     ad4:	51 05       	cpc	r21, r1
     ad6:	61 05       	cpc	r22, r1
     ad8:	71 05       	cpc	r23, r1
     ada:	11 f4       	brne	.+4      	; 0xae0 <__unpack_f+0x42>
     adc:	82 e0       	ldi	r24, 0x02	; 2
     ade:	37 c0       	rjmp	.+110    	; 0xb4e <__unpack_f+0xb0>
     ae0:	82 e8       	ldi	r24, 0x82	; 130
     ae2:	9f ef       	ldi	r25, 0xFF	; 255
     ae4:	13 96       	adiw	r26, 0x03	; 3
     ae6:	9c 93       	st	X, r25
     ae8:	8e 93       	st	-X, r24
     aea:	12 97       	sbiw	r26, 0x02	; 2
     aec:	9a 01       	movw	r18, r20
     aee:	ab 01       	movw	r20, r22
     af0:	67 e0       	ldi	r22, 0x07	; 7
     af2:	22 0f       	add	r18, r18
     af4:	33 1f       	adc	r19, r19
     af6:	44 1f       	adc	r20, r20
     af8:	55 1f       	adc	r21, r21
     afa:	6a 95       	dec	r22
     afc:	d1 f7       	brne	.-12     	; 0xaf2 <__unpack_f+0x54>
     afe:	83 e0       	ldi	r24, 0x03	; 3
     b00:	8c 93       	st	X, r24
     b02:	0d c0       	rjmp	.+26     	; 0xb1e <__unpack_f+0x80>
     b04:	22 0f       	add	r18, r18
     b06:	33 1f       	adc	r19, r19
     b08:	44 1f       	adc	r20, r20
     b0a:	55 1f       	adc	r21, r21
     b0c:	12 96       	adiw	r26, 0x02	; 2
     b0e:	8d 91       	ld	r24, X+
     b10:	9c 91       	ld	r25, X
     b12:	13 97       	sbiw	r26, 0x03	; 3
     b14:	01 97       	sbiw	r24, 0x01	; 1
     b16:	13 96       	adiw	r26, 0x03	; 3
     b18:	9c 93       	st	X, r25
     b1a:	8e 93       	st	-X, r24
     b1c:	12 97       	sbiw	r26, 0x02	; 2
     b1e:	20 30       	cpi	r18, 0x00	; 0
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	38 07       	cpc	r19, r24
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	48 07       	cpc	r20, r24
     b28:	80 e4       	ldi	r24, 0x40	; 64
     b2a:	58 07       	cpc	r21, r24
     b2c:	58 f3       	brcs	.-42     	; 0xb04 <__unpack_f+0x66>
     b2e:	14 96       	adiw	r26, 0x04	; 4
     b30:	2d 93       	st	X+, r18
     b32:	3d 93       	st	X+, r19
     b34:	4d 93       	st	X+, r20
     b36:	5c 93       	st	X, r21
     b38:	17 97       	sbiw	r26, 0x07	; 7
     b3a:	08 95       	ret
     b3c:	2f 3f       	cpi	r18, 0xFF	; 255
     b3e:	31 05       	cpc	r19, r1
     b40:	79 f4       	brne	.+30     	; 0xb60 <__unpack_f+0xc2>
     b42:	41 15       	cp	r20, r1
     b44:	51 05       	cpc	r21, r1
     b46:	61 05       	cpc	r22, r1
     b48:	71 05       	cpc	r23, r1
     b4a:	19 f4       	brne	.+6      	; 0xb52 <__unpack_f+0xb4>
     b4c:	84 e0       	ldi	r24, 0x04	; 4
     b4e:	8c 93       	st	X, r24
     b50:	08 95       	ret
     b52:	64 ff       	sbrs	r22, 4
     b54:	03 c0       	rjmp	.+6      	; 0xb5c <__unpack_f+0xbe>
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	8c 93       	st	X, r24
     b5a:	12 c0       	rjmp	.+36     	; 0xb80 <__unpack_f+0xe2>
     b5c:	1c 92       	st	X, r1
     b5e:	10 c0       	rjmp	.+32     	; 0xb80 <__unpack_f+0xe2>
     b60:	2f 57       	subi	r18, 0x7F	; 127
     b62:	30 40       	sbci	r19, 0x00	; 0
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	3c 93       	st	X, r19
     b68:	2e 93       	st	-X, r18
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	83 e0       	ldi	r24, 0x03	; 3
     b6e:	8c 93       	st	X, r24
     b70:	87 e0       	ldi	r24, 0x07	; 7
     b72:	44 0f       	add	r20, r20
     b74:	55 1f       	adc	r21, r21
     b76:	66 1f       	adc	r22, r22
     b78:	77 1f       	adc	r23, r23
     b7a:	8a 95       	dec	r24
     b7c:	d1 f7       	brne	.-12     	; 0xb72 <__unpack_f+0xd4>
     b7e:	70 64       	ori	r23, 0x40	; 64
     b80:	14 96       	adiw	r26, 0x04	; 4
     b82:	4d 93       	st	X+, r20
     b84:	5d 93       	st	X+, r21
     b86:	6d 93       	st	X+, r22
     b88:	7c 93       	st	X, r23
     b8a:	17 97       	sbiw	r26, 0x07	; 7
     b8c:	08 95       	ret

00000b8e <__fpcmp_parts_f>:
     b8e:	1f 93       	push	r17
     b90:	dc 01       	movw	r26, r24
     b92:	fb 01       	movw	r30, r22
     b94:	9c 91       	ld	r25, X
     b96:	92 30       	cpi	r25, 0x02	; 2
     b98:	08 f4       	brcc	.+2      	; 0xb9c <__fpcmp_parts_f+0xe>
     b9a:	47 c0       	rjmp	.+142    	; 0xc2a <__fpcmp_parts_f+0x9c>
     b9c:	80 81       	ld	r24, Z
     b9e:	82 30       	cpi	r24, 0x02	; 2
     ba0:	08 f4       	brcc	.+2      	; 0xba4 <__fpcmp_parts_f+0x16>
     ba2:	43 c0       	rjmp	.+134    	; 0xc2a <__fpcmp_parts_f+0x9c>
     ba4:	94 30       	cpi	r25, 0x04	; 4
     ba6:	51 f4       	brne	.+20     	; 0xbbc <__fpcmp_parts_f+0x2e>
     ba8:	11 96       	adiw	r26, 0x01	; 1
     baa:	1c 91       	ld	r17, X
     bac:	84 30       	cpi	r24, 0x04	; 4
     bae:	99 f5       	brne	.+102    	; 0xc16 <__fpcmp_parts_f+0x88>
     bb0:	81 81       	ldd	r24, Z+1	; 0x01
     bb2:	68 2f       	mov	r22, r24
     bb4:	70 e0       	ldi	r23, 0x00	; 0
     bb6:	61 1b       	sub	r22, r17
     bb8:	71 09       	sbc	r23, r1
     bba:	3f c0       	rjmp	.+126    	; 0xc3a <__fpcmp_parts_f+0xac>
     bbc:	84 30       	cpi	r24, 0x04	; 4
     bbe:	21 f0       	breq	.+8      	; 0xbc8 <__fpcmp_parts_f+0x3a>
     bc0:	92 30       	cpi	r25, 0x02	; 2
     bc2:	31 f4       	brne	.+12     	; 0xbd0 <__fpcmp_parts_f+0x42>
     bc4:	82 30       	cpi	r24, 0x02	; 2
     bc6:	b9 f1       	breq	.+110    	; 0xc36 <__fpcmp_parts_f+0xa8>
     bc8:	81 81       	ldd	r24, Z+1	; 0x01
     bca:	88 23       	and	r24, r24
     bcc:	89 f1       	breq	.+98     	; 0xc30 <__fpcmp_parts_f+0xa2>
     bce:	2d c0       	rjmp	.+90     	; 0xc2a <__fpcmp_parts_f+0x9c>
     bd0:	11 96       	adiw	r26, 0x01	; 1
     bd2:	1c 91       	ld	r17, X
     bd4:	11 97       	sbiw	r26, 0x01	; 1
     bd6:	82 30       	cpi	r24, 0x02	; 2
     bd8:	f1 f0       	breq	.+60     	; 0xc16 <__fpcmp_parts_f+0x88>
     bda:	81 81       	ldd	r24, Z+1	; 0x01
     bdc:	18 17       	cp	r17, r24
     bde:	d9 f4       	brne	.+54     	; 0xc16 <__fpcmp_parts_f+0x88>
     be0:	12 96       	adiw	r26, 0x02	; 2
     be2:	2d 91       	ld	r18, X+
     be4:	3c 91       	ld	r19, X
     be6:	13 97       	sbiw	r26, 0x03	; 3
     be8:	82 81       	ldd	r24, Z+2	; 0x02
     bea:	93 81       	ldd	r25, Z+3	; 0x03
     bec:	82 17       	cp	r24, r18
     bee:	93 07       	cpc	r25, r19
     bf0:	94 f0       	brlt	.+36     	; 0xc16 <__fpcmp_parts_f+0x88>
     bf2:	28 17       	cp	r18, r24
     bf4:	39 07       	cpc	r19, r25
     bf6:	bc f0       	brlt	.+46     	; 0xc26 <__fpcmp_parts_f+0x98>
     bf8:	14 96       	adiw	r26, 0x04	; 4
     bfa:	8d 91       	ld	r24, X+
     bfc:	9d 91       	ld	r25, X+
     bfe:	0d 90       	ld	r0, X+
     c00:	bc 91       	ld	r27, X
     c02:	a0 2d       	mov	r26, r0
     c04:	24 81       	ldd	r18, Z+4	; 0x04
     c06:	35 81       	ldd	r19, Z+5	; 0x05
     c08:	46 81       	ldd	r20, Z+6	; 0x06
     c0a:	57 81       	ldd	r21, Z+7	; 0x07
     c0c:	28 17       	cp	r18, r24
     c0e:	39 07       	cpc	r19, r25
     c10:	4a 07       	cpc	r20, r26
     c12:	5b 07       	cpc	r21, r27
     c14:	18 f4       	brcc	.+6      	; 0xc1c <__fpcmp_parts_f+0x8e>
     c16:	11 23       	and	r17, r17
     c18:	41 f0       	breq	.+16     	; 0xc2a <__fpcmp_parts_f+0x9c>
     c1a:	0a c0       	rjmp	.+20     	; 0xc30 <__fpcmp_parts_f+0xa2>
     c1c:	82 17       	cp	r24, r18
     c1e:	93 07       	cpc	r25, r19
     c20:	a4 07       	cpc	r26, r20
     c22:	b5 07       	cpc	r27, r21
     c24:	40 f4       	brcc	.+16     	; 0xc36 <__fpcmp_parts_f+0xa8>
     c26:	11 23       	and	r17, r17
     c28:	19 f0       	breq	.+6      	; 0xc30 <__fpcmp_parts_f+0xa2>
     c2a:	61 e0       	ldi	r22, 0x01	; 1
     c2c:	70 e0       	ldi	r23, 0x00	; 0
     c2e:	05 c0       	rjmp	.+10     	; 0xc3a <__fpcmp_parts_f+0xac>
     c30:	6f ef       	ldi	r22, 0xFF	; 255
     c32:	7f ef       	ldi	r23, 0xFF	; 255
     c34:	02 c0       	rjmp	.+4      	; 0xc3a <__fpcmp_parts_f+0xac>
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	cb 01       	movw	r24, r22
     c3c:	1f 91       	pop	r17
     c3e:	08 95       	ret

00000c40 <Initialise>:
 *                          Functions Definitions                              *
 *******************************************************************************/

/* Initializes hardware components LCD, UART */
void Initialise (void)
{
     c40:	df 93       	push	r29
     c42:	cf 93       	push	r28
     c44:	cd b7       	in	r28, 0x3d	; 61
     c46:	de b7       	in	r29, 0x3e	; 62
     c48:	68 97       	sbiw	r28, 0x18	; 24
     c4a:	0f b6       	in	r0, 0x3f	; 63
     c4c:	f8 94       	cli
     c4e:	de bf       	out	0x3e, r29	; 62
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	cd bf       	out	0x3d, r28	; 61
	/* Initialize the LCD */
	LCD_init();
     c54:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <LCD_init>

	/* Enable global interrupts */
	SREG |= (1<<7);
     c58:	af e5       	ldi	r26, 0x5F	; 95
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	ef e5       	ldi	r30, 0x5F	; 95
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	80 68       	ori	r24, 0x80	; 128
     c64:	8c 93       	st	X, r24
	 * 8-bit data
	 * No parity
	 * 1 stop bit
	 * Baud rate: 9600
	 */
	UART_ConfigType ptr = {(uint8)EIGHT_BIT,(uint8)DISABLE,(uint8)ONE_BIT,(uint16)9600};
     c66:	ce 01       	movw	r24, r28
     c68:	0f 96       	adiw	r24, 0x0f	; 15
     c6a:	9d 8b       	std	Y+21, r25	; 0x15
     c6c:	8c 8b       	std	Y+20, r24	; 0x14
     c6e:	e2 e8       	ldi	r30, 0x82	; 130
     c70:	f1 e0       	ldi	r31, 0x01	; 1
     c72:	ff 8b       	std	Y+23, r31	; 0x17
     c74:	ee 8b       	std	Y+22, r30	; 0x16
     c76:	f5 e0       	ldi	r31, 0x05	; 5
     c78:	f8 8f       	std	Y+24, r31	; 0x18
     c7a:	ee 89       	ldd	r30, Y+22	; 0x16
     c7c:	ff 89       	ldd	r31, Y+23	; 0x17
     c7e:	00 80       	ld	r0, Z
     c80:	8e 89       	ldd	r24, Y+22	; 0x16
     c82:	9f 89       	ldd	r25, Y+23	; 0x17
     c84:	01 96       	adiw	r24, 0x01	; 1
     c86:	9f 8b       	std	Y+23, r25	; 0x17
     c88:	8e 8b       	std	Y+22, r24	; 0x16
     c8a:	ec 89       	ldd	r30, Y+20	; 0x14
     c8c:	fd 89       	ldd	r31, Y+21	; 0x15
     c8e:	00 82       	st	Z, r0
     c90:	8c 89       	ldd	r24, Y+20	; 0x14
     c92:	9d 89       	ldd	r25, Y+21	; 0x15
     c94:	01 96       	adiw	r24, 0x01	; 1
     c96:	9d 8b       	std	Y+21, r25	; 0x15
     c98:	8c 8b       	std	Y+20, r24	; 0x14
     c9a:	98 8d       	ldd	r25, Y+24	; 0x18
     c9c:	91 50       	subi	r25, 0x01	; 1
     c9e:	98 8f       	std	Y+24, r25	; 0x18
     ca0:	e8 8d       	ldd	r30, Y+24	; 0x18
     ca2:	ee 23       	and	r30, r30
     ca4:	51 f7       	brne	.-44     	; 0xc7a <Initialise+0x3a>
	UART_init(&ptr);
     ca6:	ce 01       	movw	r24, r28
     ca8:	0f 96       	adiw	r24, 0x0f	; 15
     caa:	0e 94 b3 1b 	call	0x3766	; 0x3766 <UART_init>

	/* Display welcome messages on the LCD */
	LCD_displayStringRowColumn(0,2,"Door Locker");
     cae:	20 e6       	ldi	r18, 0x60	; 96
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	62 e0       	ldi	r22, 0x02	; 2
     cb6:	a9 01       	movw	r20, r18
     cb8:	0e 94 3f 1b 	call	0x367e	; 0x367e <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"Security System");
     cbc:	2c e6       	ldi	r18, 0x6C	; 108
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	60 e0       	ldi	r22, 0x00	; 0
     cc4:	a9 01       	movw	r20, r18
     cc6:	0e 94 3f 1b 	call	0x367e	; 0x367e <LCD_displayStringRowColumn>
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	aa e7       	ldi	r26, 0x7A	; 122
     cd0:	b4 e4       	ldi	r27, 0x44	; 68
     cd2:	8b 87       	std	Y+11, r24	; 0x0b
     cd4:	9c 87       	std	Y+12, r25	; 0x0c
     cd6:	ad 87       	std	Y+13, r26	; 0x0d
     cd8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cda:	6b 85       	ldd	r22, Y+11	; 0x0b
     cdc:	7c 85       	ldd	r23, Y+12	; 0x0c
     cde:	8d 85       	ldd	r24, Y+13	; 0x0d
     ce0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ce2:	20 e0       	ldi	r18, 0x00	; 0
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	4a ef       	ldi	r20, 0xFA	; 250
     ce8:	54 e4       	ldi	r21, 0x44	; 68
     cea:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
     cee:	dc 01       	movw	r26, r24
     cf0:	cb 01       	movw	r24, r22
     cf2:	8f 83       	std	Y+7, r24	; 0x07
     cf4:	98 87       	std	Y+8, r25	; 0x08
     cf6:	a9 87       	std	Y+9, r26	; 0x09
     cf8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cfa:	6f 81       	ldd	r22, Y+7	; 0x07
     cfc:	78 85       	ldd	r23, Y+8	; 0x08
     cfe:	89 85       	ldd	r24, Y+9	; 0x09
     d00:	9a 85       	ldd	r25, Y+10	; 0x0a
     d02:	20 e0       	ldi	r18, 0x00	; 0
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	40 e8       	ldi	r20, 0x80	; 128
     d08:	5f e3       	ldi	r21, 0x3F	; 63
     d0a:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
     d0e:	88 23       	and	r24, r24
     d10:	2c f4       	brge	.+10     	; 0xd1c <Initialise+0xdc>
		__ticks = 1;
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	9e 83       	std	Y+6, r25	; 0x06
     d18:	8d 83       	std	Y+5, r24	; 0x05
     d1a:	3f c0       	rjmp	.+126    	; 0xd9a <Initialise+0x15a>
	else if (__tmp > 65535)
     d1c:	6f 81       	ldd	r22, Y+7	; 0x07
     d1e:	78 85       	ldd	r23, Y+8	; 0x08
     d20:	89 85       	ldd	r24, Y+9	; 0x09
     d22:	9a 85       	ldd	r25, Y+10	; 0x0a
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	3f ef       	ldi	r19, 0xFF	; 255
     d28:	4f e7       	ldi	r20, 0x7F	; 127
     d2a:	57 e4       	ldi	r21, 0x47	; 71
     d2c:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
     d30:	18 16       	cp	r1, r24
     d32:	4c f5       	brge	.+82     	; 0xd86 <Initialise+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d34:	6b 85       	ldd	r22, Y+11	; 0x0b
     d36:	7c 85       	ldd	r23, Y+12	; 0x0c
     d38:	8d 85       	ldd	r24, Y+13	; 0x0d
     d3a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	40 e2       	ldi	r20, 0x20	; 32
     d42:	51 e4       	ldi	r21, 0x41	; 65
     d44:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
     d48:	dc 01       	movw	r26, r24
     d4a:	cb 01       	movw	r24, r22
     d4c:	bc 01       	movw	r22, r24
     d4e:	cd 01       	movw	r24, r26
     d50:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
     d54:	dc 01       	movw	r26, r24
     d56:	cb 01       	movw	r24, r22
     d58:	9e 83       	std	Y+6, r25	; 0x06
     d5a:	8d 83       	std	Y+5, r24	; 0x05
     d5c:	0f c0       	rjmp	.+30     	; 0xd7c <Initialise+0x13c>
     d5e:	88 ec       	ldi	r24, 0xC8	; 200
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	9c 83       	std	Y+4, r25	; 0x04
     d64:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d66:	8b 81       	ldd	r24, Y+3	; 0x03
     d68:	9c 81       	ldd	r25, Y+4	; 0x04
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	f1 f7       	brne	.-4      	; 0xd6a <Initialise+0x12a>
     d6e:	9c 83       	std	Y+4, r25	; 0x04
     d70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d72:	8d 81       	ldd	r24, Y+5	; 0x05
     d74:	9e 81       	ldd	r25, Y+6	; 0x06
     d76:	01 97       	sbiw	r24, 0x01	; 1
     d78:	9e 83       	std	Y+6, r25	; 0x06
     d7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d7c:	8d 81       	ldd	r24, Y+5	; 0x05
     d7e:	9e 81       	ldd	r25, Y+6	; 0x06
     d80:	00 97       	sbiw	r24, 0x00	; 0
     d82:	69 f7       	brne	.-38     	; 0xd5e <Initialise+0x11e>
     d84:	14 c0       	rjmp	.+40     	; 0xdae <Initialise+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d86:	6f 81       	ldd	r22, Y+7	; 0x07
     d88:	78 85       	ldd	r23, Y+8	; 0x08
     d8a:	89 85       	ldd	r24, Y+9	; 0x09
     d8c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d8e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
     d92:	dc 01       	movw	r26, r24
     d94:	cb 01       	movw	r24, r22
     d96:	9e 83       	std	Y+6, r25	; 0x06
     d98:	8d 83       	std	Y+5, r24	; 0x05
     d9a:	8d 81       	ldd	r24, Y+5	; 0x05
     d9c:	9e 81       	ldd	r25, Y+6	; 0x06
     d9e:	9a 83       	std	Y+2, r25	; 0x02
     da0:	89 83       	std	Y+1, r24	; 0x01
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	9a 81       	ldd	r25, Y+2	; 0x02
     da6:	01 97       	sbiw	r24, 0x01	; 1
     da8:	f1 f7       	brne	.-4      	; 0xda6 <Initialise+0x166>
     daa:	9a 83       	std	Y+2, r25	; 0x02
     dac:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1000);	/* Wait for 1 second */
	LCD_clearScreen();  /* Clear the LCD screen */
     dae:	0e 94 a9 1b 	call	0x3752	; 0x3752 <LCD_clearScreen>
}
     db2:	68 96       	adiw	r28, 0x18	; 24
     db4:	0f b6       	in	r0, 0x3f	; 63
     db6:	f8 94       	cli
     db8:	de bf       	out	0x3e, r29	; 62
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	cd bf       	out	0x3d, r28	; 61
     dbe:	cf 91       	pop	r28
     dc0:	df 91       	pop	r29
     dc2:	08 95       	ret

00000dc4 <Create_Password>:
/*
 * Prompts the user to enter and re-enter a password using a keypad.
 * The password must consist of exactly 5 digits.
 */
void Create_Password (void)
{
     dc4:	df 93       	push	r29
     dc6:	cf 93       	push	r28
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	6c 97       	sbiw	r28, 0x1c	; 28
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	f8 94       	cli
     dd2:	de bf       	out	0x3e, r29	; 62
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	cd bf       	out	0x3d, r28	; 61
	LCD_displayStringRowColumn(0,0,"Plz enter pass: ");
     dd8:	2c e7       	ldi	r18, 0x7C	; 124
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	a9 01       	movw	r20, r18
     de2:	0e 94 3f 1b 	call	0x367e	; 0x367e <LCD_displayStringRowColumn>

	/* Loop to scan password entered by the user.
	 * Loop continues until user presses 'Enter' ('=').
	 * and password contains 5 digits.
	 */
	i=0; /*reset counter*/
     de6:	10 92 a5 01 	sts	0x01A5, r1
	while (1)
	{
		key = KEYPAD_getPressedKey();
     dea:	0e 94 cf 14 	call	0x299e	; 0x299e <KEYPAD_getPressedKey>
     dee:	80 93 a4 01 	sts	0x01A4, r24

		/* Check if key is a number (0-9) */
		if (key >= 0 && key <= 9 && i < size)
     df2:	80 91 a4 01 	lds	r24, 0x01A4
     df6:	8a 30       	cpi	r24, 0x0A	; 10
     df8:	08 f0       	brcs	.+2      	; 0xdfc <Create_Password+0x38>
     dfa:	90 c0       	rjmp	.+288    	; 0xf1c <Create_Password+0x158>
     dfc:	80 91 a5 01 	lds	r24, 0x01A5
     e00:	85 30       	cpi	r24, 0x05	; 5
     e02:	08 f0       	brcs	.+2      	; 0xe06 <Create_Password+0x42>
     e04:	8b c0       	rjmp	.+278    	; 0xf1c <Create_Password+0x158>
		{
			pass[i] = key; 		/* Store the number of key in pass array */
     e06:	80 91 a5 01 	lds	r24, 0x01A5
     e0a:	88 2f       	mov	r24, r24
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	20 91 a4 01 	lds	r18, 0x01A4
     e12:	fc 01       	movw	r30, r24
     e14:	ec 54       	subi	r30, 0x4C	; 76
     e16:	fe 4f       	sbci	r31, 0xFE	; 254
     e18:	20 83       	st	Z, r18
			LCD_displayStringRowColumn(1, i, "*"); /* Display '*' for privacy */
     e1a:	90 91 a5 01 	lds	r25, 0x01A5
     e1e:	2d e8       	ldi	r18, 0x8D	; 141
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	69 2f       	mov	r22, r25
     e26:	a9 01       	movw	r20, r18
     e28:	0e 94 3f 1b 	call	0x367e	; 0x367e <LCD_displayStringRowColumn>
			i++;
     e2c:	80 91 a5 01 	lds	r24, 0x01A5
     e30:	8f 5f       	subi	r24, 0xFF	; 255
     e32:	80 93 a5 01 	sts	0x01A5, r24
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	a8 e4       	ldi	r26, 0x48	; 72
     e3c:	b3 e4       	ldi	r27, 0x43	; 67
     e3e:	89 8f       	std	Y+25, r24	; 0x19
     e40:	9a 8f       	std	Y+26, r25	; 0x1a
     e42:	ab 8f       	std	Y+27, r26	; 0x1b
     e44:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e46:	69 8d       	ldd	r22, Y+25	; 0x19
     e48:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	4a ef       	ldi	r20, 0xFA	; 250
     e54:	54 e4       	ldi	r21, 0x44	; 68
     e56:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
     e5a:	dc 01       	movw	r26, r24
     e5c:	cb 01       	movw	r24, r22
     e5e:	8d 8b       	std	Y+21, r24	; 0x15
     e60:	9e 8b       	std	Y+22, r25	; 0x16
     e62:	af 8b       	std	Y+23, r26	; 0x17
     e64:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e66:	6d 89       	ldd	r22, Y+21	; 0x15
     e68:	7e 89       	ldd	r23, Y+22	; 0x16
     e6a:	8f 89       	ldd	r24, Y+23	; 0x17
     e6c:	98 8d       	ldd	r25, Y+24	; 0x18
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	40 e8       	ldi	r20, 0x80	; 128
     e74:	5f e3       	ldi	r21, 0x3F	; 63
     e76:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
     e7a:	88 23       	and	r24, r24
     e7c:	2c f4       	brge	.+10     	; 0xe88 <Create_Password+0xc4>
		__ticks = 1;
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	9c 8b       	std	Y+20, r25	; 0x14
     e84:	8b 8b       	std	Y+19, r24	; 0x13
     e86:	3f c0       	rjmp	.+126    	; 0xf06 <Create_Password+0x142>
	else if (__tmp > 65535)
     e88:	6d 89       	ldd	r22, Y+21	; 0x15
     e8a:	7e 89       	ldd	r23, Y+22	; 0x16
     e8c:	8f 89       	ldd	r24, Y+23	; 0x17
     e8e:	98 8d       	ldd	r25, Y+24	; 0x18
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	3f ef       	ldi	r19, 0xFF	; 255
     e94:	4f e7       	ldi	r20, 0x7F	; 127
     e96:	57 e4       	ldi	r21, 0x47	; 71
     e98:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
     e9c:	18 16       	cp	r1, r24
     e9e:	4c f5       	brge	.+82     	; 0xef2 <Create_Password+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ea0:	69 8d       	ldd	r22, Y+25	; 0x19
     ea2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ea4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ea6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	40 e2       	ldi	r20, 0x20	; 32
     eae:	51 e4       	ldi	r21, 0x41	; 65
     eb0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
     eb4:	dc 01       	movw	r26, r24
     eb6:	cb 01       	movw	r24, r22
     eb8:	bc 01       	movw	r22, r24
     eba:	cd 01       	movw	r24, r26
     ebc:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
     ec0:	dc 01       	movw	r26, r24
     ec2:	cb 01       	movw	r24, r22
     ec4:	9c 8b       	std	Y+20, r25	; 0x14
     ec6:	8b 8b       	std	Y+19, r24	; 0x13
     ec8:	0f c0       	rjmp	.+30     	; 0xee8 <Create_Password+0x124>
     eca:	88 ec       	ldi	r24, 0xC8	; 200
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	9a 8b       	std	Y+18, r25	; 0x12
     ed0:	89 8b       	std	Y+17, r24	; 0x11
     ed2:	89 89       	ldd	r24, Y+17	; 0x11
     ed4:	9a 89       	ldd	r25, Y+18	; 0x12
     ed6:	01 97       	sbiw	r24, 0x01	; 1
     ed8:	f1 f7       	brne	.-4      	; 0xed6 <Create_Password+0x112>
     eda:	9a 8b       	std	Y+18, r25	; 0x12
     edc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ede:	8b 89       	ldd	r24, Y+19	; 0x13
     ee0:	9c 89       	ldd	r25, Y+20	; 0x14
     ee2:	01 97       	sbiw	r24, 0x01	; 1
     ee4:	9c 8b       	std	Y+20, r25	; 0x14
     ee6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee8:	8b 89       	ldd	r24, Y+19	; 0x13
     eea:	9c 89       	ldd	r25, Y+20	; 0x14
     eec:	00 97       	sbiw	r24, 0x00	; 0
     eee:	69 f7       	brne	.-38     	; 0xeca <Create_Password+0x106>
     ef0:	7c cf       	rjmp	.-264    	; 0xdea <Create_Password+0x26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ef2:	6d 89       	ldd	r22, Y+21	; 0x15
     ef4:	7e 89       	ldd	r23, Y+22	; 0x16
     ef6:	8f 89       	ldd	r24, Y+23	; 0x17
     ef8:	98 8d       	ldd	r25, Y+24	; 0x18
     efa:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
     efe:	dc 01       	movw	r26, r24
     f00:	cb 01       	movw	r24, r22
     f02:	9c 8b       	std	Y+20, r25	; 0x14
     f04:	8b 8b       	std	Y+19, r24	; 0x13
     f06:	8b 89       	ldd	r24, Y+19	; 0x13
     f08:	9c 89       	ldd	r25, Y+20	; 0x14
     f0a:	98 8b       	std	Y+16, r25	; 0x10
     f0c:	8f 87       	std	Y+15, r24	; 0x0f
     f0e:	8f 85       	ldd	r24, Y+15	; 0x0f
     f10:	98 89       	ldd	r25, Y+16	; 0x10
     f12:	01 97       	sbiw	r24, 0x01	; 1
     f14:	f1 f7       	brne	.-4      	; 0xf12 <Create_Password+0x14e>
     f16:	98 8b       	std	Y+16, r25	; 0x10
     f18:	8f 87       	std	Y+15, r24	; 0x0f
     f1a:	67 cf       	rjmp	.-306    	; 0xdea <Create_Password+0x26>
			_delay_ms(200);		 /* Handl pressig on keypad */
		}
		else if (key == '=' && i == size)
     f1c:	80 91 a4 01 	lds	r24, 0x01A4
     f20:	8d 33       	cpi	r24, 0x3D	; 61
     f22:	09 f0       	breq	.+2      	; 0xf26 <Create_Password+0x162>
     f24:	62 cf       	rjmp	.-316    	; 0xdea <Create_Password+0x26>
     f26:	80 91 a5 01 	lds	r24, 0x01A5
     f2a:	85 30       	cpi	r24, 0x05	; 5
     f2c:	09 f0       	breq	.+2      	; 0xf30 <Create_Password+0x16c>
     f2e:	5d cf       	rjmp	.-326    	; 0xdea <Create_Password+0x26>
		{
			/* Exit the loop if the password is complete */
			break;
		}
	}
	LCD_clearScreen(); /* Clear screen to re enter the password */
     f30:	0e 94 a9 1b 	call	0x3752	; 0x3752 <LCD_clearScreen>

	/* Prompt user to re-enter the same password */
	LCD_displayStringRowColumn(0,0,"Plz re-enter the");
     f34:	2f e8       	ldi	r18, 0x8F	; 143
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	60 e0       	ldi	r22, 0x00	; 0
     f3c:	a9 01       	movw	r20, r18
     f3e:	0e 94 3f 1b 	call	0x367e	; 0x367e <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"same pass:");
     f42:	20 ea       	ldi	r18, 0xA0	; 160
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	60 e0       	ldi	r22, 0x00	; 0
     f4a:	a9 01       	movw	r20, r18
     f4c:	0e 94 3f 1b 	call	0x367e	; 0x367e <LCD_displayStringRowColumn>

	/* Loop to scan the re-entered password */
	i=0; /*reset counter*/
     f50:	10 92 a5 01 	sts	0x01A5, r1
	while (1)
	{
		key = KEYPAD_getPressedKey();
     f54:	0e 94 cf 14 	call	0x299e	; 0x299e <KEYPAD_getPressedKey>
     f58:	80 93 a4 01 	sts	0x01A4, r24

		/* Check if key is a number (0-9) */
		if (key >= 0 && key <= 9 && i < size)
     f5c:	80 91 a4 01 	lds	r24, 0x01A4
     f60:	8a 30       	cpi	r24, 0x0A	; 10
     f62:	08 f0       	brcs	.+2      	; 0xf66 <Create_Password+0x1a2>
     f64:	92 c0       	rjmp	.+292    	; 0x108a <Create_Password+0x2c6>
     f66:	80 91 a5 01 	lds	r24, 0x01A5
     f6a:	85 30       	cpi	r24, 0x05	; 5
     f6c:	08 f0       	brcs	.+2      	; 0xf70 <Create_Password+0x1ac>
     f6e:	8d c0       	rjmp	.+282    	; 0x108a <Create_Password+0x2c6>
		{
			pass_check[i] = key; 		/* Store the number of key in pass_check array */
     f70:	80 91 a5 01 	lds	r24, 0x01A5
     f74:	88 2f       	mov	r24, r24
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	20 91 a4 01 	lds	r18, 0x01A4
     f7c:	fc 01       	movw	r30, r24
     f7e:	e7 54       	subi	r30, 0x47	; 71
     f80:	fe 4f       	sbci	r31, 0xFE	; 254
     f82:	20 83       	st	Z, r18
			LCD_displayStringRowColumn(1, 10+i , "*"); /* Display '*' for privacy */
     f84:	80 91 a5 01 	lds	r24, 0x01A5
     f88:	98 2f       	mov	r25, r24
     f8a:	96 5f       	subi	r25, 0xF6	; 246
     f8c:	2d e8       	ldi	r18, 0x8D	; 141
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	69 2f       	mov	r22, r25
     f94:	a9 01       	movw	r20, r18
     f96:	0e 94 3f 1b 	call	0x367e	; 0x367e <LCD_displayStringRowColumn>
			i++;
     f9a:	80 91 a5 01 	lds	r24, 0x01A5
     f9e:	8f 5f       	subi	r24, 0xFF	; 255
     fa0:	80 93 a5 01 	sts	0x01A5, r24
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	a8 e4       	ldi	r26, 0x48	; 72
     faa:	b3 e4       	ldi	r27, 0x43	; 67
     fac:	8b 87       	std	Y+11, r24	; 0x0b
     fae:	9c 87       	std	Y+12, r25	; 0x0c
     fb0:	ad 87       	std	Y+13, r26	; 0x0d
     fb2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fb4:	6b 85       	ldd	r22, Y+11	; 0x0b
     fb6:	7c 85       	ldd	r23, Y+12	; 0x0c
     fb8:	8d 85       	ldd	r24, Y+13	; 0x0d
     fba:	9e 85       	ldd	r25, Y+14	; 0x0e
     fbc:	20 e0       	ldi	r18, 0x00	; 0
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	4a ef       	ldi	r20, 0xFA	; 250
     fc2:	54 e4       	ldi	r21, 0x44	; 68
     fc4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
     fc8:	dc 01       	movw	r26, r24
     fca:	cb 01       	movw	r24, r22
     fcc:	8f 83       	std	Y+7, r24	; 0x07
     fce:	98 87       	std	Y+8, r25	; 0x08
     fd0:	a9 87       	std	Y+9, r26	; 0x09
     fd2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fd4:	6f 81       	ldd	r22, Y+7	; 0x07
     fd6:	78 85       	ldd	r23, Y+8	; 0x08
     fd8:	89 85       	ldd	r24, Y+9	; 0x09
     fda:	9a 85       	ldd	r25, Y+10	; 0x0a
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	40 e8       	ldi	r20, 0x80	; 128
     fe2:	5f e3       	ldi	r21, 0x3F	; 63
     fe4:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
     fe8:	88 23       	and	r24, r24
     fea:	2c f4       	brge	.+10     	; 0xff6 <Create_Password+0x232>
		__ticks = 1;
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	9e 83       	std	Y+6, r25	; 0x06
     ff2:	8d 83       	std	Y+5, r24	; 0x05
     ff4:	3f c0       	rjmp	.+126    	; 0x1074 <Create_Password+0x2b0>
	else if (__tmp > 65535)
     ff6:	6f 81       	ldd	r22, Y+7	; 0x07
     ff8:	78 85       	ldd	r23, Y+8	; 0x08
     ffa:	89 85       	ldd	r24, Y+9	; 0x09
     ffc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	3f ef       	ldi	r19, 0xFF	; 255
    1002:	4f e7       	ldi	r20, 0x7F	; 127
    1004:	57 e4       	ldi	r21, 0x47	; 71
    1006:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    100a:	18 16       	cp	r1, r24
    100c:	4c f5       	brge	.+82     	; 0x1060 <Create_Password+0x29c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    100e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1010:	7c 85       	ldd	r23, Y+12	; 0x0c
    1012:	8d 85       	ldd	r24, Y+13	; 0x0d
    1014:	9e 85       	ldd	r25, Y+14	; 0x0e
    1016:	20 e0       	ldi	r18, 0x00	; 0
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	40 e2       	ldi	r20, 0x20	; 32
    101c:	51 e4       	ldi	r21, 0x41	; 65
    101e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1022:	dc 01       	movw	r26, r24
    1024:	cb 01       	movw	r24, r22
    1026:	bc 01       	movw	r22, r24
    1028:	cd 01       	movw	r24, r26
    102a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    102e:	dc 01       	movw	r26, r24
    1030:	cb 01       	movw	r24, r22
    1032:	9e 83       	std	Y+6, r25	; 0x06
    1034:	8d 83       	std	Y+5, r24	; 0x05
    1036:	0f c0       	rjmp	.+30     	; 0x1056 <Create_Password+0x292>
    1038:	88 ec       	ldi	r24, 0xC8	; 200
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	9c 83       	std	Y+4, r25	; 0x04
    103e:	8b 83       	std	Y+3, r24	; 0x03
    1040:	8b 81       	ldd	r24, Y+3	; 0x03
    1042:	9c 81       	ldd	r25, Y+4	; 0x04
    1044:	01 97       	sbiw	r24, 0x01	; 1
    1046:	f1 f7       	brne	.-4      	; 0x1044 <Create_Password+0x280>
    1048:	9c 83       	std	Y+4, r25	; 0x04
    104a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    104c:	8d 81       	ldd	r24, Y+5	; 0x05
    104e:	9e 81       	ldd	r25, Y+6	; 0x06
    1050:	01 97       	sbiw	r24, 0x01	; 1
    1052:	9e 83       	std	Y+6, r25	; 0x06
    1054:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1056:	8d 81       	ldd	r24, Y+5	; 0x05
    1058:	9e 81       	ldd	r25, Y+6	; 0x06
    105a:	00 97       	sbiw	r24, 0x00	; 0
    105c:	69 f7       	brne	.-38     	; 0x1038 <Create_Password+0x274>
    105e:	7a cf       	rjmp	.-268    	; 0xf54 <Create_Password+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1060:	6f 81       	ldd	r22, Y+7	; 0x07
    1062:	78 85       	ldd	r23, Y+8	; 0x08
    1064:	89 85       	ldd	r24, Y+9	; 0x09
    1066:	9a 85       	ldd	r25, Y+10	; 0x0a
    1068:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    106c:	dc 01       	movw	r26, r24
    106e:	cb 01       	movw	r24, r22
    1070:	9e 83       	std	Y+6, r25	; 0x06
    1072:	8d 83       	std	Y+5, r24	; 0x05
    1074:	8d 81       	ldd	r24, Y+5	; 0x05
    1076:	9e 81       	ldd	r25, Y+6	; 0x06
    1078:	9a 83       	std	Y+2, r25	; 0x02
    107a:	89 83       	std	Y+1, r24	; 0x01
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	9a 81       	ldd	r25, Y+2	; 0x02
    1080:	01 97       	sbiw	r24, 0x01	; 1
    1082:	f1 f7       	brne	.-4      	; 0x1080 <Create_Password+0x2bc>
    1084:	9a 83       	std	Y+2, r25	; 0x02
    1086:	89 83       	std	Y+1, r24	; 0x01
    1088:	65 cf       	rjmp	.-310    	; 0xf54 <Create_Password+0x190>
			_delay_ms(200);		 /* Handl pressig on keypad */
		}
		else if (key == '=' && i == size )
    108a:	80 91 a4 01 	lds	r24, 0x01A4
    108e:	8d 33       	cpi	r24, 0x3D	; 61
    1090:	09 f0       	breq	.+2      	; 0x1094 <Create_Password+0x2d0>
    1092:	60 cf       	rjmp	.-320    	; 0xf54 <Create_Password+0x190>
    1094:	80 91 a5 01 	lds	r24, 0x01A5
    1098:	85 30       	cpi	r24, 0x05	; 5
    109a:	09 f0       	breq	.+2      	; 0x109e <Create_Password+0x2da>
    109c:	5b cf       	rjmp	.-330    	; 0xf54 <Create_Password+0x190>
		{
			/* Exit the loop if the password is complete */
			break;
		}
	}
}
    109e:	6c 96       	adiw	r28, 0x1c	; 28
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	f8 94       	cli
    10a4:	de bf       	out	0x3e, r29	; 62
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	cd bf       	out	0x3d, r28	; 61
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <Send_Password>:

/* Sends each byte of the entered password via UART.*/
void Send_Password (uint8 array[])
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <Send_Password+0x6>
    10b6:	cd b7       	in	r28, 0x3d	; 61
    10b8:	de b7       	in	r29, 0x3e	; 62
    10ba:	9a 83       	std	Y+2, r25	; 0x02
    10bc:	89 83       	std	Y+1, r24	; 0x01
	/* Loop to send each byte for entered password */
	for (i=0 ; i<size ; i++)
    10be:	10 92 a5 01 	sts	0x01A5, r1
    10c2:	11 c0       	rjmp	.+34     	; 0x10e6 <Send_Password+0x36>
	{
		/* Send each byte via UART */
		UART_sendByte(array[i]);
    10c4:	80 91 a5 01 	lds	r24, 0x01A5
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	9a 81       	ldd	r25, Y+2	; 0x02
    10d0:	fc 01       	movw	r30, r24
    10d2:	e2 0f       	add	r30, r18
    10d4:	f3 1f       	adc	r31, r19
    10d6:	80 81       	ld	r24, Z
    10d8:	0e 94 35 1c 	call	0x386a	; 0x386a <UART_sendByte>

/* Sends each byte of the entered password via UART.*/
void Send_Password (uint8 array[])
{
	/* Loop to send each byte for entered password */
	for (i=0 ; i<size ; i++)
    10dc:	80 91 a5 01 	lds	r24, 0x01A5
    10e0:	8f 5f       	subi	r24, 0xFF	; 255
    10e2:	80 93 a5 01 	sts	0x01A5, r24
    10e6:	80 91 a5 01 	lds	r24, 0x01A5
    10ea:	85 30       	cpi	r24, 0x05	; 5
    10ec:	58 f3       	brcs	.-42     	; 0x10c4 <Send_Password+0x14>
	{
		/* Send each byte via UART */
		UART_sendByte(array[i]);
	}
}
    10ee:	0f 90       	pop	r0
    10f0:	0f 90       	pop	r0
    10f2:	cf 91       	pop	r28
    10f4:	df 91       	pop	r29
    10f6:	08 95       	ret

000010f8 <Recive_Confirmation>:
/*
 * Receives confirmation of the password matching status via UART.
 * If the confirmation fails, prompts the user to create a new password.
 */
void Recive_Confirmation (void)
{
    10f8:	df 93       	push	r29
    10fa:	cf 93       	push	r28
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
    1100:	6d 97       	sbiw	r28, 0x1d	; 29
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	f8 94       	cli
    1106:	de bf       	out	0x3e, r29	; 62
    1108:	0f be       	out	0x3f, r0	; 63
    110a:	cd bf       	out	0x3d, r28	; 61
	uint8 recive ; /* Variable to store the received confirmation status */

	/* Receive the confirmation status via UART */
	recive = UART_recieveByte();
    110c:	0e 94 4c 1c 	call	0x3898	; 0x3898 <UART_recieveByte>
    1110:	8d 8f       	std	Y+29, r24	; 0x1d

	/* If the received status is FAIL, the passwords do not match */
	if(recive == FAIL)
    1112:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1114:	88 23       	and	r24, r24
    1116:	09 f0       	breq	.+2      	; 0x111a <Recive_Confirmation+0x22>
    1118:	88 c0       	rjmp	.+272    	; 0x122a <Recive_Confirmation+0x132>
	{
		LCD_clearScreen(); /* Clear the screen */
    111a:	0e 94 a9 1b 	call	0x3752	; 0x3752 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Fail : Not match"); /* Display failure message */
    111e:	2b ea       	ldi	r18, 0xAB	; 171
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	60 e0       	ldi	r22, 0x00	; 0
    1126:	a9 01       	movw	r20, r18
    1128:	0e 94 3f 1b 	call	0x367e	; 0x367e <LCD_displayStringRowColumn>
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	aa ef       	ldi	r26, 0xFA	; 250
    1132:	b3 e4       	ldi	r27, 0x43	; 67
    1134:	89 8f       	std	Y+25, r24	; 0x19
    1136:	9a 8f       	std	Y+26, r25	; 0x1a
    1138:	ab 8f       	std	Y+27, r26	; 0x1b
    113a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    113c:	69 8d       	ldd	r22, Y+25	; 0x19
    113e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1140:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1142:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	4a ef       	ldi	r20, 0xFA	; 250
    114a:	54 e4       	ldi	r21, 0x44	; 68
    114c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1150:	dc 01       	movw	r26, r24
    1152:	cb 01       	movw	r24, r22
    1154:	8d 8b       	std	Y+21, r24	; 0x15
    1156:	9e 8b       	std	Y+22, r25	; 0x16
    1158:	af 8b       	std	Y+23, r26	; 0x17
    115a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    115c:	6d 89       	ldd	r22, Y+21	; 0x15
    115e:	7e 89       	ldd	r23, Y+22	; 0x16
    1160:	8f 89       	ldd	r24, Y+23	; 0x17
    1162:	98 8d       	ldd	r25, Y+24	; 0x18
    1164:	20 e0       	ldi	r18, 0x00	; 0
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	40 e8       	ldi	r20, 0x80	; 128
    116a:	5f e3       	ldi	r21, 0x3F	; 63
    116c:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1170:	88 23       	and	r24, r24
    1172:	2c f4       	brge	.+10     	; 0x117e <Recive_Confirmation+0x86>
		__ticks = 1;
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	9c 8b       	std	Y+20, r25	; 0x14
    117a:	8b 8b       	std	Y+19, r24	; 0x13
    117c:	3f c0       	rjmp	.+126    	; 0x11fc <Recive_Confirmation+0x104>
	else if (__tmp > 65535)
    117e:	6d 89       	ldd	r22, Y+21	; 0x15
    1180:	7e 89       	ldd	r23, Y+22	; 0x16
    1182:	8f 89       	ldd	r24, Y+23	; 0x17
    1184:	98 8d       	ldd	r25, Y+24	; 0x18
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	3f ef       	ldi	r19, 0xFF	; 255
    118a:	4f e7       	ldi	r20, 0x7F	; 127
    118c:	57 e4       	ldi	r21, 0x47	; 71
    118e:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1192:	18 16       	cp	r1, r24
    1194:	4c f5       	brge	.+82     	; 0x11e8 <Recive_Confirmation+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1196:	69 8d       	ldd	r22, Y+25	; 0x19
    1198:	7a 8d       	ldd	r23, Y+26	; 0x1a
    119a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    119c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	40 e2       	ldi	r20, 0x20	; 32
    11a4:	51 e4       	ldi	r21, 0x41	; 65
    11a6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    11aa:	dc 01       	movw	r26, r24
    11ac:	cb 01       	movw	r24, r22
    11ae:	bc 01       	movw	r22, r24
    11b0:	cd 01       	movw	r24, r26
    11b2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    11b6:	dc 01       	movw	r26, r24
    11b8:	cb 01       	movw	r24, r22
    11ba:	9c 8b       	std	Y+20, r25	; 0x14
    11bc:	8b 8b       	std	Y+19, r24	; 0x13
    11be:	0f c0       	rjmp	.+30     	; 0x11de <Recive_Confirmation+0xe6>
    11c0:	88 ec       	ldi	r24, 0xC8	; 200
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	9a 8b       	std	Y+18, r25	; 0x12
    11c6:	89 8b       	std	Y+17, r24	; 0x11
    11c8:	89 89       	ldd	r24, Y+17	; 0x11
    11ca:	9a 89       	ldd	r25, Y+18	; 0x12
    11cc:	01 97       	sbiw	r24, 0x01	; 1
    11ce:	f1 f7       	brne	.-4      	; 0x11cc <Recive_Confirmation+0xd4>
    11d0:	9a 8b       	std	Y+18, r25	; 0x12
    11d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11d4:	8b 89       	ldd	r24, Y+19	; 0x13
    11d6:	9c 89       	ldd	r25, Y+20	; 0x14
    11d8:	01 97       	sbiw	r24, 0x01	; 1
    11da:	9c 8b       	std	Y+20, r25	; 0x14
    11dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11de:	8b 89       	ldd	r24, Y+19	; 0x13
    11e0:	9c 89       	ldd	r25, Y+20	; 0x14
    11e2:	00 97       	sbiw	r24, 0x00	; 0
    11e4:	69 f7       	brne	.-38     	; 0x11c0 <Recive_Confirmation+0xc8>
    11e6:	14 c0       	rjmp	.+40     	; 0x1210 <Recive_Confirmation+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11e8:	6d 89       	ldd	r22, Y+21	; 0x15
    11ea:	7e 89       	ldd	r23, Y+22	; 0x16
    11ec:	8f 89       	ldd	r24, Y+23	; 0x17
    11ee:	98 8d       	ldd	r25, Y+24	; 0x18
    11f0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    11f4:	dc 01       	movw	r26, r24
    11f6:	cb 01       	movw	r24, r22
    11f8:	9c 8b       	std	Y+20, r25	; 0x14
    11fa:	8b 8b       	std	Y+19, r24	; 0x13
    11fc:	8b 89       	ldd	r24, Y+19	; 0x13
    11fe:	9c 89       	ldd	r25, Y+20	; 0x14
    1200:	98 8b       	std	Y+16, r25	; 0x10
    1202:	8f 87       	std	Y+15, r24	; 0x0f
    1204:	8f 85       	ldd	r24, Y+15	; 0x0f
    1206:	98 89       	ldd	r25, Y+16	; 0x10
    1208:	01 97       	sbiw	r24, 0x01	; 1
    120a:	f1 f7       	brne	.-4      	; 0x1208 <Recive_Confirmation+0x110>
    120c:	98 8b       	std	Y+16, r25	; 0x10
    120e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);  /* Wait for a moment */

		/* Prompt the user to create a new password */
		Create_Password ();
    1210:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <Create_Password>
		Send_Password (pass);
    1214:	84 eb       	ldi	r24, 0xB4	; 180
    1216:	91 e0       	ldi	r25, 0x01	; 1
    1218:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Send_Password>
		Send_Password (pass_check);
    121c:	89 eb       	ldi	r24, 0xB9	; 185
    121e:	91 e0       	ldi	r25, 0x01	; 1
    1220:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Send_Password>

		/* Recursively call to receive confirmation again */
		Recive_Confirmation();
    1224:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <Recive_Confirmation>
    1228:	7f c0       	rjmp	.+254    	; 0x1328 <Recive_Confirmation+0x230>
	}

	/* If the received status is SUCCESS, the passwords match */
	else if ( recive == SUCCESS )
    122a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    122c:	81 30       	cpi	r24, 0x01	; 1
    122e:	09 f0       	breq	.+2      	; 0x1232 <Recive_Confirmation+0x13a>
    1230:	7b c0       	rjmp	.+246    	; 0x1328 <Recive_Confirmation+0x230>
	{
		LCD_clearScreen();  /* Clear the screen */
    1232:	0e 94 a9 1b 	call	0x3752	; 0x3752 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,4,"SUCCESS"); /* Display success message */
    1236:	2c eb       	ldi	r18, 0xBC	; 188
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	64 e0       	ldi	r22, 0x04	; 4
    123e:	a9 01       	movw	r20, r18
    1240:	0e 94 3f 1b 	call	0x367e	; 0x367e <LCD_displayStringRowColumn>
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	aa ef       	ldi	r26, 0xFA	; 250
    124a:	b3 e4       	ldi	r27, 0x43	; 67
    124c:	8b 87       	std	Y+11, r24	; 0x0b
    124e:	9c 87       	std	Y+12, r25	; 0x0c
    1250:	ad 87       	std	Y+13, r26	; 0x0d
    1252:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1254:	6b 85       	ldd	r22, Y+11	; 0x0b
    1256:	7c 85       	ldd	r23, Y+12	; 0x0c
    1258:	8d 85       	ldd	r24, Y+13	; 0x0d
    125a:	9e 85       	ldd	r25, Y+14	; 0x0e
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	4a ef       	ldi	r20, 0xFA	; 250
    1262:	54 e4       	ldi	r21, 0x44	; 68
    1264:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1268:	dc 01       	movw	r26, r24
    126a:	cb 01       	movw	r24, r22
    126c:	8f 83       	std	Y+7, r24	; 0x07
    126e:	98 87       	std	Y+8, r25	; 0x08
    1270:	a9 87       	std	Y+9, r26	; 0x09
    1272:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1274:	6f 81       	ldd	r22, Y+7	; 0x07
    1276:	78 85       	ldd	r23, Y+8	; 0x08
    1278:	89 85       	ldd	r24, Y+9	; 0x09
    127a:	9a 85       	ldd	r25, Y+10	; 0x0a
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	40 e8       	ldi	r20, 0x80	; 128
    1282:	5f e3       	ldi	r21, 0x3F	; 63
    1284:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1288:	88 23       	and	r24, r24
    128a:	2c f4       	brge	.+10     	; 0x1296 <Recive_Confirmation+0x19e>
		__ticks = 1;
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	9e 83       	std	Y+6, r25	; 0x06
    1292:	8d 83       	std	Y+5, r24	; 0x05
    1294:	3f c0       	rjmp	.+126    	; 0x1314 <Recive_Confirmation+0x21c>
	else if (__tmp > 65535)
    1296:	6f 81       	ldd	r22, Y+7	; 0x07
    1298:	78 85       	ldd	r23, Y+8	; 0x08
    129a:	89 85       	ldd	r24, Y+9	; 0x09
    129c:	9a 85       	ldd	r25, Y+10	; 0x0a
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	3f ef       	ldi	r19, 0xFF	; 255
    12a2:	4f e7       	ldi	r20, 0x7F	; 127
    12a4:	57 e4       	ldi	r21, 0x47	; 71
    12a6:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    12aa:	18 16       	cp	r1, r24
    12ac:	4c f5       	brge	.+82     	; 0x1300 <Recive_Confirmation+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    12b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    12b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    12b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	40 e2       	ldi	r20, 0x20	; 32
    12bc:	51 e4       	ldi	r21, 0x41	; 65
    12be:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    12c2:	dc 01       	movw	r26, r24
    12c4:	cb 01       	movw	r24, r22
    12c6:	bc 01       	movw	r22, r24
    12c8:	cd 01       	movw	r24, r26
    12ca:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    12ce:	dc 01       	movw	r26, r24
    12d0:	cb 01       	movw	r24, r22
    12d2:	9e 83       	std	Y+6, r25	; 0x06
    12d4:	8d 83       	std	Y+5, r24	; 0x05
    12d6:	0f c0       	rjmp	.+30     	; 0x12f6 <Recive_Confirmation+0x1fe>
    12d8:	88 ec       	ldi	r24, 0xC8	; 200
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	9c 83       	std	Y+4, r25	; 0x04
    12de:	8b 83       	std	Y+3, r24	; 0x03
    12e0:	8b 81       	ldd	r24, Y+3	; 0x03
    12e2:	9c 81       	ldd	r25, Y+4	; 0x04
    12e4:	01 97       	sbiw	r24, 0x01	; 1
    12e6:	f1 f7       	brne	.-4      	; 0x12e4 <Recive_Confirmation+0x1ec>
    12e8:	9c 83       	std	Y+4, r25	; 0x04
    12ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ec:	8d 81       	ldd	r24, Y+5	; 0x05
    12ee:	9e 81       	ldd	r25, Y+6	; 0x06
    12f0:	01 97       	sbiw	r24, 0x01	; 1
    12f2:	9e 83       	std	Y+6, r25	; 0x06
    12f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12f6:	8d 81       	ldd	r24, Y+5	; 0x05
    12f8:	9e 81       	ldd	r25, Y+6	; 0x06
    12fa:	00 97       	sbiw	r24, 0x00	; 0
    12fc:	69 f7       	brne	.-38     	; 0x12d8 <Recive_Confirmation+0x1e0>
    12fe:	14 c0       	rjmp	.+40     	; 0x1328 <Recive_Confirmation+0x230>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1300:	6f 81       	ldd	r22, Y+7	; 0x07
    1302:	78 85       	ldd	r23, Y+8	; 0x08
    1304:	89 85       	ldd	r24, Y+9	; 0x09
    1306:	9a 85       	ldd	r25, Y+10	; 0x0a
    1308:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    130c:	dc 01       	movw	r26, r24
    130e:	cb 01       	movw	r24, r22
    1310:	9e 83       	std	Y+6, r25	; 0x06
    1312:	8d 83       	std	Y+5, r24	; 0x05
    1314:	8d 81       	ldd	r24, Y+5	; 0x05
    1316:	9e 81       	ldd	r25, Y+6	; 0x06
    1318:	9a 83       	std	Y+2, r25	; 0x02
    131a:	89 83       	std	Y+1, r24	; 0x01
    131c:	89 81       	ldd	r24, Y+1	; 0x01
    131e:	9a 81       	ldd	r25, Y+2	; 0x02
    1320:	01 97       	sbiw	r24, 0x01	; 1
    1322:	f1 f7       	brne	.-4      	; 0x1320 <Recive_Confirmation+0x228>
    1324:	9a 83       	std	Y+2, r25	; 0x02
    1326:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500); /* Wait for a moment */
	}
}
    1328:	6d 96       	adiw	r28, 0x1d	; 29
    132a:	0f b6       	in	r0, 0x3f	; 63
    132c:	f8 94       	cli
    132e:	de bf       	out	0x3e, r29	; 62
    1330:	0f be       	out	0x3f, r0	; 63
    1332:	cd bf       	out	0x3d, r28	; 61
    1334:	cf 91       	pop	r28
    1336:	df 91       	pop	r29
    1338:	08 95       	ret

0000133a <Open_Door>:
/*
 * Handles the process of opening the door by verifying the entered password
 * and managing the unlocking and locking sequence.
 */
void Open_Door (void)
{
    133a:	df 93       	push	r29
    133c:	cf 93       	push	r28
    133e:	cd b7       	in	r28, 0x3d	; 61
    1340:	de b7       	in	r29, 0x3e	; 62
    1342:	e4 97       	sbiw	r28, 0x34	; 52
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	f8 94       	cli
    1348:	de bf       	out	0x3e, r29	; 62
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	cd bf       	out	0x3d, r28	; 61
	uint8 recive , PIR ; /* Variables to store received status and PIR state */

	/* Prompt user to enter the password */
	Enter_Pasword();
    134e:	0e 94 23 0b 	call	0x1646	; 0x1646 <Enter_Pasword>

	/* Send the entered password via UART */
	Send_Password (Pass_Entered);
    1352:	8f ea       	ldi	r24, 0xAF	; 175
    1354:	91 e0       	ldi	r25, 0x01	; 1
    1356:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Send_Password>

	/* Receive confirmation of password correctness */
	recive = UART_recieveByte();
    135a:	0e 94 4c 1c 	call	0x3898	; 0x3898 <UART_recieveByte>
    135e:	88 8b       	std	Y+16, r24	; 0x10

	if ( recive == SUCCESS )
    1360:	88 89       	ldd	r24, Y+16	; 0x10
    1362:	81 30       	cpi	r24, 0x01	; 1
    1364:	09 f0       	breq	.+2      	; 0x1368 <Open_Door+0x2e>
    1366:	93 c0       	rjmp	.+294    	; 0x148e <Open_Door+0x154>
	{
		/* If password is correct, initialize timer for unlocking sequence */
		Timer_ConfigType ptr = {0,3910,Timer_1,Prescale_1024,Compare_Mode};
    1368:	ce 01       	movw	r24, r28
    136a:	41 96       	adiw	r24, 0x11	; 17
    136c:	9f a3       	std	Y+39, r25	; 0x27
    136e:	8e a3       	std	Y+38, r24	; 0x26
    1370:	e5 e9       	ldi	r30, 0x95	; 149
    1372:	f1 e0       	ldi	r31, 0x01	; 1
    1374:	f9 a7       	std	Y+41, r31	; 0x29
    1376:	e8 a7       	std	Y+40, r30	; 0x28
    1378:	f7 e0       	ldi	r31, 0x07	; 7
    137a:	fa a7       	std	Y+42, r31	; 0x2a
    137c:	e8 a5       	ldd	r30, Y+40	; 0x28
    137e:	f9 a5       	ldd	r31, Y+41	; 0x29
    1380:	00 80       	ld	r0, Z
    1382:	88 a5       	ldd	r24, Y+40	; 0x28
    1384:	99 a5       	ldd	r25, Y+41	; 0x29
    1386:	01 96       	adiw	r24, 0x01	; 1
    1388:	99 a7       	std	Y+41, r25	; 0x29
    138a:	88 a7       	std	Y+40, r24	; 0x28
    138c:	ee a1       	ldd	r30, Y+38	; 0x26
    138e:	ff a1       	ldd	r31, Y+39	; 0x27
    1390:	00 82       	st	Z, r0
    1392:	8e a1       	ldd	r24, Y+38	; 0x26
    1394:	9f a1       	ldd	r25, Y+39	; 0x27
    1396:	01 96       	adiw	r24, 0x01	; 1
    1398:	9f a3       	std	Y+39, r25	; 0x27
    139a:	8e a3       	std	Y+38, r24	; 0x26
    139c:	9a a5       	ldd	r25, Y+42	; 0x2a
    139e:	91 50       	subi	r25, 0x01	; 1
    13a0:	9a a7       	std	Y+42, r25	; 0x2a
    13a2:	ea a5       	ldd	r30, Y+42	; 0x2a
    13a4:	ee 23       	and	r30, r30
    13a6:	51 f7       	brne	.-44     	; 0x137c <Open_Door+0x42>
		Timer_init(&ptr);
    13a8:	ce 01       	movw	r24, r28
    13aa:	41 96       	adiw	r24, 0x11	; 17
    13ac:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <Timer_init>
		Timer_setCallBack( Display_Unlocking_on_screen , Timer_1);
    13b0:	84 ee       	ldi	r24, 0xE4	; 228
    13b2:	9b e0       	ldi	r25, 0x0B	; 11
    13b4:	61 e0       	ldi	r22, 0x01	; 1
    13b6:	0e 94 62 11 	call	0x22c4	; 0x22c4 <Timer_setCallBack>

		/* Clear the LCD and display unlocking message */
		LCD_clearScreen();
    13ba:	0e 94 a9 1b 	call	0x3752	; 0x3752 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Door Unlocking");
    13be:	24 ec       	ldi	r18, 0xC4	; 196
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	60 e0       	ldi	r22, 0x00	; 0
    13c6:	a9 01       	movw	r20, r18
    13c8:	0e 94 3f 1b 	call	0x367e	; 0x367e <LCD_displayStringRowColumn>
		Attempt=0; /* Reset the attempt counter */
    13cc:	10 92 a7 01 	sts	0x01A7, r1

		/* Wait until the timer callback is executed */
		while(!Flag);
    13d0:	80 91 a8 01 	lds	r24, 0x01A8
    13d4:	88 23       	and	r24, r24
    13d6:	e1 f3       	breq	.-8      	; 0x13d0 <Open_Door+0x96>
		Flag=0; /* Reset the flag for the next use */
    13d8:	10 92 a8 01 	sts	0x01A8, r1

		/* Receive another confirmation after unlocking */
		recive = UART_recieveByte();
    13dc:	0e 94 4c 1c 	call	0x3898	; 0x3898 <UART_recieveByte>
    13e0:	88 8b       	std	Y+16, r24	; 0x10
		if(recive == SUCCESS)
    13e2:	88 89       	ldd	r24, Y+16	; 0x10
    13e4:	81 30       	cpi	r24, 0x01	; 1
    13e6:	d1 f4       	brne	.+52     	; 0x141c <Open_Door+0xe2>
		{
			/* If still successful, prompt to wait for people to enter */
			LCD_clearScreen();
    13e8:	0e 94 a9 1b 	call	0x3752	; 0x3752 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Wait for people");
    13ec:	23 ed       	ldi	r18, 0xD3	; 211
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	60 e0       	ldi	r22, 0x00	; 0
    13f4:	a9 01       	movw	r20, r18
    13f6:	0e 94 3f 1b 	call	0x367e	; 0x367e <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,3,"To Enter");
    13fa:	23 ee       	ldi	r18, 0xE3	; 227
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	63 e0       	ldi	r22, 0x03	; 3
    1402:	a9 01       	movw	r20, r18
    1404:	0e 94 3f 1b 	call	0x367e	; 0x367e <LCD_displayStringRowColumn>

			/* Wait for PIR sensor signal */
			PIR = UART_recieveByte();
    1408:	0e 94 4c 1c 	call	0x3898	; 0x3898 <UART_recieveByte>
    140c:	8f 87       	std	Y+15, r24	; 0x0f
    140e:	03 c0       	rjmp	.+6      	; 0x1416 <Open_Door+0xdc>
			while (PIR != DONE)
			{
				PIR = UART_recieveByte();  /* Keep checking for DONE status */
    1410:	0e 94 4c 1c 	call	0x3898	; 0x3898 <UART_recieveByte>
    1414:	8f 87       	std	Y+15, r24	; 0x0f
			LCD_displayStringRowColumn(0,0,"Wait for people");
			LCD_displayStringRowColumn(1,3,"To Enter");

			/* Wait for PIR sensor signal */
			PIR = UART_recieveByte();
			while (PIR != DONE)
    1416:	8f 85       	ldd	r24, Y+15	; 0x0f
    1418:	82 30       	cpi	r24, 0x02	; 2
    141a:	d1 f7       	brne	.-12     	; 0x1410 <Open_Door+0xd6>
				PIR = UART_recieveByte();  /* Keep checking for DONE status */
			}
		}

		/* Initialize timer for locking sequence */
		Timer_ConfigType ptr2 = {0,3910,Timer_1,Prescale_1024,Compare_Mode};
    141c:	ce 01       	movw	r24, r28
    141e:	48 96       	adiw	r24, 0x18	; 24
    1420:	9c a7       	std	Y+44, r25	; 0x2c
    1422:	8b a7       	std	Y+43, r24	; 0x2b
    1424:	ee e8       	ldi	r30, 0x8E	; 142
    1426:	f1 e0       	ldi	r31, 0x01	; 1
    1428:	fe a7       	std	Y+46, r31	; 0x2e
    142a:	ed a7       	std	Y+45, r30	; 0x2d
    142c:	f7 e0       	ldi	r31, 0x07	; 7
    142e:	ff a7       	std	Y+47, r31	; 0x2f
    1430:	ed a5       	ldd	r30, Y+45	; 0x2d
    1432:	fe a5       	ldd	r31, Y+46	; 0x2e
    1434:	00 80       	ld	r0, Z
    1436:	8d a5       	ldd	r24, Y+45	; 0x2d
    1438:	9e a5       	ldd	r25, Y+46	; 0x2e
    143a:	01 96       	adiw	r24, 0x01	; 1
    143c:	9e a7       	std	Y+46, r25	; 0x2e
    143e:	8d a7       	std	Y+45, r24	; 0x2d
    1440:	eb a5       	ldd	r30, Y+43	; 0x2b
    1442:	fc a5       	ldd	r31, Y+44	; 0x2c
    1444:	00 82       	st	Z, r0
    1446:	8b a5       	ldd	r24, Y+43	; 0x2b
    1448:	9c a5       	ldd	r25, Y+44	; 0x2c
    144a:	01 96       	adiw	r24, 0x01	; 1
    144c:	9c a7       	std	Y+44, r25	; 0x2c
    144e:	8b a7       	std	Y+43, r24	; 0x2b
    1450:	9f a5       	ldd	r25, Y+47	; 0x2f
    1452:	91 50       	subi	r25, 0x01	; 1
    1454:	9f a7       	std	Y+47, r25	; 0x2f
    1456:	ef a5       	ldd	r30, Y+47	; 0x2f
    1458:	ee 23       	and	r30, r30
    145a:	51 f7       	brne	.-44     	; 0x1430 <Open_Door+0xf6>
		Timer_init(&ptr2);
    145c:	ce 01       	movw	r24, r28
    145e:	48 96       	adiw	r24, 0x18	; 24
    1460:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <Timer_init>
		Timer_setCallBack( Display_locking_on_screen , Timer_1);
    1464:	82 e1       	ldi	r24, 0x12	; 18
    1466:	9c e0       	ldi	r25, 0x0C	; 12
    1468:	61 e0       	ldi	r22, 0x01	; 1
    146a:	0e 94 62 11 	call	0x22c4	; 0x22c4 <Timer_setCallBack>

		/* Clear the LCD and display locking message */
		LCD_clearScreen();
    146e:	0e 94 a9 1b 	call	0x3752	; 0x3752 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Door Locking");
    1472:	2c ee       	ldi	r18, 0xEC	; 236
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	60 e0       	ldi	r22, 0x00	; 0
    147a:	a9 01       	movw	r20, r18
    147c:	0e 94 3f 1b 	call	0x367e	; 0x367e <LCD_displayStringRowColumn>

		/* Wait until the timer callback is executed */
		while(!Flag);
    1480:	80 91 a8 01 	lds	r24, 0x01A8
    1484:	88 23       	and	r24, r24
    1486:	e1 f3       	breq	.-8      	; 0x1480 <Open_Door+0x146>
		Flag=0; /* Reset the flag for the next use */
    1488:	10 92 a8 01 	sts	0x01A8, r1
    148c:	d3 c0       	rjmp	.+422    	; 0x1634 <Open_Door+0x2fa>
	}

	else if(recive == FAIL)
    148e:	88 89       	ldd	r24, Y+16	; 0x10
    1490:	88 23       	and	r24, r24
    1492:	09 f0       	breq	.+2      	; 0x1496 <Open_Door+0x15c>
    1494:	cf c0       	rjmp	.+414    	; 0x1634 <Open_Door+0x2fa>
	{
		/* If password is incorrect, increment the attempt counter */
		Attempt++;
    1496:	80 91 a7 01 	lds	r24, 0x01A7
    149a:	8f 5f       	subi	r24, 0xFF	; 255
    149c:	80 93 a7 01 	sts	0x01A7, r24
		LCD_clearScreen();
    14a0:	0e 94 a9 1b 	call	0x3752	; 0x3752 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Wrong Pass");
    14a4:	29 ef       	ldi	r18, 0xF9	; 249
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	60 e0       	ldi	r22, 0x00	; 0
    14ac:	a9 01       	movw	r20, r18
    14ae:	0e 94 3f 1b 	call	0x367e	; 0x367e <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"Attempts Left ");
    14b2:	24 e0       	ldi	r18, 0x04	; 4
    14b4:	31 e0       	ldi	r19, 0x01	; 1
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	60 e0       	ldi	r22, 0x00	; 0
    14ba:	a9 01       	movw	r20, r18
    14bc:	0e 94 3f 1b 	call	0x367e	; 0x367e <LCD_displayStringRowColumn>
		LCD_intgerToString(3-Attempt); /* Display remaining attempts */
    14c0:	80 91 a7 01 	lds	r24, 0x01A7
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	83 e0       	ldi	r24, 0x03	; 3
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	82 1b       	sub	r24, r18
    14ce:	93 0b       	sbc	r25, r19
    14d0:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <LCD_intgerToString>
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	aa ef       	ldi	r26, 0xFA	; 250
    14da:	b3 e4       	ldi	r27, 0x43	; 67
    14dc:	8b 87       	std	Y+11, r24	; 0x0b
    14de:	9c 87       	std	Y+12, r25	; 0x0c
    14e0:	ad 87       	std	Y+13, r26	; 0x0d
    14e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    14e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    14e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	4a ef       	ldi	r20, 0xFA	; 250
    14f2:	54 e4       	ldi	r21, 0x44	; 68
    14f4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    14f8:	dc 01       	movw	r26, r24
    14fa:	cb 01       	movw	r24, r22
    14fc:	8f 83       	std	Y+7, r24	; 0x07
    14fe:	98 87       	std	Y+8, r25	; 0x08
    1500:	a9 87       	std	Y+9, r26	; 0x09
    1502:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1504:	6f 81       	ldd	r22, Y+7	; 0x07
    1506:	78 85       	ldd	r23, Y+8	; 0x08
    1508:	89 85       	ldd	r24, Y+9	; 0x09
    150a:	9a 85       	ldd	r25, Y+10	; 0x0a
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	40 e8       	ldi	r20, 0x80	; 128
    1512:	5f e3       	ldi	r21, 0x3F	; 63
    1514:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1518:	88 23       	and	r24, r24
    151a:	2c f4       	brge	.+10     	; 0x1526 <Open_Door+0x1ec>
		__ticks = 1;
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	9e 83       	std	Y+6, r25	; 0x06
    1522:	8d 83       	std	Y+5, r24	; 0x05
    1524:	3f c0       	rjmp	.+126    	; 0x15a4 <Open_Door+0x26a>
	else if (__tmp > 65535)
    1526:	6f 81       	ldd	r22, Y+7	; 0x07
    1528:	78 85       	ldd	r23, Y+8	; 0x08
    152a:	89 85       	ldd	r24, Y+9	; 0x09
    152c:	9a 85       	ldd	r25, Y+10	; 0x0a
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	3f ef       	ldi	r19, 0xFF	; 255
    1532:	4f e7       	ldi	r20, 0x7F	; 127
    1534:	57 e4       	ldi	r21, 0x47	; 71
    1536:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    153a:	18 16       	cp	r1, r24
    153c:	4c f5       	brge	.+82     	; 0x1590 <Open_Door+0x256>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    153e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1540:	7c 85       	ldd	r23, Y+12	; 0x0c
    1542:	8d 85       	ldd	r24, Y+13	; 0x0d
    1544:	9e 85       	ldd	r25, Y+14	; 0x0e
    1546:	20 e0       	ldi	r18, 0x00	; 0
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	40 e2       	ldi	r20, 0x20	; 32
    154c:	51 e4       	ldi	r21, 0x41	; 65
    154e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1552:	dc 01       	movw	r26, r24
    1554:	cb 01       	movw	r24, r22
    1556:	bc 01       	movw	r22, r24
    1558:	cd 01       	movw	r24, r26
    155a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    155e:	dc 01       	movw	r26, r24
    1560:	cb 01       	movw	r24, r22
    1562:	9e 83       	std	Y+6, r25	; 0x06
    1564:	8d 83       	std	Y+5, r24	; 0x05
    1566:	0f c0       	rjmp	.+30     	; 0x1586 <Open_Door+0x24c>
    1568:	88 ec       	ldi	r24, 0xC8	; 200
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	9c 83       	std	Y+4, r25	; 0x04
    156e:	8b 83       	std	Y+3, r24	; 0x03
    1570:	8b 81       	ldd	r24, Y+3	; 0x03
    1572:	9c 81       	ldd	r25, Y+4	; 0x04
    1574:	01 97       	sbiw	r24, 0x01	; 1
    1576:	f1 f7       	brne	.-4      	; 0x1574 <Open_Door+0x23a>
    1578:	9c 83       	std	Y+4, r25	; 0x04
    157a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    157c:	8d 81       	ldd	r24, Y+5	; 0x05
    157e:	9e 81       	ldd	r25, Y+6	; 0x06
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	9e 83       	std	Y+6, r25	; 0x06
    1584:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1586:	8d 81       	ldd	r24, Y+5	; 0x05
    1588:	9e 81       	ldd	r25, Y+6	; 0x06
    158a:	00 97       	sbiw	r24, 0x00	; 0
    158c:	69 f7       	brne	.-38     	; 0x1568 <Open_Door+0x22e>
    158e:	14 c0       	rjmp	.+40     	; 0x15b8 <Open_Door+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1590:	6f 81       	ldd	r22, Y+7	; 0x07
    1592:	78 85       	ldd	r23, Y+8	; 0x08
    1594:	89 85       	ldd	r24, Y+9	; 0x09
    1596:	9a 85       	ldd	r25, Y+10	; 0x0a
    1598:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    159c:	dc 01       	movw	r26, r24
    159e:	cb 01       	movw	r24, r22
    15a0:	9e 83       	std	Y+6, r25	; 0x06
    15a2:	8d 83       	std	Y+5, r24	; 0x05
    15a4:	8d 81       	ldd	r24, Y+5	; 0x05
    15a6:	9e 81       	ldd	r25, Y+6	; 0x06
    15a8:	9a 83       	std	Y+2, r25	; 0x02
    15aa:	89 83       	std	Y+1, r24	; 0x01
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	9a 81       	ldd	r25, Y+2	; 0x02
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	f1 f7       	brne	.-4      	; 0x15b0 <Open_Door+0x276>
    15b4:	9a 83       	std	Y+2, r25	; 0x02
    15b6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500); /* Short delay for user visibility */

		if (Attempt == 3)
    15b8:	80 91 a7 01 	lds	r24, 0x01A7
    15bc:	83 30       	cpi	r24, 0x03	; 3
    15be:	d1 f5       	brne	.+116    	; 0x1634 <Open_Door+0x2fa>
		{
			/* If three incorrect succisive attempts, lock the system */
			Timer_ConfigType ptr = {0,3910,Timer_1,Prescale_1024,Compare_Mode};
    15c0:	ce 01       	movw	r24, r28
    15c2:	4f 96       	adiw	r24, 0x1f	; 31
    15c4:	99 ab       	std	Y+49, r25	; 0x31
    15c6:	88 ab       	std	Y+48, r24	; 0x30
    15c8:	e7 e8       	ldi	r30, 0x87	; 135
    15ca:	f1 e0       	ldi	r31, 0x01	; 1
    15cc:	fb ab       	std	Y+51, r31	; 0x33
    15ce:	ea ab       	std	Y+50, r30	; 0x32
    15d0:	f7 e0       	ldi	r31, 0x07	; 7
    15d2:	fc ab       	std	Y+52, r31	; 0x34
    15d4:	ea a9       	ldd	r30, Y+50	; 0x32
    15d6:	fb a9       	ldd	r31, Y+51	; 0x33
    15d8:	00 80       	ld	r0, Z
    15da:	8a a9       	ldd	r24, Y+50	; 0x32
    15dc:	9b a9       	ldd	r25, Y+51	; 0x33
    15de:	01 96       	adiw	r24, 0x01	; 1
    15e0:	9b ab       	std	Y+51, r25	; 0x33
    15e2:	8a ab       	std	Y+50, r24	; 0x32
    15e4:	e8 a9       	ldd	r30, Y+48	; 0x30
    15e6:	f9 a9       	ldd	r31, Y+49	; 0x31
    15e8:	00 82       	st	Z, r0
    15ea:	88 a9       	ldd	r24, Y+48	; 0x30
    15ec:	99 a9       	ldd	r25, Y+49	; 0x31
    15ee:	01 96       	adiw	r24, 0x01	; 1
    15f0:	99 ab       	std	Y+49, r25	; 0x31
    15f2:	88 ab       	std	Y+48, r24	; 0x30
    15f4:	9c a9       	ldd	r25, Y+52	; 0x34
    15f6:	91 50       	subi	r25, 0x01	; 1
    15f8:	9c ab       	std	Y+52, r25	; 0x34
    15fa:	ec a9       	ldd	r30, Y+52	; 0x34
    15fc:	ee 23       	and	r30, r30
    15fe:	51 f7       	brne	.-44     	; 0x15d4 <Open_Door+0x29a>
			Timer_init(&ptr);
    1600:	ce 01       	movw	r24, r28
    1602:	4f 96       	adiw	r24, 0x1f	; 31
    1604:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <Timer_init>
			Timer_setCallBack( Lock_Screen , Timer_1);
    1608:	80 e4       	ldi	r24, 0x40	; 64
    160a:	9c e0       	ldi	r25, 0x0C	; 12
    160c:	61 e0       	ldi	r22, 0x01	; 1
    160e:	0e 94 62 11 	call	0x22c4	; 0x22c4 <Timer_setCallBack>

			/* Clear the LCD and display locked message */
			LCD_clearScreen();
    1612:	0e 94 a9 1b 	call	0x3752	; 0x3752 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Locked....");
    1616:	23 e1       	ldi	r18, 0x13	; 19
    1618:	31 e0       	ldi	r19, 0x01	; 1
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	60 e0       	ldi	r22, 0x00	; 0
    161e:	a9 01       	movw	r20, r18
    1620:	0e 94 3f 1b 	call	0x367e	; 0x367e <LCD_displayStringRowColumn>

			/* Wait until the timer callback is executed */
			while(!Flag);
    1624:	80 91 a8 01 	lds	r24, 0x01A8
    1628:	88 23       	and	r24, r24
    162a:	e1 f3       	breq	.-8      	; 0x1624 <Open_Door+0x2ea>
			Flag=0;    /* Reset the flag for the next use */
    162c:	10 92 a8 01 	sts	0x01A8, r1
			Attempt=0; /* Reset the attempt counter */
    1630:	10 92 a7 01 	sts	0x01A7, r1
		}
	}
}
    1634:	e4 96       	adiw	r28, 0x34	; 52
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	f8 94       	cli
    163a:	de bf       	out	0x3e, r29	; 62
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	cd bf       	out	0x3d, r28	; 61
    1640:	cf 91       	pop	r28
    1642:	df 91       	pop	r29
    1644:	08 95       	ret

00001646 <Enter_Pasword>:
/*
 * Prompts the user to enter a password using a keypad.
 * The entered password is masked on the display.
 */
void Enter_Pasword(void)
{
    1646:	df 93       	push	r29
    1648:	cf 93       	push	r28
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
    164e:	2e 97       	sbiw	r28, 0x0e	; 14
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	f8 94       	cli
    1654:	de bf       	out	0x3e, r29	; 62
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();  /* Clear the LCD screen */
    165a:	0e 94 a9 1b 	call	0x3752	; 0x3752 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Enter your pass: "); /* Display prompt for password entry */
    165e:	2e e1       	ldi	r18, 0x1E	; 30
    1660:	31 e0       	ldi	r19, 0x01	; 1
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	60 e0       	ldi	r22, 0x00	; 0
    1666:	a9 01       	movw	r20, r18
    1668:	0e 94 3f 1b 	call	0x367e	; 0x367e <LCD_displayStringRowColumn>

	i=0; /* Reset counter for password length */
    166c:	10 92 a5 01 	sts	0x01A5, r1

	while (1)
	{
		key = KEYPAD_getPressedKey(); /* Get the key pressed on the keypad */
    1670:	0e 94 cf 14 	call	0x299e	; 0x299e <KEYPAD_getPressedKey>
    1674:	80 93 a4 01 	sts	0x01A4, r24

		/* Check if key is a number (0-9) */
		if (key >= 0 && key <= 9 && i < size)
    1678:	80 91 a4 01 	lds	r24, 0x01A4
    167c:	8a 30       	cpi	r24, 0x0A	; 10
    167e:	08 f0       	brcs	.+2      	; 0x1682 <Enter_Pasword+0x3c>
    1680:	90 c0       	rjmp	.+288    	; 0x17a2 <Enter_Pasword+0x15c>
    1682:	80 91 a5 01 	lds	r24, 0x01A5
    1686:	85 30       	cpi	r24, 0x05	; 5
    1688:	08 f0       	brcs	.+2      	; 0x168c <Enter_Pasword+0x46>
    168a:	8b c0       	rjmp	.+278    	; 0x17a2 <Enter_Pasword+0x15c>
		{
			Pass_Entered[i] = key; 		/* Store the number of key in pass_entered array */
    168c:	80 91 a5 01 	lds	r24, 0x01A5
    1690:	88 2f       	mov	r24, r24
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	20 91 a4 01 	lds	r18, 0x01A4
    1698:	fc 01       	movw	r30, r24
    169a:	e1 55       	subi	r30, 0x51	; 81
    169c:	fe 4f       	sbci	r31, 0xFE	; 254
    169e:	20 83       	st	Z, r18
			LCD_displayStringRowColumn(1, i, "*"); /* Display '*' for privacy */
    16a0:	90 91 a5 01 	lds	r25, 0x01A5
    16a4:	2d e8       	ldi	r18, 0x8D	; 141
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	69 2f       	mov	r22, r25
    16ac:	a9 01       	movw	r20, r18
    16ae:	0e 94 3f 1b 	call	0x367e	; 0x367e <LCD_displayStringRowColumn>
			i++;  /* Increment the counter */
    16b2:	80 91 a5 01 	lds	r24, 0x01A5
    16b6:	8f 5f       	subi	r24, 0xFF	; 255
    16b8:	80 93 a5 01 	sts	0x01A5, r24
    16bc:	80 e0       	ldi	r24, 0x00	; 0
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	a8 e4       	ldi	r26, 0x48	; 72
    16c2:	b3 e4       	ldi	r27, 0x43	; 67
    16c4:	8b 87       	std	Y+11, r24	; 0x0b
    16c6:	9c 87       	std	Y+12, r25	; 0x0c
    16c8:	ad 87       	std	Y+13, r26	; 0x0d
    16ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    16d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	4a ef       	ldi	r20, 0xFA	; 250
    16da:	54 e4       	ldi	r21, 0x44	; 68
    16dc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    16e0:	dc 01       	movw	r26, r24
    16e2:	cb 01       	movw	r24, r22
    16e4:	8f 83       	std	Y+7, r24	; 0x07
    16e6:	98 87       	std	Y+8, r25	; 0x08
    16e8:	a9 87       	std	Y+9, r26	; 0x09
    16ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16ec:	6f 81       	ldd	r22, Y+7	; 0x07
    16ee:	78 85       	ldd	r23, Y+8	; 0x08
    16f0:	89 85       	ldd	r24, Y+9	; 0x09
    16f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	40 e8       	ldi	r20, 0x80	; 128
    16fa:	5f e3       	ldi	r21, 0x3F	; 63
    16fc:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1700:	88 23       	and	r24, r24
    1702:	2c f4       	brge	.+10     	; 0x170e <Enter_Pasword+0xc8>
		__ticks = 1;
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	9e 83       	std	Y+6, r25	; 0x06
    170a:	8d 83       	std	Y+5, r24	; 0x05
    170c:	3f c0       	rjmp	.+126    	; 0x178c <Enter_Pasword+0x146>
	else if (__tmp > 65535)
    170e:	6f 81       	ldd	r22, Y+7	; 0x07
    1710:	78 85       	ldd	r23, Y+8	; 0x08
    1712:	89 85       	ldd	r24, Y+9	; 0x09
    1714:	9a 85       	ldd	r25, Y+10	; 0x0a
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	3f ef       	ldi	r19, 0xFF	; 255
    171a:	4f e7       	ldi	r20, 0x7F	; 127
    171c:	57 e4       	ldi	r21, 0x47	; 71
    171e:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1722:	18 16       	cp	r1, r24
    1724:	4c f5       	brge	.+82     	; 0x1778 <Enter_Pasword+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1726:	6b 85       	ldd	r22, Y+11	; 0x0b
    1728:	7c 85       	ldd	r23, Y+12	; 0x0c
    172a:	8d 85       	ldd	r24, Y+13	; 0x0d
    172c:	9e 85       	ldd	r25, Y+14	; 0x0e
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	40 e2       	ldi	r20, 0x20	; 32
    1734:	51 e4       	ldi	r21, 0x41	; 65
    1736:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    173a:	dc 01       	movw	r26, r24
    173c:	cb 01       	movw	r24, r22
    173e:	bc 01       	movw	r22, r24
    1740:	cd 01       	movw	r24, r26
    1742:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1746:	dc 01       	movw	r26, r24
    1748:	cb 01       	movw	r24, r22
    174a:	9e 83       	std	Y+6, r25	; 0x06
    174c:	8d 83       	std	Y+5, r24	; 0x05
    174e:	0f c0       	rjmp	.+30     	; 0x176e <Enter_Pasword+0x128>
    1750:	88 ec       	ldi	r24, 0xC8	; 200
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	9c 83       	std	Y+4, r25	; 0x04
    1756:	8b 83       	std	Y+3, r24	; 0x03
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	9c 81       	ldd	r25, Y+4	; 0x04
    175c:	01 97       	sbiw	r24, 0x01	; 1
    175e:	f1 f7       	brne	.-4      	; 0x175c <Enter_Pasword+0x116>
    1760:	9c 83       	std	Y+4, r25	; 0x04
    1762:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1764:	8d 81       	ldd	r24, Y+5	; 0x05
    1766:	9e 81       	ldd	r25, Y+6	; 0x06
    1768:	01 97       	sbiw	r24, 0x01	; 1
    176a:	9e 83       	std	Y+6, r25	; 0x06
    176c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    176e:	8d 81       	ldd	r24, Y+5	; 0x05
    1770:	9e 81       	ldd	r25, Y+6	; 0x06
    1772:	00 97       	sbiw	r24, 0x00	; 0
    1774:	69 f7       	brne	.-38     	; 0x1750 <Enter_Pasword+0x10a>
    1776:	7c cf       	rjmp	.-264    	; 0x1670 <Enter_Pasword+0x2a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1778:	6f 81       	ldd	r22, Y+7	; 0x07
    177a:	78 85       	ldd	r23, Y+8	; 0x08
    177c:	89 85       	ldd	r24, Y+9	; 0x09
    177e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1780:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	9e 83       	std	Y+6, r25	; 0x06
    178a:	8d 83       	std	Y+5, r24	; 0x05
    178c:	8d 81       	ldd	r24, Y+5	; 0x05
    178e:	9e 81       	ldd	r25, Y+6	; 0x06
    1790:	9a 83       	std	Y+2, r25	; 0x02
    1792:	89 83       	std	Y+1, r24	; 0x01
    1794:	89 81       	ldd	r24, Y+1	; 0x01
    1796:	9a 81       	ldd	r25, Y+2	; 0x02
    1798:	01 97       	sbiw	r24, 0x01	; 1
    179a:	f1 f7       	brne	.-4      	; 0x1798 <Enter_Pasword+0x152>
    179c:	9a 83       	std	Y+2, r25	; 0x02
    179e:	89 83       	std	Y+1, r24	; 0x01
    17a0:	67 cf       	rjmp	.-306    	; 0x1670 <Enter_Pasword+0x2a>
			_delay_ms(200);	/* Handl pressig on keypad */
		}
		/* Check if the 'Enter' key ('=') is pressed and the password is fully entered */
		else if (key == '=' && i == size)
    17a2:	80 91 a4 01 	lds	r24, 0x01A4
    17a6:	8d 33       	cpi	r24, 0x3D	; 61
    17a8:	09 f0       	breq	.+2      	; 0x17ac <Enter_Pasword+0x166>
    17aa:	62 cf       	rjmp	.-316    	; 0x1670 <Enter_Pasword+0x2a>
    17ac:	80 91 a5 01 	lds	r24, 0x01A5
    17b0:	85 30       	cpi	r24, 0x05	; 5
    17b2:	09 f0       	breq	.+2      	; 0x17b6 <Enter_Pasword+0x170>
    17b4:	5d cf       	rjmp	.-326    	; 0x1670 <Enter_Pasword+0x2a>
		{
			/* Exit the loop when the correct condition is met */
			break;
		}
	}
}
    17b6:	2e 96       	adiw	r28, 0x0e	; 14
    17b8:	0f b6       	in	r0, 0x3f	; 63
    17ba:	f8 94       	cli
    17bc:	de bf       	out	0x3e, r29	; 62
    17be:	0f be       	out	0x3f, r0	; 63
    17c0:	cd bf       	out	0x3d, r28	; 61
    17c2:	cf 91       	pop	r28
    17c4:	df 91       	pop	r29
    17c6:	08 95       	ret

000017c8 <Display_Unlocking_on_screen>:
/*
 * Displays the unlocking status on the LCD and counts the duration.
 * It`s Call Back function for timer 1
 */
void Display_Unlocking_on_screen (void)
{
    17c8:	df 93       	push	r29
    17ca:	cf 93       	push	r28
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
	count++; /* Increment the count for each timer tick */
    17d0:	80 91 a6 01 	lds	r24, 0x01A6
    17d4:	8f 5f       	subi	r24, 0xFF	; 255
    17d6:	80 93 a6 01 	sts	0x01A6, r24
	Flag=0;  /* Reset the flag for this callback */
    17da:	10 92 a8 01 	sts	0x01A8, r1

	/* Display unlocking messages on the LCD */
	LCD_displayStringRowColumn(0,0,"Door Unlocking");
    17de:	24 ec       	ldi	r18, 0xC4	; 196
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	60 e0       	ldi	r22, 0x00	; 0
    17e6:	a9 01       	movw	r20, r18
    17e8:	0e 94 3f 1b 	call	0x367e	; 0x367e <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"Counting ");
    17ec:	20 e3       	ldi	r18, 0x30	; 48
    17ee:	31 e0       	ldi	r19, 0x01	; 1
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	60 e0       	ldi	r22, 0x00	; 0
    17f4:	a9 01       	movw	r20, r18
    17f6:	0e 94 3f 1b 	call	0x367e	; 0x367e <LCD_displayStringRowColumn>
	LCD_intgerToString(count);  /* Display the current count on the screen */
    17fa:	80 91 a6 01 	lds	r24, 0x01A6
    17fe:	88 2f       	mov	r24, r24
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <LCD_intgerToString>

	/* Check if the count has reached the threshold */
	if (count >= 15)
    1806:	80 91 a6 01 	lds	r24, 0x01A6
    180a:	8f 30       	cpi	r24, 0x0F	; 15
    180c:	40 f0       	brcs	.+16     	; 0x181e <Display_Unlocking_on_screen+0x56>
	{
		Timer_deInit(Timer_1); /* Stop the timer */
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	0e 94 00 11 	call	0x2200	; 0x2200 <Timer_deInit>
		count = 0; /* Reset count */
    1814:	10 92 a6 01 	sts	0x01A6, r1
		Flag = 1;  /* Set the flag to indicate the completion of the unlocking process */
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	80 93 a8 01 	sts	0x01A8, r24
	}
}
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	08 95       	ret

00001824 <Display_locking_on_screen>:
/*
 * Displays the locking status on the LCD and counts the duration.
 * It`s Call Back function for timer 1
 */
void Display_locking_on_screen (void)
{
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
	count++; /* Increment the count for each timer tick */
    182c:	80 91 a6 01 	lds	r24, 0x01A6
    1830:	8f 5f       	subi	r24, 0xFF	; 255
    1832:	80 93 a6 01 	sts	0x01A6, r24
	Flag=0;  /* Reset the flag for this callback */
    1836:	10 92 a8 01 	sts	0x01A8, r1

	/* Display locking messages on the LCD */
	LCD_displayStringRowColumn(0,0,"Door Locking");
    183a:	2c ee       	ldi	r18, 0xEC	; 236
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	80 e0       	ldi	r24, 0x00	; 0
    1840:	60 e0       	ldi	r22, 0x00	; 0
    1842:	a9 01       	movw	r20, r18
    1844:	0e 94 3f 1b 	call	0x367e	; 0x367e <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"Counting ");
    1848:	20 e3       	ldi	r18, 0x30	; 48
    184a:	31 e0       	ldi	r19, 0x01	; 1
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	60 e0       	ldi	r22, 0x00	; 0
    1850:	a9 01       	movw	r20, r18
    1852:	0e 94 3f 1b 	call	0x367e	; 0x367e <LCD_displayStringRowColumn>
	LCD_intgerToString(count); /* Display the current count on the screen */
    1856:	80 91 a6 01 	lds	r24, 0x01A6
    185a:	88 2f       	mov	r24, r24
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <LCD_intgerToString>

	/* Check if the count has reached the threshold */
	if (count >= 15)
    1862:	80 91 a6 01 	lds	r24, 0x01A6
    1866:	8f 30       	cpi	r24, 0x0F	; 15
    1868:	40 f0       	brcs	.+16     	; 0x187a <Display_locking_on_screen+0x56>
	{
		Timer_deInit(Timer_1); /* Stop the timer */
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	0e 94 00 11 	call	0x2200	; 0x2200 <Timer_deInit>
		count = 0; /* Reset count */
    1870:	10 92 a6 01 	sts	0x01A6, r1
		Flag = 1;  /* Set the flag to indicate the completion of the locking process */
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	80 93 a8 01 	sts	0x01A8, r24
	}
}
    187a:	cf 91       	pop	r28
    187c:	df 91       	pop	r29
    187e:	08 95       	ret

00001880 <Lock_Screen>:
/*
 * Handles the locking mechanism by counting down time and displaying status on the LCD.
 * It`s Call Back function for timer 1
 */
void Lock_Screen (void)
{
    1880:	df 93       	push	r29
    1882:	cf 93       	push	r28
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
    1888:	2e 97       	sbiw	r28, 0x0e	; 14
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	f8 94       	cli
    188e:	de bf       	out	0x3e, r29	; 62
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	cd bf       	out	0x3d, r28	; 61
	count++;  /* Increment the count for each timer tick */
    1894:	80 91 a6 01 	lds	r24, 0x01A6
    1898:	8f 5f       	subi	r24, 0xFF	; 255
    189a:	80 93 a6 01 	sts	0x01A6, r24
	Minute--;  /* Decrement the minute counter */
    189e:	80 91 81 01 	lds	r24, 0x0181
    18a2:	81 50       	subi	r24, 0x01	; 1
    18a4:	80 93 81 01 	sts	0x0181, r24
	Flag = 0;  /* Reset the flag for this callback */
    18a8:	10 92 a8 01 	sts	0x01A8, r1

	/* Display the locked status and countdown on the LCD */
	LCD_displayStringRowColumn(0,0,"Locked....");
    18ac:	23 e1       	ldi	r18, 0x13	; 19
    18ae:	31 e0       	ldi	r19, 0x01	; 1
    18b0:	80 e0       	ldi	r24, 0x00	; 0
    18b2:	60 e0       	ldi	r22, 0x00	; 0
    18b4:	a9 01       	movw	r20, r18
    18b6:	0e 94 3f 1b 	call	0x367e	; 0x367e <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"Counting ");
    18ba:	20 e3       	ldi	r18, 0x30	; 48
    18bc:	31 e0       	ldi	r19, 0x01	; 1
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	60 e0       	ldi	r22, 0x00	; 0
    18c2:	a9 01       	movw	r20, r18
    18c4:	0e 94 3f 1b 	call	0x367e	; 0x367e <LCD_displayStringRowColumn>

	/* Display the remaining time */
	if(Minute >= 100)
    18c8:	80 91 81 01 	lds	r24, 0x0181
    18cc:	84 36       	cpi	r24, 0x64	; 100
    18ce:	38 f0       	brcs	.+14     	; 0x18de <Lock_Screen+0x5e>
	{
		LCD_intgerToString(Minute);
    18d0:	80 91 81 01 	lds	r24, 0x0181
    18d4:	88 2f       	mov	r24, r24
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <LCD_intgerToString>
    18dc:	09 c0       	rjmp	.+18     	; 0x18f0 <Lock_Screen+0x70>
	}
	else
	{
		LCD_intgerToString(Minute);
    18de:	80 91 81 01 	lds	r24, 0x0181
    18e2:	88 2f       	mov	r24, r24
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <LCD_intgerToString>
		/* In case the digital value is two or one digits print space in the next digit place */
		LCD_displayCharacter(' ');
    18ea:	80 e2       	ldi	r24, 0x20	; 32
    18ec:	0e 94 e5 18 	call	0x31ca	; 0x31ca <LCD_displayCharacter>
	}

	/* Check if the count has reached the locking threshold (60 seconds) */
	if (count == 60)
    18f0:	80 91 a6 01 	lds	r24, 0x01A6
    18f4:	8c 33       	cpi	r24, 0x3C	; 60
    18f6:	09 f0       	breq	.+2      	; 0x18fa <Lock_Screen+0x7a>
    18f8:	86 c0       	rjmp	.+268    	; 0x1a06 <Lock_Screen+0x186>
	{
		Timer_deInit(Timer_1); /* Stop the timer */
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	0e 94 00 11 	call	0x2200	; 0x2200 <Timer_deInit>
		count = 0; /* Reset count */
    1900:	10 92 a6 01 	sts	0x01A6, r1
		Minute = 60; /* Reset minutes for the next lock period */
    1904:	8c e3       	ldi	r24, 0x3C	; 60
    1906:	80 93 81 01 	sts	0x0181, r24
		Flag = 1;  /* Set the flag to indicate that the locking period is complete */
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	80 93 a8 01 	sts	0x01A8, r24


		LCD_clearScreen(); /* Clear the screen for the next message */
    1910:	0e 94 a9 1b 	call	0x3752	; 0x3752 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "Trying again Now"); /* Notify user to try again */
    1914:	2a e3       	ldi	r18, 0x3A	; 58
    1916:	31 e0       	ldi	r19, 0x01	; 1
    1918:	80 e0       	ldi	r24, 0x00	; 0
    191a:	60 e0       	ldi	r22, 0x00	; 0
    191c:	a9 01       	movw	r20, r18
    191e:	0e 94 3f 1b 	call	0x367e	; 0x367e <LCD_displayStringRowColumn>
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	aa ef       	ldi	r26, 0xFA	; 250
    1928:	b3 e4       	ldi	r27, 0x43	; 67
    192a:	8b 87       	std	Y+11, r24	; 0x0b
    192c:	9c 87       	std	Y+12, r25	; 0x0c
    192e:	ad 87       	std	Y+13, r26	; 0x0d
    1930:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1932:	6b 85       	ldd	r22, Y+11	; 0x0b
    1934:	7c 85       	ldd	r23, Y+12	; 0x0c
    1936:	8d 85       	ldd	r24, Y+13	; 0x0d
    1938:	9e 85       	ldd	r25, Y+14	; 0x0e
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	4a ef       	ldi	r20, 0xFA	; 250
    1940:	54 e4       	ldi	r21, 0x44	; 68
    1942:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1946:	dc 01       	movw	r26, r24
    1948:	cb 01       	movw	r24, r22
    194a:	8f 83       	std	Y+7, r24	; 0x07
    194c:	98 87       	std	Y+8, r25	; 0x08
    194e:	a9 87       	std	Y+9, r26	; 0x09
    1950:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1952:	6f 81       	ldd	r22, Y+7	; 0x07
    1954:	78 85       	ldd	r23, Y+8	; 0x08
    1956:	89 85       	ldd	r24, Y+9	; 0x09
    1958:	9a 85       	ldd	r25, Y+10	; 0x0a
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	40 e8       	ldi	r20, 0x80	; 128
    1960:	5f e3       	ldi	r21, 0x3F	; 63
    1962:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1966:	88 23       	and	r24, r24
    1968:	2c f4       	brge	.+10     	; 0x1974 <Lock_Screen+0xf4>
		__ticks = 1;
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	9e 83       	std	Y+6, r25	; 0x06
    1970:	8d 83       	std	Y+5, r24	; 0x05
    1972:	3f c0       	rjmp	.+126    	; 0x19f2 <Lock_Screen+0x172>
	else if (__tmp > 65535)
    1974:	6f 81       	ldd	r22, Y+7	; 0x07
    1976:	78 85       	ldd	r23, Y+8	; 0x08
    1978:	89 85       	ldd	r24, Y+9	; 0x09
    197a:	9a 85       	ldd	r25, Y+10	; 0x0a
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	3f ef       	ldi	r19, 0xFF	; 255
    1980:	4f e7       	ldi	r20, 0x7F	; 127
    1982:	57 e4       	ldi	r21, 0x47	; 71
    1984:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1988:	18 16       	cp	r1, r24
    198a:	4c f5       	brge	.+82     	; 0x19de <Lock_Screen+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    198c:	6b 85       	ldd	r22, Y+11	; 0x0b
    198e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1990:	8d 85       	ldd	r24, Y+13	; 0x0d
    1992:	9e 85       	ldd	r25, Y+14	; 0x0e
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	40 e2       	ldi	r20, 0x20	; 32
    199a:	51 e4       	ldi	r21, 0x41	; 65
    199c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	bc 01       	movw	r22, r24
    19a6:	cd 01       	movw	r24, r26
    19a8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	9e 83       	std	Y+6, r25	; 0x06
    19b2:	8d 83       	std	Y+5, r24	; 0x05
    19b4:	0f c0       	rjmp	.+30     	; 0x19d4 <Lock_Screen+0x154>
    19b6:	88 ec       	ldi	r24, 0xC8	; 200
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	9c 83       	std	Y+4, r25	; 0x04
    19bc:	8b 83       	std	Y+3, r24	; 0x03
    19be:	8b 81       	ldd	r24, Y+3	; 0x03
    19c0:	9c 81       	ldd	r25, Y+4	; 0x04
    19c2:	01 97       	sbiw	r24, 0x01	; 1
    19c4:	f1 f7       	brne	.-4      	; 0x19c2 <Lock_Screen+0x142>
    19c6:	9c 83       	std	Y+4, r25	; 0x04
    19c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ca:	8d 81       	ldd	r24, Y+5	; 0x05
    19cc:	9e 81       	ldd	r25, Y+6	; 0x06
    19ce:	01 97       	sbiw	r24, 0x01	; 1
    19d0:	9e 83       	std	Y+6, r25	; 0x06
    19d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d4:	8d 81       	ldd	r24, Y+5	; 0x05
    19d6:	9e 81       	ldd	r25, Y+6	; 0x06
    19d8:	00 97       	sbiw	r24, 0x00	; 0
    19da:	69 f7       	brne	.-38     	; 0x19b6 <Lock_Screen+0x136>
    19dc:	14 c0       	rjmp	.+40     	; 0x1a06 <Lock_Screen+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19de:	6f 81       	ldd	r22, Y+7	; 0x07
    19e0:	78 85       	ldd	r23, Y+8	; 0x08
    19e2:	89 85       	ldd	r24, Y+9	; 0x09
    19e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19e6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    19ea:	dc 01       	movw	r26, r24
    19ec:	cb 01       	movw	r24, r22
    19ee:	9e 83       	std	Y+6, r25	; 0x06
    19f0:	8d 83       	std	Y+5, r24	; 0x05
    19f2:	8d 81       	ldd	r24, Y+5	; 0x05
    19f4:	9e 81       	ldd	r25, Y+6	; 0x06
    19f6:	9a 83       	std	Y+2, r25	; 0x02
    19f8:	89 83       	std	Y+1, r24	; 0x01
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
    19fc:	9a 81       	ldd	r25, Y+2	; 0x02
    19fe:	01 97       	sbiw	r24, 0x01	; 1
    1a00:	f1 f7       	brne	.-4      	; 0x19fe <Lock_Screen+0x17e>
    1a02:	9a 83       	std	Y+2, r25	; 0x02
    1a04:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500); /* Wait for half a second before returning */
	}
}
    1a06:	2e 96       	adiw	r28, 0x0e	; 14
    1a08:	0f b6       	in	r0, 0x3f	; 63
    1a0a:	f8 94       	cli
    1a0c:	de bf       	out	0x3e, r29	; 62
    1a0e:	0f be       	out	0x3f, r0	; 63
    1a10:	cd bf       	out	0x3d, r28	; 61
    1a12:	cf 91       	pop	r28
    1a14:	df 91       	pop	r29
    1a16:	08 95       	ret

00001a18 <Change_Password>:

/*
 * Handles the process of changing the user's password.
 */
void Change_Password (void)
{
    1a18:	df 93       	push	r29
    1a1a:	cf 93       	push	r28
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
    1a20:	a9 97       	sbiw	r28, 0x29	; 41
    1a22:	0f b6       	in	r0, 0x3f	; 63
    1a24:	f8 94       	cli
    1a26:	de bf       	out	0x3e, r29	; 62
    1a28:	0f be       	out	0x3f, r0	; 63
    1a2a:	cd bf       	out	0x3d, r28	; 61
	uint8 recive; 	 /* Variable to store the response from UART */

	/* Prompt user to enter their current password */
	Enter_Pasword();
    1a2c:	0e 94 23 0b 	call	0x1646	; 0x1646 <Enter_Pasword>
	Send_Password (Pass_Entered); /* Send the entered password to the system */
    1a30:	8f ea       	ldi	r24, 0xAF	; 175
    1a32:	91 e0       	ldi	r25, 0x01	; 1
    1a34:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Send_Password>

	recive = UART_recieveByte();  /* Receive confirmation of the password */
    1a38:	0e 94 4c 1c 	call	0x3898	; 0x3898 <UART_recieveByte>
    1a3c:	8d 8f       	std	Y+29, r24	; 0x1d

	if ( recive == SUCCESS )
    1a3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a40:	81 30       	cpi	r24, 0x01	; 1
    1a42:	09 f0       	breq	.+2      	; 0x1a46 <Change_Password+0x2e>
    1a44:	8c c0       	rjmp	.+280    	; 0x1b5e <Change_Password+0x146>
	{
		/* If password is correct, proceed with changing the password */
		LCD_clearScreen(); /* Clear the LCD screen */
    1a46:	0e 94 a9 1b 	call	0x3752	; 0x3752 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "Changing Pass"); /* Display status message */
    1a4a:	2b e4       	ldi	r18, 0x4B	; 75
    1a4c:	31 e0       	ldi	r19, 0x01	; 1
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	60 e0       	ldi	r22, 0x00	; 0
    1a52:	a9 01       	movw	r20, r18
    1a54:	0e 94 3f 1b 	call	0x367e	; 0x367e <LCD_displayStringRowColumn>
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	aa ef       	ldi	r26, 0xFA	; 250
    1a5e:	b3 e4       	ldi	r27, 0x43	; 67
    1a60:	89 8f       	std	Y+25, r24	; 0x19
    1a62:	9a 8f       	std	Y+26, r25	; 0x1a
    1a64:	ab 8f       	std	Y+27, r26	; 0x1b
    1a66:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a68:	69 8d       	ldd	r22, Y+25	; 0x19
    1a6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	4a ef       	ldi	r20, 0xFA	; 250
    1a76:	54 e4       	ldi	r21, 0x44	; 68
    1a78:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	8d 8b       	std	Y+21, r24	; 0x15
    1a82:	9e 8b       	std	Y+22, r25	; 0x16
    1a84:	af 8b       	std	Y+23, r26	; 0x17
    1a86:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a88:	6d 89       	ldd	r22, Y+21	; 0x15
    1a8a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a8c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a8e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	40 e8       	ldi	r20, 0x80	; 128
    1a96:	5f e3       	ldi	r21, 0x3F	; 63
    1a98:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1a9c:	88 23       	and	r24, r24
    1a9e:	2c f4       	brge	.+10     	; 0x1aaa <Change_Password+0x92>
		__ticks = 1;
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	9c 8b       	std	Y+20, r25	; 0x14
    1aa6:	8b 8b       	std	Y+19, r24	; 0x13
    1aa8:	3f c0       	rjmp	.+126    	; 0x1b28 <Change_Password+0x110>
	else if (__tmp > 65535)
    1aaa:	6d 89       	ldd	r22, Y+21	; 0x15
    1aac:	7e 89       	ldd	r23, Y+22	; 0x16
    1aae:	8f 89       	ldd	r24, Y+23	; 0x17
    1ab0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	3f ef       	ldi	r19, 0xFF	; 255
    1ab6:	4f e7       	ldi	r20, 0x7F	; 127
    1ab8:	57 e4       	ldi	r21, 0x47	; 71
    1aba:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1abe:	18 16       	cp	r1, r24
    1ac0:	4c f5       	brge	.+82     	; 0x1b14 <Change_Password+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac2:	69 8d       	ldd	r22, Y+25	; 0x19
    1ac4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ac6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ac8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	40 e2       	ldi	r20, 0x20	; 32
    1ad0:	51 e4       	ldi	r21, 0x41	; 65
    1ad2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	bc 01       	movw	r22, r24
    1adc:	cd 01       	movw	r24, r26
    1ade:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	9c 8b       	std	Y+20, r25	; 0x14
    1ae8:	8b 8b       	std	Y+19, r24	; 0x13
    1aea:	0f c0       	rjmp	.+30     	; 0x1b0a <Change_Password+0xf2>
    1aec:	88 ec       	ldi	r24, 0xC8	; 200
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	9a 8b       	std	Y+18, r25	; 0x12
    1af2:	89 8b       	std	Y+17, r24	; 0x11
    1af4:	89 89       	ldd	r24, Y+17	; 0x11
    1af6:	9a 89       	ldd	r25, Y+18	; 0x12
    1af8:	01 97       	sbiw	r24, 0x01	; 1
    1afa:	f1 f7       	brne	.-4      	; 0x1af8 <Change_Password+0xe0>
    1afc:	9a 8b       	std	Y+18, r25	; 0x12
    1afe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b00:	8b 89       	ldd	r24, Y+19	; 0x13
    1b02:	9c 89       	ldd	r25, Y+20	; 0x14
    1b04:	01 97       	sbiw	r24, 0x01	; 1
    1b06:	9c 8b       	std	Y+20, r25	; 0x14
    1b08:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b0a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b0c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b0e:	00 97       	sbiw	r24, 0x00	; 0
    1b10:	69 f7       	brne	.-38     	; 0x1aec <Change_Password+0xd4>
    1b12:	14 c0       	rjmp	.+40     	; 0x1b3c <Change_Password+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b14:	6d 89       	ldd	r22, Y+21	; 0x15
    1b16:	7e 89       	ldd	r23, Y+22	; 0x16
    1b18:	8f 89       	ldd	r24, Y+23	; 0x17
    1b1a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b1c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	9c 8b       	std	Y+20, r25	; 0x14
    1b26:	8b 8b       	std	Y+19, r24	; 0x13
    1b28:	8b 89       	ldd	r24, Y+19	; 0x13
    1b2a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b2c:	98 8b       	std	Y+16, r25	; 0x10
    1b2e:	8f 87       	std	Y+15, r24	; 0x0f
    1b30:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b32:	98 89       	ldd	r25, Y+16	; 0x10
    1b34:	01 97       	sbiw	r24, 0x01	; 1
    1b36:	f1 f7       	brne	.-4      	; 0x1b34 <Change_Password+0x11c>
    1b38:	98 8b       	std	Y+16, r25	; 0x10
    1b3a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500); /* Delay for user to see the message */
		LCD_clearScreen();  /* Clear the screen again */
    1b3c:	0e 94 a9 1b 	call	0x3752	; 0x3752 <LCD_clearScreen>

		/* Prompt the user to create a new password */
		Create_Password();
    1b40:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <Create_Password>
		Send_Password (pass);
    1b44:	84 eb       	ldi	r24, 0xB4	; 180
    1b46:	91 e0       	ldi	r25, 0x01	; 1
    1b48:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Send_Password>
		Send_Password (pass_check);
    1b4c:	89 eb       	ldi	r24, 0xB9	; 185
    1b4e:	91 e0       	ldi	r25, 0x01	; 1
    1b50:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Send_Password>
		Recive_Confirmation();
    1b54:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <Recive_Confirmation>

		/* Reset attempt counter */
		Attempt = 0;
    1b58:	10 92 a7 01 	sts	0x01A7, r1
    1b5c:	d3 c0       	rjmp	.+422    	; 0x1d04 <Change_Password+0x2ec>
	}

	else if(recive == FAIL)
    1b5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b60:	88 23       	and	r24, r24
    1b62:	09 f0       	breq	.+2      	; 0x1b66 <Change_Password+0x14e>
    1b64:	cf c0       	rjmp	.+414    	; 0x1d04 <Change_Password+0x2ec>
	{

		/* If password is incorrect, increment attempt counter */
		Attempt++;
    1b66:	80 91 a7 01 	lds	r24, 0x01A7
    1b6a:	8f 5f       	subi	r24, 0xFF	; 255
    1b6c:	80 93 a7 01 	sts	0x01A7, r24
		LCD_clearScreen(); /* Clear the LCD screen */
    1b70:	0e 94 a9 1b 	call	0x3752	; 0x3752 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Wrong Pass");
    1b74:	29 ef       	ldi	r18, 0xF9	; 249
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	80 e0       	ldi	r24, 0x00	; 0
    1b7a:	60 e0       	ldi	r22, 0x00	; 0
    1b7c:	a9 01       	movw	r20, r18
    1b7e:	0e 94 3f 1b 	call	0x367e	; 0x367e <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"Attempts Left ");
    1b82:	24 e0       	ldi	r18, 0x04	; 4
    1b84:	31 e0       	ldi	r19, 0x01	; 1
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	60 e0       	ldi	r22, 0x00	; 0
    1b8a:	a9 01       	movw	r20, r18
    1b8c:	0e 94 3f 1b 	call	0x367e	; 0x367e <LCD_displayStringRowColumn>

		LCD_intgerToString(3-Attempt);
    1b90:	80 91 a7 01 	lds	r24, 0x01A7
    1b94:	28 2f       	mov	r18, r24
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	83 e0       	ldi	r24, 0x03	; 3
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	82 1b       	sub	r24, r18
    1b9e:	93 0b       	sbc	r25, r19
    1ba0:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <LCD_intgerToString>
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	aa ef       	ldi	r26, 0xFA	; 250
    1baa:	b3 e4       	ldi	r27, 0x43	; 67
    1bac:	8b 87       	std	Y+11, r24	; 0x0b
    1bae:	9c 87       	std	Y+12, r25	; 0x0c
    1bb0:	ad 87       	std	Y+13, r26	; 0x0d
    1bb2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	4a ef       	ldi	r20, 0xFA	; 250
    1bc2:	54 e4       	ldi	r21, 0x44	; 68
    1bc4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	8f 83       	std	Y+7, r24	; 0x07
    1bce:	98 87       	std	Y+8, r25	; 0x08
    1bd0:	a9 87       	std	Y+9, r26	; 0x09
    1bd2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd6:	78 85       	ldd	r23, Y+8	; 0x08
    1bd8:	89 85       	ldd	r24, Y+9	; 0x09
    1bda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	40 e8       	ldi	r20, 0x80	; 128
    1be2:	5f e3       	ldi	r21, 0x3F	; 63
    1be4:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1be8:	88 23       	and	r24, r24
    1bea:	2c f4       	brge	.+10     	; 0x1bf6 <Change_Password+0x1de>
		__ticks = 1;
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	9e 83       	std	Y+6, r25	; 0x06
    1bf2:	8d 83       	std	Y+5, r24	; 0x05
    1bf4:	3f c0       	rjmp	.+126    	; 0x1c74 <Change_Password+0x25c>
	else if (__tmp > 65535)
    1bf6:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf8:	78 85       	ldd	r23, Y+8	; 0x08
    1bfa:	89 85       	ldd	r24, Y+9	; 0x09
    1bfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	3f ef       	ldi	r19, 0xFF	; 255
    1c02:	4f e7       	ldi	r20, 0x7F	; 127
    1c04:	57 e4       	ldi	r21, 0x47	; 71
    1c06:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1c0a:	18 16       	cp	r1, r24
    1c0c:	4c f5       	brge	.+82     	; 0x1c60 <Change_Password+0x248>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c10:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c14:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	40 e2       	ldi	r20, 0x20	; 32
    1c1c:	51 e4       	ldi	r21, 0x41	; 65
    1c1e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	bc 01       	movw	r22, r24
    1c28:	cd 01       	movw	r24, r26
    1c2a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	9e 83       	std	Y+6, r25	; 0x06
    1c34:	8d 83       	std	Y+5, r24	; 0x05
    1c36:	0f c0       	rjmp	.+30     	; 0x1c56 <Change_Password+0x23e>
    1c38:	88 ec       	ldi	r24, 0xC8	; 200
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	9c 83       	std	Y+4, r25	; 0x04
    1c3e:	8b 83       	std	Y+3, r24	; 0x03
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	9c 81       	ldd	r25, Y+4	; 0x04
    1c44:	01 97       	sbiw	r24, 0x01	; 1
    1c46:	f1 f7       	brne	.-4      	; 0x1c44 <Change_Password+0x22c>
    1c48:	9c 83       	std	Y+4, r25	; 0x04
    1c4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c50:	01 97       	sbiw	r24, 0x01	; 1
    1c52:	9e 83       	std	Y+6, r25	; 0x06
    1c54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c56:	8d 81       	ldd	r24, Y+5	; 0x05
    1c58:	9e 81       	ldd	r25, Y+6	; 0x06
    1c5a:	00 97       	sbiw	r24, 0x00	; 0
    1c5c:	69 f7       	brne	.-38     	; 0x1c38 <Change_Password+0x220>
    1c5e:	14 c0       	rjmp	.+40     	; 0x1c88 <Change_Password+0x270>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c60:	6f 81       	ldd	r22, Y+7	; 0x07
    1c62:	78 85       	ldd	r23, Y+8	; 0x08
    1c64:	89 85       	ldd	r24, Y+9	; 0x09
    1c66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c68:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	9e 83       	std	Y+6, r25	; 0x06
    1c72:	8d 83       	std	Y+5, r24	; 0x05
    1c74:	8d 81       	ldd	r24, Y+5	; 0x05
    1c76:	9e 81       	ldd	r25, Y+6	; 0x06
    1c78:	9a 83       	std	Y+2, r25	; 0x02
    1c7a:	89 83       	std	Y+1, r24	; 0x01
    1c7c:	89 81       	ldd	r24, Y+1	; 0x01
    1c7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	f1 f7       	brne	.-4      	; 0x1c80 <Change_Password+0x268>
    1c84:	9a 83       	std	Y+2, r25	; 0x02
    1c86:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);

		/* Lock the system after 3 failed attempts */
		if (Attempt == 3)
    1c88:	80 91 a7 01 	lds	r24, 0x01A7
    1c8c:	83 30       	cpi	r24, 0x03	; 3
    1c8e:	d1 f5       	brne	.+116    	; 0x1d04 <Change_Password+0x2ec>
		{
			/* If three incorrect succisive attempts, lock the system */
			Timer_ConfigType ptr = {0,3910,Timer_1,Prescale_1024,Compare_Mode};
    1c90:	ce 01       	movw	r24, r28
    1c92:	4e 96       	adiw	r24, 0x1e	; 30
    1c94:	9e a3       	std	Y+38, r25	; 0x26
    1c96:	8d a3       	std	Y+37, r24	; 0x25
    1c98:	ec e9       	ldi	r30, 0x9C	; 156
    1c9a:	f1 e0       	ldi	r31, 0x01	; 1
    1c9c:	f8 a7       	std	Y+40, r31	; 0x28
    1c9e:	ef a3       	std	Y+39, r30	; 0x27
    1ca0:	f7 e0       	ldi	r31, 0x07	; 7
    1ca2:	f9 a7       	std	Y+41, r31	; 0x29
    1ca4:	ef a1       	ldd	r30, Y+39	; 0x27
    1ca6:	f8 a5       	ldd	r31, Y+40	; 0x28
    1ca8:	00 80       	ld	r0, Z
    1caa:	8f a1       	ldd	r24, Y+39	; 0x27
    1cac:	98 a5       	ldd	r25, Y+40	; 0x28
    1cae:	01 96       	adiw	r24, 0x01	; 1
    1cb0:	98 a7       	std	Y+40, r25	; 0x28
    1cb2:	8f a3       	std	Y+39, r24	; 0x27
    1cb4:	ed a1       	ldd	r30, Y+37	; 0x25
    1cb6:	fe a1       	ldd	r31, Y+38	; 0x26
    1cb8:	00 82       	st	Z, r0
    1cba:	8d a1       	ldd	r24, Y+37	; 0x25
    1cbc:	9e a1       	ldd	r25, Y+38	; 0x26
    1cbe:	01 96       	adiw	r24, 0x01	; 1
    1cc0:	9e a3       	std	Y+38, r25	; 0x26
    1cc2:	8d a3       	std	Y+37, r24	; 0x25
    1cc4:	99 a5       	ldd	r25, Y+41	; 0x29
    1cc6:	91 50       	subi	r25, 0x01	; 1
    1cc8:	99 a7       	std	Y+41, r25	; 0x29
    1cca:	e9 a5       	ldd	r30, Y+41	; 0x29
    1ccc:	ee 23       	and	r30, r30
    1cce:	51 f7       	brne	.-44     	; 0x1ca4 <Change_Password+0x28c>
			Timer_init(&ptr);
    1cd0:	ce 01       	movw	r24, r28
    1cd2:	4e 96       	adiw	r24, 0x1e	; 30
    1cd4:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <Timer_init>
			Timer_setCallBack( Lock_Screen , Timer_1);
    1cd8:	80 e4       	ldi	r24, 0x40	; 64
    1cda:	9c e0       	ldi	r25, 0x0C	; 12
    1cdc:	61 e0       	ldi	r22, 0x01	; 1
    1cde:	0e 94 62 11 	call	0x22c4	; 0x22c4 <Timer_setCallBack>

			LCD_clearScreen();  /* Clear the LCD screen */
    1ce2:	0e 94 a9 1b 	call	0x3752	; 0x3752 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Locked....");
    1ce6:	23 e1       	ldi	r18, 0x13	; 19
    1ce8:	31 e0       	ldi	r19, 0x01	; 1
    1cea:	80 e0       	ldi	r24, 0x00	; 0
    1cec:	60 e0       	ldi	r22, 0x00	; 0
    1cee:	a9 01       	movw	r20, r18
    1cf0:	0e 94 3f 1b 	call	0x367e	; 0x367e <LCD_displayStringRowColumn>

			/* Wait until the timer callback sets the flag */
			while(!Flag);
    1cf4:	80 91 a8 01 	lds	r24, 0x01A8
    1cf8:	88 23       	and	r24, r24
    1cfa:	e1 f3       	breq	.-8      	; 0x1cf4 <Change_Password+0x2dc>
			Flag=0;     /* Reset the flag */
    1cfc:	10 92 a8 01 	sts	0x01A8, r1
			Attempt=0;  /* Reset the attempt counter */
    1d00:	10 92 a7 01 	sts	0x01A7, r1
		}
	}
}
    1d04:	a9 96       	adiw	r28, 0x29	; 41
    1d06:	0f b6       	in	r0, 0x3f	; 63
    1d08:	f8 94       	cli
    1d0a:	de bf       	out	0x3e, r29	; 62
    1d0c:	0f be       	out	0x3f, r0	; 63
    1d0e:	cd bf       	out	0x3d, r28	; 61
    1d10:	cf 91       	pop	r28
    1d12:	df 91       	pop	r29
    1d14:	08 95       	ret

00001d16 <main>:
/*******************************************************************************
 *                              Main Functions                                 *
 *******************************************************************************/

int main (void)
{
    1d16:	df 93       	push	r29
    1d18:	cf 93       	push	r28
    1d1a:	cd b7       	in	r28, 0x3d	; 61
    1d1c:	de b7       	in	r29, 0x3e	; 62
	Initialise();
    1d1e:	0e 94 20 06 	call	0xc40	; 0xc40 <Initialise>
	Create_Password ();
    1d22:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <Create_Password>
	Send_Password (pass);
    1d26:	84 eb       	ldi	r24, 0xB4	; 180
    1d28:	91 e0       	ldi	r25, 0x01	; 1
    1d2a:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Send_Password>
	Send_Password (pass_check);
    1d2e:	89 eb       	ldi	r24, 0xB9	; 185
    1d30:	91 e0       	ldi	r25, 0x01	; 1
    1d32:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Send_Password>
	Recive_Confirmation();
    1d36:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <Recive_Confirmation>

	while (1)
	{
		LCD_clearScreen();
    1d3a:	0e 94 a9 1b 	call	0x3752	; 0x3752 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0," + : Open Door");
    1d3e:	29 e5       	ldi	r18, 0x59	; 89
    1d40:	31 e0       	ldi	r19, 0x01	; 1
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	60 e0       	ldi	r22, 0x00	; 0
    1d46:	a9 01       	movw	r20, r18
    1d48:	0e 94 3f 1b 	call	0x367e	; 0x367e <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0," - : Change Pass");
    1d4c:	28 e6       	ldi	r18, 0x68	; 104
    1d4e:	31 e0       	ldi	r19, 0x01	; 1
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	60 e0       	ldi	r22, 0x00	; 0
    1d54:	a9 01       	movw	r20, r18
    1d56:	0e 94 3f 1b 	call	0x367e	; 0x367e <LCD_displayStringRowColumn>
		key = KEYPAD_getPressedKey();
    1d5a:	0e 94 cf 14 	call	0x299e	; 0x299e <KEYPAD_getPressedKey>
    1d5e:	80 93 a4 01 	sts	0x01A4, r24

		if(key == '+')
    1d62:	80 91 a4 01 	lds	r24, 0x01A4
    1d66:	8b 32       	cpi	r24, 0x2B	; 43
    1d68:	31 f4       	brne	.+12     	; 0x1d76 <main+0x60>
		{
			UART_sendByte(OPEN);
    1d6a:	86 e0       	ldi	r24, 0x06	; 6
    1d6c:	0e 94 35 1c 	call	0x386a	; 0x386a <UART_sendByte>
			Open_Door ();
    1d70:	0e 94 9d 09 	call	0x133a	; 0x133a <Open_Door>
    1d74:	e2 cf       	rjmp	.-60     	; 0x1d3a <main+0x24>
		}
		else if (key == '-')
    1d76:	80 91 a4 01 	lds	r24, 0x01A4
    1d7a:	8d 32       	cpi	r24, 0x2D	; 45
    1d7c:	f1 f6       	brne	.-68     	; 0x1d3a <main+0x24>
		{
			UART_sendByte(CHANGE);
    1d7e:	87 e0       	ldi	r24, 0x07	; 7
    1d80:	0e 94 35 1c 	call	0x386a	; 0x386a <UART_sendByte>
			Change_Password ();
    1d84:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <Change_Password>
    1d88:	d8 cf       	rjmp	.-80     	; 0x1d3a <main+0x24>

00001d8a <__vector_11>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    1d8a:	1f 92       	push	r1
    1d8c:	0f 92       	push	r0
    1d8e:	0f b6       	in	r0, 0x3f	; 63
    1d90:	0f 92       	push	r0
    1d92:	11 24       	eor	r1, r1
    1d94:	2f 93       	push	r18
    1d96:	3f 93       	push	r19
    1d98:	4f 93       	push	r20
    1d9a:	5f 93       	push	r21
    1d9c:	6f 93       	push	r22
    1d9e:	7f 93       	push	r23
    1da0:	8f 93       	push	r24
    1da2:	9f 93       	push	r25
    1da4:	af 93       	push	r26
    1da6:	bf 93       	push	r27
    1da8:	ef 93       	push	r30
    1daa:	ff 93       	push	r31
    1dac:	df 93       	push	r29
    1dae:	cf 93       	push	r28
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
    1db4:	80 91 a9 01 	lds	r24, 0x01A9
    1db8:	90 91 aa 01 	lds	r25, 0x01AA
    1dbc:	00 97       	sbiw	r24, 0x00	; 0
    1dbe:	29 f0       	breq	.+10     	; 0x1dca <__vector_11+0x40>
	{
		(*g_callBackPtr0)();
    1dc0:	e0 91 a9 01 	lds	r30, 0x01A9
    1dc4:	f0 91 aa 01 	lds	r31, 0x01AA
    1dc8:	09 95       	icall
	}
}
    1dca:	cf 91       	pop	r28
    1dcc:	df 91       	pop	r29
    1dce:	ff 91       	pop	r31
    1dd0:	ef 91       	pop	r30
    1dd2:	bf 91       	pop	r27
    1dd4:	af 91       	pop	r26
    1dd6:	9f 91       	pop	r25
    1dd8:	8f 91       	pop	r24
    1dda:	7f 91       	pop	r23
    1ddc:	6f 91       	pop	r22
    1dde:	5f 91       	pop	r21
    1de0:	4f 91       	pop	r20
    1de2:	3f 91       	pop	r19
    1de4:	2f 91       	pop	r18
    1de6:	0f 90       	pop	r0
    1de8:	0f be       	out	0x3f, r0	; 63
    1dea:	0f 90       	pop	r0
    1dec:	1f 90       	pop	r1
    1dee:	18 95       	reti

00001df0 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    1df0:	1f 92       	push	r1
    1df2:	0f 92       	push	r0
    1df4:	0f b6       	in	r0, 0x3f	; 63
    1df6:	0f 92       	push	r0
    1df8:	11 24       	eor	r1, r1
    1dfa:	2f 93       	push	r18
    1dfc:	3f 93       	push	r19
    1dfe:	4f 93       	push	r20
    1e00:	5f 93       	push	r21
    1e02:	6f 93       	push	r22
    1e04:	7f 93       	push	r23
    1e06:	8f 93       	push	r24
    1e08:	9f 93       	push	r25
    1e0a:	af 93       	push	r26
    1e0c:	bf 93       	push	r27
    1e0e:	ef 93       	push	r30
    1e10:	ff 93       	push	r31
    1e12:	df 93       	push	r29
    1e14:	cf 93       	push	r28
    1e16:	cd b7       	in	r28, 0x3d	; 61
    1e18:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
    1e1a:	80 91 a9 01 	lds	r24, 0x01A9
    1e1e:	90 91 aa 01 	lds	r25, 0x01AA
    1e22:	00 97       	sbiw	r24, 0x00	; 0
    1e24:	29 f0       	breq	.+10     	; 0x1e30 <__vector_10+0x40>
	{
		(*g_callBackPtr0)();
    1e26:	e0 91 a9 01 	lds	r30, 0x01A9
    1e2a:	f0 91 aa 01 	lds	r31, 0x01AA
    1e2e:	09 95       	icall
	}
}
    1e30:	cf 91       	pop	r28
    1e32:	df 91       	pop	r29
    1e34:	ff 91       	pop	r31
    1e36:	ef 91       	pop	r30
    1e38:	bf 91       	pop	r27
    1e3a:	af 91       	pop	r26
    1e3c:	9f 91       	pop	r25
    1e3e:	8f 91       	pop	r24
    1e40:	7f 91       	pop	r23
    1e42:	6f 91       	pop	r22
    1e44:	5f 91       	pop	r21
    1e46:	4f 91       	pop	r20
    1e48:	3f 91       	pop	r19
    1e4a:	2f 91       	pop	r18
    1e4c:	0f 90       	pop	r0
    1e4e:	0f be       	out	0x3f, r0	; 63
    1e50:	0f 90       	pop	r0
    1e52:	1f 90       	pop	r1
    1e54:	18 95       	reti

00001e56 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    1e56:	1f 92       	push	r1
    1e58:	0f 92       	push	r0
    1e5a:	0f b6       	in	r0, 0x3f	; 63
    1e5c:	0f 92       	push	r0
    1e5e:	11 24       	eor	r1, r1
    1e60:	2f 93       	push	r18
    1e62:	3f 93       	push	r19
    1e64:	4f 93       	push	r20
    1e66:	5f 93       	push	r21
    1e68:	6f 93       	push	r22
    1e6a:	7f 93       	push	r23
    1e6c:	8f 93       	push	r24
    1e6e:	9f 93       	push	r25
    1e70:	af 93       	push	r26
    1e72:	bf 93       	push	r27
    1e74:	ef 93       	push	r30
    1e76:	ff 93       	push	r31
    1e78:	df 93       	push	r29
    1e7a:	cf 93       	push	r28
    1e7c:	cd b7       	in	r28, 0x3d	; 61
    1e7e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
    1e80:	80 91 ab 01 	lds	r24, 0x01AB
    1e84:	90 91 ac 01 	lds	r25, 0x01AC
    1e88:	00 97       	sbiw	r24, 0x00	; 0
    1e8a:	29 f0       	breq	.+10     	; 0x1e96 <__vector_9+0x40>
	{

		(*g_callBackPtr1)();
    1e8c:	e0 91 ab 01 	lds	r30, 0x01AB
    1e90:	f0 91 ac 01 	lds	r31, 0x01AC
    1e94:	09 95       	icall
	}
}
    1e96:	cf 91       	pop	r28
    1e98:	df 91       	pop	r29
    1e9a:	ff 91       	pop	r31
    1e9c:	ef 91       	pop	r30
    1e9e:	bf 91       	pop	r27
    1ea0:	af 91       	pop	r26
    1ea2:	9f 91       	pop	r25
    1ea4:	8f 91       	pop	r24
    1ea6:	7f 91       	pop	r23
    1ea8:	6f 91       	pop	r22
    1eaa:	5f 91       	pop	r21
    1eac:	4f 91       	pop	r20
    1eae:	3f 91       	pop	r19
    1eb0:	2f 91       	pop	r18
    1eb2:	0f 90       	pop	r0
    1eb4:	0f be       	out	0x3f, r0	; 63
    1eb6:	0f 90       	pop	r0
    1eb8:	1f 90       	pop	r1
    1eba:	18 95       	reti

00001ebc <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    1ebc:	1f 92       	push	r1
    1ebe:	0f 92       	push	r0
    1ec0:	0f b6       	in	r0, 0x3f	; 63
    1ec2:	0f 92       	push	r0
    1ec4:	11 24       	eor	r1, r1
    1ec6:	2f 93       	push	r18
    1ec8:	3f 93       	push	r19
    1eca:	4f 93       	push	r20
    1ecc:	5f 93       	push	r21
    1ece:	6f 93       	push	r22
    1ed0:	7f 93       	push	r23
    1ed2:	8f 93       	push	r24
    1ed4:	9f 93       	push	r25
    1ed6:	af 93       	push	r26
    1ed8:	bf 93       	push	r27
    1eda:	ef 93       	push	r30
    1edc:	ff 93       	push	r31
    1ede:	df 93       	push	r29
    1ee0:	cf 93       	push	r28
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
    1ee6:	80 91 ab 01 	lds	r24, 0x01AB
    1eea:	90 91 ac 01 	lds	r25, 0x01AC
    1eee:	00 97       	sbiw	r24, 0x00	; 0
    1ef0:	29 f0       	breq	.+10     	; 0x1efc <__vector_7+0x40>
	{
		(*g_callBackPtr1)();
    1ef2:	e0 91 ab 01 	lds	r30, 0x01AB
    1ef6:	f0 91 ac 01 	lds	r31, 0x01AC
    1efa:	09 95       	icall
	}
}
    1efc:	cf 91       	pop	r28
    1efe:	df 91       	pop	r29
    1f00:	ff 91       	pop	r31
    1f02:	ef 91       	pop	r30
    1f04:	bf 91       	pop	r27
    1f06:	af 91       	pop	r26
    1f08:	9f 91       	pop	r25
    1f0a:	8f 91       	pop	r24
    1f0c:	7f 91       	pop	r23
    1f0e:	6f 91       	pop	r22
    1f10:	5f 91       	pop	r21
    1f12:	4f 91       	pop	r20
    1f14:	3f 91       	pop	r19
    1f16:	2f 91       	pop	r18
    1f18:	0f 90       	pop	r0
    1f1a:	0f be       	out	0x3f, r0	; 63
    1f1c:	0f 90       	pop	r0
    1f1e:	1f 90       	pop	r1
    1f20:	18 95       	reti

00001f22 <__vector_5>:

ISR(TIMER2_OVF_vect)
{
    1f22:	1f 92       	push	r1
    1f24:	0f 92       	push	r0
    1f26:	0f b6       	in	r0, 0x3f	; 63
    1f28:	0f 92       	push	r0
    1f2a:	11 24       	eor	r1, r1
    1f2c:	2f 93       	push	r18
    1f2e:	3f 93       	push	r19
    1f30:	4f 93       	push	r20
    1f32:	5f 93       	push	r21
    1f34:	6f 93       	push	r22
    1f36:	7f 93       	push	r23
    1f38:	8f 93       	push	r24
    1f3a:	9f 93       	push	r25
    1f3c:	af 93       	push	r26
    1f3e:	bf 93       	push	r27
    1f40:	ef 93       	push	r30
    1f42:	ff 93       	push	r31
    1f44:	df 93       	push	r29
    1f46:	cf 93       	push	r28
    1f48:	cd b7       	in	r28, 0x3d	; 61
    1f4a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
    1f4c:	80 91 ad 01 	lds	r24, 0x01AD
    1f50:	90 91 ae 01 	lds	r25, 0x01AE
    1f54:	00 97       	sbiw	r24, 0x00	; 0
    1f56:	29 f0       	breq	.+10     	; 0x1f62 <__vector_5+0x40>
	{

		(*g_callBackPtr2)();
    1f58:	e0 91 ad 01 	lds	r30, 0x01AD
    1f5c:	f0 91 ae 01 	lds	r31, 0x01AE
    1f60:	09 95       	icall
	}
}
    1f62:	cf 91       	pop	r28
    1f64:	df 91       	pop	r29
    1f66:	ff 91       	pop	r31
    1f68:	ef 91       	pop	r30
    1f6a:	bf 91       	pop	r27
    1f6c:	af 91       	pop	r26
    1f6e:	9f 91       	pop	r25
    1f70:	8f 91       	pop	r24
    1f72:	7f 91       	pop	r23
    1f74:	6f 91       	pop	r22
    1f76:	5f 91       	pop	r21
    1f78:	4f 91       	pop	r20
    1f7a:	3f 91       	pop	r19
    1f7c:	2f 91       	pop	r18
    1f7e:	0f 90       	pop	r0
    1f80:	0f be       	out	0x3f, r0	; 63
    1f82:	0f 90       	pop	r0
    1f84:	1f 90       	pop	r1
    1f86:	18 95       	reti

00001f88 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    1f88:	1f 92       	push	r1
    1f8a:	0f 92       	push	r0
    1f8c:	0f b6       	in	r0, 0x3f	; 63
    1f8e:	0f 92       	push	r0
    1f90:	11 24       	eor	r1, r1
    1f92:	2f 93       	push	r18
    1f94:	3f 93       	push	r19
    1f96:	4f 93       	push	r20
    1f98:	5f 93       	push	r21
    1f9a:	6f 93       	push	r22
    1f9c:	7f 93       	push	r23
    1f9e:	8f 93       	push	r24
    1fa0:	9f 93       	push	r25
    1fa2:	af 93       	push	r26
    1fa4:	bf 93       	push	r27
    1fa6:	ef 93       	push	r30
    1fa8:	ff 93       	push	r31
    1faa:	df 93       	push	r29
    1fac:	cf 93       	push	r28
    1fae:	cd b7       	in	r28, 0x3d	; 61
    1fb0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
    1fb2:	80 91 ad 01 	lds	r24, 0x01AD
    1fb6:	90 91 ae 01 	lds	r25, 0x01AE
    1fba:	00 97       	sbiw	r24, 0x00	; 0
    1fbc:	29 f0       	breq	.+10     	; 0x1fc8 <__vector_4+0x40>
	{
		(*g_callBackPtr2)();
    1fbe:	e0 91 ad 01 	lds	r30, 0x01AD
    1fc2:	f0 91 ae 01 	lds	r31, 0x01AE
    1fc6:	09 95       	icall
	}
}
    1fc8:	cf 91       	pop	r28
    1fca:	df 91       	pop	r29
    1fcc:	ff 91       	pop	r31
    1fce:	ef 91       	pop	r30
    1fd0:	bf 91       	pop	r27
    1fd2:	af 91       	pop	r26
    1fd4:	9f 91       	pop	r25
    1fd6:	8f 91       	pop	r24
    1fd8:	7f 91       	pop	r23
    1fda:	6f 91       	pop	r22
    1fdc:	5f 91       	pop	r21
    1fde:	4f 91       	pop	r20
    1fe0:	3f 91       	pop	r19
    1fe2:	2f 91       	pop	r18
    1fe4:	0f 90       	pop	r0
    1fe6:	0f be       	out	0x3f, r0	; 63
    1fe8:	0f 90       	pop	r0
    1fea:	1f 90       	pop	r1
    1fec:	18 95       	reti

00001fee <Timer_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/

/*  Initializes the timer with the specified settings. */
void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    1fee:	df 93       	push	r29
    1ff0:	cf 93       	push	r28
    1ff2:	00 d0       	rcall	.+0      	; 0x1ff4 <Timer_init+0x6>
    1ff4:	00 d0       	rcall	.+0      	; 0x1ff6 <Timer_init+0x8>
    1ff6:	cd b7       	in	r28, 0x3d	; 61
    1ff8:	de b7       	in	r29, 0x3e	; 62
    1ffa:	9c 83       	std	Y+4, r25	; 0x04
    1ffc:	8b 83       	std	Y+3, r24	; 0x03
	uint8 timer_ID = Config_Ptr -> timer_ID ;
    1ffe:	eb 81       	ldd	r30, Y+3	; 0x03
    2000:	fc 81       	ldd	r31, Y+4	; 0x04
    2002:	84 81       	ldd	r24, Z+4	; 0x04
    2004:	8a 83       	std	Y+2, r24	; 0x02
	uint8 timer_Mode = Config_Ptr -> timer_mode;
    2006:	eb 81       	ldd	r30, Y+3	; 0x03
    2008:	fc 81       	ldd	r31, Y+4	; 0x04
    200a:	86 81       	ldd	r24, Z+6	; 0x06
    200c:	89 83       	std	Y+1, r24	; 0x01


	/* Timer0 configuration */
	if (timer_ID == Timer_0)
    200e:	8a 81       	ldd	r24, Y+2	; 0x02
    2010:	88 23       	and	r24, r24
    2012:	09 f0       	breq	.+2      	; 0x2016 <Timer_init+0x28>
    2014:	49 c0       	rjmp	.+146    	; 0x20a8 <Timer_init+0xba>
	{
		/* normal mode configuration */
		if(timer_Mode == Normal_Mode)
    2016:	89 81       	ldd	r24, Y+1	; 0x01
    2018:	88 23       	and	r24, r24
    201a:	e1 f4       	brne	.+56     	; 0x2054 <Timer_init+0x66>
		{
			TCNT0 = Config_Ptr -> timer_InitialValue ; /* Set Timer initial value */
    201c:	a2 e5       	ldi	r26, 0x52	; 82
    201e:	b0 e0       	ldi	r27, 0x00	; 0
    2020:	eb 81       	ldd	r30, Y+3	; 0x03
    2022:	fc 81       	ldd	r31, Y+4	; 0x04
    2024:	80 81       	ld	r24, Z
    2026:	91 81       	ldd	r25, Z+1	; 0x01
    2028:	8c 93       	st	X, r24

			TIMSK = (1<<TOIE0); /* Enable Timer0 Overflow Interrupt */
    202a:	e9 e5       	ldi	r30, 0x59	; 89
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	80 83       	st	Z, r24
			 * 1. Non PWM mode FOC0=1
			 * 2. Normal Mode WGM01=0 & WGM00=0
			 * 3. Normal Mode COM00=0 & COM01=0
			 * 4. clock = F_CPU/prescaler
			 */
			TCCR0 = (1<<FOC0) ;
    2032:	e3 e5       	ldi	r30, 0x53	; 83
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 e8       	ldi	r24, 0x80	; 128
    2038:	80 83       	st	Z, r24
			TCCR0 = (TCCR0 & 0XF8) | (Config_Ptr->timer_clock);
    203a:	a3 e5       	ldi	r26, 0x53	; 83
    203c:	b0 e0       	ldi	r27, 0x00	; 0
    203e:	e3 e5       	ldi	r30, 0x53	; 83
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	98 2f       	mov	r25, r24
    2046:	98 7f       	andi	r25, 0xF8	; 248
    2048:	eb 81       	ldd	r30, Y+3	; 0x03
    204a:	fc 81       	ldd	r31, Y+4	; 0x04
    204c:	85 81       	ldd	r24, Z+5	; 0x05
    204e:	89 2b       	or	r24, r25
    2050:	8c 93       	st	X, r24
    2052:	cf c0       	rjmp	.+414    	; 0x21f2 <Timer_init+0x204>
		}

		/* compare mode configuration */
		else if (timer_Mode == Compare_Mode)
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	81 30       	cpi	r24, 0x01	; 1
    2058:	09 f0       	breq	.+2      	; 0x205c <Timer_init+0x6e>
    205a:	cb c0       	rjmp	.+406    	; 0x21f2 <Timer_init+0x204>
		{
			TCNT0 = Config_Ptr -> timer_InitialValue ; /* Set Timer Initial Value 0 */
    205c:	a2 e5       	ldi	r26, 0x52	; 82
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	eb 81       	ldd	r30, Y+3	; 0x03
    2062:	fc 81       	ldd	r31, Y+4	; 0x04
    2064:	80 81       	ld	r24, Z
    2066:	91 81       	ldd	r25, Z+1	; 0x01
    2068:	8c 93       	st	X, r24
			OCR0 = Config_Ptr -> timer_compare_MatchValue; /* Set Compare Value */
    206a:	ac e5       	ldi	r26, 0x5C	; 92
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	eb 81       	ldd	r30, Y+3	; 0x03
    2070:	fc 81       	ldd	r31, Y+4	; 0x04
    2072:	82 81       	ldd	r24, Z+2	; 0x02
    2074:	93 81       	ldd	r25, Z+3	; 0x03
    2076:	8c 93       	st	X, r24

			TIMSK |= (1<<OCIE0); /* Enable Timer0 Compare Interrupt */
    2078:	a9 e5       	ldi	r26, 0x59	; 89
    207a:	b0 e0       	ldi	r27, 0x00	; 0
    207c:	e9 e5       	ldi	r30, 0x59	; 89
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	80 81       	ld	r24, Z
    2082:	82 60       	ori	r24, 0x02	; 2
    2084:	8c 93       	st	X, r24
			 * 1. Non PWM mode FOC0=1
			 * 2. CTC Mode WGM01=1 & WGM00=0
			 * 3. No need for OC0 in this example so COM00=0 & COM01=0
			 * 4. clock = F_CPU/prescaler
			 */
			TCCR0 = (1<<FOC0) | (1<<WGM01);
    2086:	e3 e5       	ldi	r30, 0x53	; 83
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	88 e8       	ldi	r24, 0x88	; 136
    208c:	80 83       	st	Z, r24
			TCCR0 = (TCCR0 & 0XF8) | (Config_Ptr->timer_clock);
    208e:	a3 e5       	ldi	r26, 0x53	; 83
    2090:	b0 e0       	ldi	r27, 0x00	; 0
    2092:	e3 e5       	ldi	r30, 0x53	; 83
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	80 81       	ld	r24, Z
    2098:	98 2f       	mov	r25, r24
    209a:	98 7f       	andi	r25, 0xF8	; 248
    209c:	eb 81       	ldd	r30, Y+3	; 0x03
    209e:	fc 81       	ldd	r31, Y+4	; 0x04
    20a0:	85 81       	ldd	r24, Z+5	; 0x05
    20a2:	89 2b       	or	r24, r25
    20a4:	8c 93       	st	X, r24
    20a6:	a5 c0       	rjmp	.+330    	; 0x21f2 <Timer_init+0x204>
		}
	}

	/* Timer1 configuration */
	else if (timer_ID == Timer_1)
    20a8:	8a 81       	ldd	r24, Y+2	; 0x02
    20aa:	81 30       	cpi	r24, 0x01	; 1
    20ac:	09 f0       	breq	.+2      	; 0x20b0 <Timer_init+0xc2>
    20ae:	56 c0       	rjmp	.+172    	; 0x215c <Timer_init+0x16e>
	{
		/* normal mode configuration */
		if(timer_Mode == Normal_Mode)
    20b0:	89 81       	ldd	r24, Y+1	; 0x01
    20b2:	88 23       	and	r24, r24
    20b4:	09 f5       	brne	.+66     	; 0x20f8 <Timer_init+0x10a>
		{
			TCNT1 = Config_Ptr -> timer_InitialValue ;		/* Set timer1 initial count  */
    20b6:	ac e4       	ldi	r26, 0x4C	; 76
    20b8:	b0 e0       	ldi	r27, 0x00	; 0
    20ba:	eb 81       	ldd	r30, Y+3	; 0x03
    20bc:	fc 81       	ldd	r31, Y+4	; 0x04
    20be:	80 81       	ld	r24, Z
    20c0:	91 81       	ldd	r25, Z+1	; 0x01
    20c2:	11 96       	adiw	r26, 0x01	; 1
    20c4:	9c 93       	st	X, r25
    20c6:	8e 93       	st	-X, r24

			TIMSK |= (1<<TOIE1) ; /* Enable Timer1 Overflow Interrupt */
    20c8:	a9 e5       	ldi	r26, 0x59	; 89
    20ca:	b0 e0       	ldi	r27, 0x00	; 0
    20cc:	e9 e5       	ldi	r30, 0x59	; 89
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	80 81       	ld	r24, Z
    20d2:	84 60       	ori	r24, 0x04	; 4
    20d4:	8c 93       	st	X, r24
			/* Configure timer control register TCCR1A
			 * 1. Normal Mode COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
			 * 2. Non PWM FOC1A=1 FOC1B=1
			 * 3. Normal Mode WGM10=0 WGM11=0
			 */
			TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    20d6:	ef e4       	ldi	r30, 0x4F	; 79
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	8c e0       	ldi	r24, 0x0C	; 12
    20dc:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1B
			 * 1. Normal Mode WGM12=0 WGM13=0
			 * 2. Prescaler = F_CPU/Prescaler
			 */
			TCCR1B = (TCCR1B & 0XF8) | (Config_Ptr->timer_clock);
    20de:	ae e4       	ldi	r26, 0x4E	; 78
    20e0:	b0 e0       	ldi	r27, 0x00	; 0
    20e2:	ee e4       	ldi	r30, 0x4E	; 78
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	80 81       	ld	r24, Z
    20e8:	98 2f       	mov	r25, r24
    20ea:	98 7f       	andi	r25, 0xF8	; 248
    20ec:	eb 81       	ldd	r30, Y+3	; 0x03
    20ee:	fc 81       	ldd	r31, Y+4	; 0x04
    20f0:	85 81       	ldd	r24, Z+5	; 0x05
    20f2:	89 2b       	or	r24, r25
    20f4:	8c 93       	st	X, r24
    20f6:	7d c0       	rjmp	.+250    	; 0x21f2 <Timer_init+0x204>
		}

		/* compare mode configuration */
		else if (timer_Mode == Compare_Mode)
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	81 30       	cpi	r24, 0x01	; 1
    20fc:	09 f0       	breq	.+2      	; 0x2100 <Timer_init+0x112>
    20fe:	79 c0       	rjmp	.+242    	; 0x21f2 <Timer_init+0x204>
		{
			TCNT1 = Config_Ptr -> timer_InitialValue ;		/* Set timer1 initial count  */
    2100:	ac e4       	ldi	r26, 0x4C	; 76
    2102:	b0 e0       	ldi	r27, 0x00	; 0
    2104:	eb 81       	ldd	r30, Y+3	; 0x03
    2106:	fc 81       	ldd	r31, Y+4	; 0x04
    2108:	80 81       	ld	r24, Z
    210a:	91 81       	ldd	r25, Z+1	; 0x01
    210c:	11 96       	adiw	r26, 0x01	; 1
    210e:	9c 93       	st	X, r25
    2110:	8e 93       	st	-X, r24

			OCR1A = Config_Ptr -> timer_compare_MatchValue;    /* Set the Compare value */
    2112:	aa e4       	ldi	r26, 0x4A	; 74
    2114:	b0 e0       	ldi	r27, 0x00	; 0
    2116:	eb 81       	ldd	r30, Y+3	; 0x03
    2118:	fc 81       	ldd	r31, Y+4	; 0x04
    211a:	82 81       	ldd	r24, Z+2	; 0x02
    211c:	93 81       	ldd	r25, Z+3	; 0x03
    211e:	11 96       	adiw	r26, 0x01	; 1
    2120:	9c 93       	st	X, r25
    2122:	8e 93       	st	-X, r24

			TIMSK |= (1<<OCIE1A) ; /* Enable Timer1 Compare A Interrupt */
    2124:	a9 e5       	ldi	r26, 0x59	; 89
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	e9 e5       	ldi	r30, 0x59	; 89
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	80 81       	ld	r24, Z
    212e:	80 61       	ori	r24, 0x10	; 16
    2130:	8c 93       	st	X, r24
			/* Configure timer control register TCCR1A
			 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
			 * 2. FOC1A=1 FOC1B=1
			 * 3. CTC Mode WGM10=0 WGM11=0 (Mode Number 4)
			 */
			TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    2132:	ef e4       	ldi	r30, 0x4F	; 79
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	8c e0       	ldi	r24, 0x0C	; 12
    2138:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1B
			 * 1. CTC Mode WGM12=1 WGM13=0 (Mode Number 4)
			 * 2. Prescaler = F_CPU/Prescaler
			 */
			TCCR1B = (1<<WGM12);
    213a:	ee e4       	ldi	r30, 0x4E	; 78
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	88 e0       	ldi	r24, 0x08	; 8
    2140:	80 83       	st	Z, r24
			TCCR1B = (TCCR1B & 0XF8) | (Config_Ptr->timer_clock);
    2142:	ae e4       	ldi	r26, 0x4E	; 78
    2144:	b0 e0       	ldi	r27, 0x00	; 0
    2146:	ee e4       	ldi	r30, 0x4E	; 78
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	80 81       	ld	r24, Z
    214c:	98 2f       	mov	r25, r24
    214e:	98 7f       	andi	r25, 0xF8	; 248
    2150:	eb 81       	ldd	r30, Y+3	; 0x03
    2152:	fc 81       	ldd	r31, Y+4	; 0x04
    2154:	85 81       	ldd	r24, Z+5	; 0x05
    2156:	89 2b       	or	r24, r25
    2158:	8c 93       	st	X, r24
    215a:	4b c0       	rjmp	.+150    	; 0x21f2 <Timer_init+0x204>
		}
	}

	/* Timer2 configuration */
	else if (timer_ID == Timer_2)
    215c:	8a 81       	ldd	r24, Y+2	; 0x02
    215e:	82 30       	cpi	r24, 0x02	; 2
    2160:	09 f0       	breq	.+2      	; 0x2164 <Timer_init+0x176>
    2162:	47 c0       	rjmp	.+142    	; 0x21f2 <Timer_init+0x204>
	{
		/* normal mode configuration */
		if(timer_Mode == Normal_Mode)
    2164:	89 81       	ldd	r24, Y+1	; 0x01
    2166:	88 23       	and	r24, r24
    2168:	e1 f4       	brne	.+56     	; 0x21a2 <Timer_init+0x1b4>
		{
			TCNT2 = Config_Ptr -> timer_InitialValue ; /* Set Timer initial value */
    216a:	a4 e4       	ldi	r26, 0x44	; 68
    216c:	b0 e0       	ldi	r27, 0x00	; 0
    216e:	eb 81       	ldd	r30, Y+3	; 0x03
    2170:	fc 81       	ldd	r31, Y+4	; 0x04
    2172:	80 81       	ld	r24, Z
    2174:	91 81       	ldd	r25, Z+1	; 0x01
    2176:	8c 93       	st	X, r24

			TIMSK = (1<<TOIE2); /* Enable Timer2 Overflow Interrupt */
    2178:	e9 e5       	ldi	r30, 0x59	; 89
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	80 e4       	ldi	r24, 0x40	; 64
    217e:	80 83       	st	Z, r24
			 * 1. Non PWM mode FOC2=1
			 * 2. Normal Mode WGM21=0 & WGM20=0
			 * 3. Normal Mode COM20=0 & COM21=0
			 * 4. clock = F_CPU/prescaler
			 */
			TCCR2 = (1<<FOC2) ;
    2180:	e5 e4       	ldi	r30, 0x45	; 69
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 e8       	ldi	r24, 0x80	; 128
    2186:	80 83       	st	Z, r24
			TCCR2 = (TCCR2 & 0XF8) | (Config_Ptr->timer_clock);
    2188:	a5 e4       	ldi	r26, 0x45	; 69
    218a:	b0 e0       	ldi	r27, 0x00	; 0
    218c:	e5 e4       	ldi	r30, 0x45	; 69
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	80 81       	ld	r24, Z
    2192:	98 2f       	mov	r25, r24
    2194:	98 7f       	andi	r25, 0xF8	; 248
    2196:	eb 81       	ldd	r30, Y+3	; 0x03
    2198:	fc 81       	ldd	r31, Y+4	; 0x04
    219a:	85 81       	ldd	r24, Z+5	; 0x05
    219c:	89 2b       	or	r24, r25
    219e:	8c 93       	st	X, r24
    21a0:	28 c0       	rjmp	.+80     	; 0x21f2 <Timer_init+0x204>
		}

		/* compare mode configuration */
		else if (timer_Mode == Compare_Mode)
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	81 30       	cpi	r24, 0x01	; 1
    21a6:	29 f5       	brne	.+74     	; 0x21f2 <Timer_init+0x204>
		{
			TCNT2 = Config_Ptr -> timer_InitialValue ; /* Set Timer Initial Value  */
    21a8:	a4 e4       	ldi	r26, 0x44	; 68
    21aa:	b0 e0       	ldi	r27, 0x00	; 0
    21ac:	eb 81       	ldd	r30, Y+3	; 0x03
    21ae:	fc 81       	ldd	r31, Y+4	; 0x04
    21b0:	80 81       	ld	r24, Z
    21b2:	91 81       	ldd	r25, Z+1	; 0x01
    21b4:	8c 93       	st	X, r24
			OCR2 = Config_Ptr -> timer_compare_MatchValue; /* Set Compare Value */
    21b6:	a3 e4       	ldi	r26, 0x43	; 67
    21b8:	b0 e0       	ldi	r27, 0x00	; 0
    21ba:	eb 81       	ldd	r30, Y+3	; 0x03
    21bc:	fc 81       	ldd	r31, Y+4	; 0x04
    21be:	82 81       	ldd	r24, Z+2	; 0x02
    21c0:	93 81       	ldd	r25, Z+3	; 0x03
    21c2:	8c 93       	st	X, r24

			TIMSK |= (1<<OCIE2); /* Enable Timer2 Compare Interrupt */
    21c4:	a9 e5       	ldi	r26, 0x59	; 89
    21c6:	b0 e0       	ldi	r27, 0x00	; 0
    21c8:	e9 e5       	ldi	r30, 0x59	; 89
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	80 81       	ld	r24, Z
    21ce:	80 68       	ori	r24, 0x80	; 128
    21d0:	8c 93       	st	X, r24
			 * 1. Non PWM mode FOC2=1
			 * 2. CTC Mode WGM21=1 & WGM20=0
			 * 3. No need for OC2 so COM20=0 & COM21=0
			 * 4. clock = F_CPU/prescaler
			 */
			TCCR2 = (1<<FOC2) | (1<<WGM21);
    21d2:	e5 e4       	ldi	r30, 0x45	; 69
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	88 e8       	ldi	r24, 0x88	; 136
    21d8:	80 83       	st	Z, r24
			TCCR2 = (TCCR2 & 0XF8) | (Config_Ptr->timer_clock);
    21da:	a5 e4       	ldi	r26, 0x45	; 69
    21dc:	b0 e0       	ldi	r27, 0x00	; 0
    21de:	e5 e4       	ldi	r30, 0x45	; 69
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	80 81       	ld	r24, Z
    21e4:	98 2f       	mov	r25, r24
    21e6:	98 7f       	andi	r25, 0xF8	; 248
    21e8:	eb 81       	ldd	r30, Y+3	; 0x03
    21ea:	fc 81       	ldd	r31, Y+4	; 0x04
    21ec:	85 81       	ldd	r24, Z+5	; 0x05
    21ee:	89 2b       	or	r24, r25
    21f0:	8c 93       	st	X, r24
		}
	}
}
    21f2:	0f 90       	pop	r0
    21f4:	0f 90       	pop	r0
    21f6:	0f 90       	pop	r0
    21f8:	0f 90       	pop	r0
    21fa:	cf 91       	pop	r28
    21fc:	df 91       	pop	r29
    21fe:	08 95       	ret

00002200 <Timer_deInit>:

/* Disables the specified timer and resets its settings. */
void Timer_deInit(Timer_ID_Type timer_type)
{
    2200:	df 93       	push	r29
    2202:	cf 93       	push	r28
    2204:	00 d0       	rcall	.+0      	; 0x2206 <Timer_deInit+0x6>
    2206:	cd b7       	in	r28, 0x3d	; 61
    2208:	de b7       	in	r29, 0x3e	; 62
    220a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 timer_ID = timer_type;
    220c:	8a 81       	ldd	r24, Y+2	; 0x02
    220e:	89 83       	std	Y+1, r24	; 0x01

	/* Timer0 deinit */
	if (timer_ID == Timer_0)
    2210:	89 81       	ldd	r24, Y+1	; 0x01
    2212:	88 23       	and	r24, r24
    2214:	c1 f4       	brne	.+48     	; 0x2246 <Timer_deInit+0x46>
	{
		TCNT0 = 0; /* Reset Timer value */
    2216:	e2 e5       	ldi	r30, 0x52	; 82
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	10 82       	st	Z, r1
		OCR0  = 0; /* Reset Compare value */
    221c:	ec e5       	ldi	r30, 0x5C	; 92
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	10 82       	st	Z, r1
		TIMSK &=~ (1<<TOIE0); /* Disable Timer0 Overflow Interrupt */
    2222:	a9 e5       	ldi	r26, 0x59	; 89
    2224:	b0 e0       	ldi	r27, 0x00	; 0
    2226:	e9 e5       	ldi	r30, 0x59	; 89
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	80 81       	ld	r24, Z
    222c:	8e 7f       	andi	r24, 0xFE	; 254
    222e:	8c 93       	st	X, r24
		TIMSK &=~ (1<<OCIE0); /* Disable Timer0 Compare Interrupt */
    2230:	a9 e5       	ldi	r26, 0x59	; 89
    2232:	b0 e0       	ldi	r27, 0x00	; 0
    2234:	e9 e5       	ldi	r30, 0x59	; 89
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	8d 7f       	andi	r24, 0xFD	; 253
    223c:	8c 93       	st	X, r24
		TCCR0 = 0 ; /* Clear Register */
    223e:	e3 e5       	ldi	r30, 0x53	; 83
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	10 82       	st	Z, r1
    2244:	3a c0       	rjmp	.+116    	; 0x22ba <Timer_deInit+0xba>
	}

	/* Timer1 deinit */
	else if (timer_ID == Timer_1)
    2246:	89 81       	ldd	r24, Y+1	; 0x01
    2248:	81 30       	cpi	r24, 0x01	; 1
    224a:	e9 f4       	brne	.+58     	; 0x2286 <Timer_deInit+0x86>
	{
		TCNT1 = 0;		 /* Reset Timer value */
    224c:	ec e4       	ldi	r30, 0x4C	; 76
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	11 82       	std	Z+1, r1	; 0x01
    2252:	10 82       	st	Z, r1
		OCR1A = 0;       /* Reset Compare value */
    2254:	ea e4       	ldi	r30, 0x4A	; 74
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	11 82       	std	Z+1, r1	; 0x01
    225a:	10 82       	st	Z, r1
		TIMSK &=~ (1<<TOIE1) ;   /* Disable Timer1 Overflow Interrupt */
    225c:	a9 e5       	ldi	r26, 0x59	; 89
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	e9 e5       	ldi	r30, 0x59	; 89
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	8b 7f       	andi	r24, 0xFB	; 251
    2268:	8c 93       	st	X, r24
		TIMSK &=~ (1<<OCIE1A) ;  /* Disable Timer1 Compare A Interrupt */
    226a:	a9 e5       	ldi	r26, 0x59	; 89
    226c:	b0 e0       	ldi	r27, 0x00	; 0
    226e:	e9 e5       	ldi	r30, 0x59	; 89
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	80 81       	ld	r24, Z
    2274:	8f 7e       	andi	r24, 0xEF	; 239
    2276:	8c 93       	st	X, r24
		TCCR1A = 0; /* Clear Register */
    2278:	ef e4       	ldi	r30, 0x4F	; 79
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	10 82       	st	Z, r1
		TCCR1B = 0; /* Clear Register */
    227e:	ee e4       	ldi	r30, 0x4E	; 78
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	10 82       	st	Z, r1
    2284:	1a c0       	rjmp	.+52     	; 0x22ba <Timer_deInit+0xba>
	}

	/* Timer2 deinit */
	else if (timer_ID == Timer_2)
    2286:	89 81       	ldd	r24, Y+1	; 0x01
    2288:	82 30       	cpi	r24, 0x02	; 2
    228a:	b9 f4       	brne	.+46     	; 0x22ba <Timer_deInit+0xba>
	{
		TCNT2 = 0; /* Reset Timer value */
    228c:	e4 e4       	ldi	r30, 0x44	; 68
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	10 82       	st	Z, r1
		OCR2  = 0; /* Reset Compare value */
    2292:	e3 e4       	ldi	r30, 0x43	; 67
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	10 82       	st	Z, r1
		TIMSK &=~ (1<<TOIE2); /* Disable Timer2 Overflow Interrupt */
    2298:	a9 e5       	ldi	r26, 0x59	; 89
    229a:	b0 e0       	ldi	r27, 0x00	; 0
    229c:	e9 e5       	ldi	r30, 0x59	; 89
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	80 81       	ld	r24, Z
    22a2:	8f 7b       	andi	r24, 0xBF	; 191
    22a4:	8c 93       	st	X, r24
		TIMSK &=~ (1<<OCIE2); /* Disable Timer2 Compare Interrupt */
    22a6:	a9 e5       	ldi	r26, 0x59	; 89
    22a8:	b0 e0       	ldi	r27, 0x00	; 0
    22aa:	e9 e5       	ldi	r30, 0x59	; 89
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	80 81       	ld	r24, Z
    22b0:	8f 77       	andi	r24, 0x7F	; 127
    22b2:	8c 93       	st	X, r24
		TCCR2 = 0 ; /* Clear Register */
    22b4:	e5 e4       	ldi	r30, 0x45	; 69
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	10 82       	st	Z, r1
	}
}
    22ba:	0f 90       	pop	r0
    22bc:	0f 90       	pop	r0
    22be:	cf 91       	pop	r28
    22c0:	df 91       	pop	r29
    22c2:	08 95       	ret

000022c4 <Timer_setCallBack>:

/* Sets a callback function for the specified timer's interrupt. */
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID )
{
    22c4:	df 93       	push	r29
    22c6:	cf 93       	push	r28
    22c8:	00 d0       	rcall	.+0      	; 0x22ca <Timer_setCallBack+0x6>
    22ca:	00 d0       	rcall	.+0      	; 0x22cc <Timer_setCallBack+0x8>
    22cc:	cd b7       	in	r28, 0x3d	; 61
    22ce:	de b7       	in	r29, 0x3e	; 62
    22d0:	9b 83       	std	Y+3, r25	; 0x03
    22d2:	8a 83       	std	Y+2, r24	; 0x02
    22d4:	6c 83       	std	Y+4, r22	; 0x04
	uint8 timer_ID = a_timer_ID;
    22d6:	8c 81       	ldd	r24, Y+4	; 0x04
    22d8:	89 83       	std	Y+1, r24	; 0x01

	/* Timer0 callback */
	if (timer_ID == Timer_0)
    22da:	89 81       	ldd	r24, Y+1	; 0x01
    22dc:	88 23       	and	r24, r24
    22de:	39 f4       	brne	.+14     	; 0x22ee <Timer_setCallBack+0x2a>
	{
		g_callBackPtr0 = a_ptr;
    22e0:	8a 81       	ldd	r24, Y+2	; 0x02
    22e2:	9b 81       	ldd	r25, Y+3	; 0x03
    22e4:	90 93 aa 01 	sts	0x01AA, r25
    22e8:	80 93 a9 01 	sts	0x01A9, r24
    22ec:	13 c0       	rjmp	.+38     	; 0x2314 <Timer_setCallBack+0x50>
	}

	/* Timer1 callback */
	else if (timer_ID == Timer_1)
    22ee:	89 81       	ldd	r24, Y+1	; 0x01
    22f0:	81 30       	cpi	r24, 0x01	; 1
    22f2:	39 f4       	brne	.+14     	; 0x2302 <Timer_setCallBack+0x3e>
	{
		g_callBackPtr1 = a_ptr;
    22f4:	8a 81       	ldd	r24, Y+2	; 0x02
    22f6:	9b 81       	ldd	r25, Y+3	; 0x03
    22f8:	90 93 ac 01 	sts	0x01AC, r25
    22fc:	80 93 ab 01 	sts	0x01AB, r24
    2300:	09 c0       	rjmp	.+18     	; 0x2314 <Timer_setCallBack+0x50>

	}

	/* Timer2 callback */
	else if (timer_ID == Timer_2)
    2302:	89 81       	ldd	r24, Y+1	; 0x01
    2304:	82 30       	cpi	r24, 0x02	; 2
    2306:	31 f4       	brne	.+12     	; 0x2314 <Timer_setCallBack+0x50>
	{
		g_callBackPtr2 = a_ptr;
    2308:	8a 81       	ldd	r24, Y+2	; 0x02
    230a:	9b 81       	ldd	r25, Y+3	; 0x03
    230c:	90 93 ae 01 	sts	0x01AE, r25
    2310:	80 93 ad 01 	sts	0x01AD, r24

	}
}
    2314:	0f 90       	pop	r0
    2316:	0f 90       	pop	r0
    2318:	0f 90       	pop	r0
    231a:	0f 90       	pop	r0
    231c:	cf 91       	pop	r28
    231e:	df 91       	pop	r29
    2320:	08 95       	ret

00002322 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    2322:	df 93       	push	r29
    2324:	cf 93       	push	r28
    2326:	00 d0       	rcall	.+0      	; 0x2328 <GPIO_setupPinDirection+0x6>
    2328:	00 d0       	rcall	.+0      	; 0x232a <GPIO_setupPinDirection+0x8>
    232a:	0f 92       	push	r0
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
    2330:	89 83       	std	Y+1, r24	; 0x01
    2332:	6a 83       	std	Y+2, r22	; 0x02
    2334:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2336:	8a 81       	ldd	r24, Y+2	; 0x02
    2338:	88 30       	cpi	r24, 0x08	; 8
    233a:	08 f0       	brcs	.+2      	; 0x233e <GPIO_setupPinDirection+0x1c>
    233c:	d5 c0       	rjmp	.+426    	; 0x24e8 <GPIO_setupPinDirection+0x1c6>
    233e:	89 81       	ldd	r24, Y+1	; 0x01
    2340:	84 30       	cpi	r24, 0x04	; 4
    2342:	08 f0       	brcs	.+2      	; 0x2346 <GPIO_setupPinDirection+0x24>
    2344:	d1 c0       	rjmp	.+418    	; 0x24e8 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    2346:	89 81       	ldd	r24, Y+1	; 0x01
    2348:	28 2f       	mov	r18, r24
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	3d 83       	std	Y+5, r19	; 0x05
    234e:	2c 83       	std	Y+4, r18	; 0x04
    2350:	8c 81       	ldd	r24, Y+4	; 0x04
    2352:	9d 81       	ldd	r25, Y+5	; 0x05
    2354:	81 30       	cpi	r24, 0x01	; 1
    2356:	91 05       	cpc	r25, r1
    2358:	09 f4       	brne	.+2      	; 0x235c <GPIO_setupPinDirection+0x3a>
    235a:	43 c0       	rjmp	.+134    	; 0x23e2 <GPIO_setupPinDirection+0xc0>
    235c:	2c 81       	ldd	r18, Y+4	; 0x04
    235e:	3d 81       	ldd	r19, Y+5	; 0x05
    2360:	22 30       	cpi	r18, 0x02	; 2
    2362:	31 05       	cpc	r19, r1
    2364:	2c f4       	brge	.+10     	; 0x2370 <GPIO_setupPinDirection+0x4e>
    2366:	8c 81       	ldd	r24, Y+4	; 0x04
    2368:	9d 81       	ldd	r25, Y+5	; 0x05
    236a:	00 97       	sbiw	r24, 0x00	; 0
    236c:	71 f0       	breq	.+28     	; 0x238a <GPIO_setupPinDirection+0x68>
    236e:	bc c0       	rjmp	.+376    	; 0x24e8 <GPIO_setupPinDirection+0x1c6>
    2370:	2c 81       	ldd	r18, Y+4	; 0x04
    2372:	3d 81       	ldd	r19, Y+5	; 0x05
    2374:	22 30       	cpi	r18, 0x02	; 2
    2376:	31 05       	cpc	r19, r1
    2378:	09 f4       	brne	.+2      	; 0x237c <GPIO_setupPinDirection+0x5a>
    237a:	5f c0       	rjmp	.+190    	; 0x243a <GPIO_setupPinDirection+0x118>
    237c:	8c 81       	ldd	r24, Y+4	; 0x04
    237e:	9d 81       	ldd	r25, Y+5	; 0x05
    2380:	83 30       	cpi	r24, 0x03	; 3
    2382:	91 05       	cpc	r25, r1
    2384:	09 f4       	brne	.+2      	; 0x2388 <GPIO_setupPinDirection+0x66>
    2386:	85 c0       	rjmp	.+266    	; 0x2492 <GPIO_setupPinDirection+0x170>
    2388:	af c0       	rjmp	.+350    	; 0x24e8 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    238a:	8b 81       	ldd	r24, Y+3	; 0x03
    238c:	81 30       	cpi	r24, 0x01	; 1
    238e:	a1 f4       	brne	.+40     	; 0x23b8 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    2390:	aa e3       	ldi	r26, 0x3A	; 58
    2392:	b0 e0       	ldi	r27, 0x00	; 0
    2394:	ea e3       	ldi	r30, 0x3A	; 58
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	80 81       	ld	r24, Z
    239a:	48 2f       	mov	r20, r24
    239c:	8a 81       	ldd	r24, Y+2	; 0x02
    239e:	28 2f       	mov	r18, r24
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	02 2e       	mov	r0, r18
    23a8:	02 c0       	rjmp	.+4      	; 0x23ae <GPIO_setupPinDirection+0x8c>
    23aa:	88 0f       	add	r24, r24
    23ac:	99 1f       	adc	r25, r25
    23ae:	0a 94       	dec	r0
    23b0:	e2 f7       	brpl	.-8      	; 0x23aa <GPIO_setupPinDirection+0x88>
    23b2:	84 2b       	or	r24, r20
    23b4:	8c 93       	st	X, r24
    23b6:	98 c0       	rjmp	.+304    	; 0x24e8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    23b8:	aa e3       	ldi	r26, 0x3A	; 58
    23ba:	b0 e0       	ldi	r27, 0x00	; 0
    23bc:	ea e3       	ldi	r30, 0x3A	; 58
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	80 81       	ld	r24, Z
    23c2:	48 2f       	mov	r20, r24
    23c4:	8a 81       	ldd	r24, Y+2	; 0x02
    23c6:	28 2f       	mov	r18, r24
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	02 2e       	mov	r0, r18
    23d0:	02 c0       	rjmp	.+4      	; 0x23d6 <GPIO_setupPinDirection+0xb4>
    23d2:	88 0f       	add	r24, r24
    23d4:	99 1f       	adc	r25, r25
    23d6:	0a 94       	dec	r0
    23d8:	e2 f7       	brpl	.-8      	; 0x23d2 <GPIO_setupPinDirection+0xb0>
    23da:	80 95       	com	r24
    23dc:	84 23       	and	r24, r20
    23de:	8c 93       	st	X, r24
    23e0:	83 c0       	rjmp	.+262    	; 0x24e8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    23e2:	8b 81       	ldd	r24, Y+3	; 0x03
    23e4:	81 30       	cpi	r24, 0x01	; 1
    23e6:	a1 f4       	brne	.+40     	; 0x2410 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    23e8:	a7 e3       	ldi	r26, 0x37	; 55
    23ea:	b0 e0       	ldi	r27, 0x00	; 0
    23ec:	e7 e3       	ldi	r30, 0x37	; 55
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	80 81       	ld	r24, Z
    23f2:	48 2f       	mov	r20, r24
    23f4:	8a 81       	ldd	r24, Y+2	; 0x02
    23f6:	28 2f       	mov	r18, r24
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	02 2e       	mov	r0, r18
    2400:	02 c0       	rjmp	.+4      	; 0x2406 <GPIO_setupPinDirection+0xe4>
    2402:	88 0f       	add	r24, r24
    2404:	99 1f       	adc	r25, r25
    2406:	0a 94       	dec	r0
    2408:	e2 f7       	brpl	.-8      	; 0x2402 <GPIO_setupPinDirection+0xe0>
    240a:	84 2b       	or	r24, r20
    240c:	8c 93       	st	X, r24
    240e:	6c c0       	rjmp	.+216    	; 0x24e8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    2410:	a7 e3       	ldi	r26, 0x37	; 55
    2412:	b0 e0       	ldi	r27, 0x00	; 0
    2414:	e7 e3       	ldi	r30, 0x37	; 55
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	80 81       	ld	r24, Z
    241a:	48 2f       	mov	r20, r24
    241c:	8a 81       	ldd	r24, Y+2	; 0x02
    241e:	28 2f       	mov	r18, r24
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	02 2e       	mov	r0, r18
    2428:	02 c0       	rjmp	.+4      	; 0x242e <GPIO_setupPinDirection+0x10c>
    242a:	88 0f       	add	r24, r24
    242c:	99 1f       	adc	r25, r25
    242e:	0a 94       	dec	r0
    2430:	e2 f7       	brpl	.-8      	; 0x242a <GPIO_setupPinDirection+0x108>
    2432:	80 95       	com	r24
    2434:	84 23       	and	r24, r20
    2436:	8c 93       	st	X, r24
    2438:	57 c0       	rjmp	.+174    	; 0x24e8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    243a:	8b 81       	ldd	r24, Y+3	; 0x03
    243c:	81 30       	cpi	r24, 0x01	; 1
    243e:	a1 f4       	brne	.+40     	; 0x2468 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    2440:	a4 e3       	ldi	r26, 0x34	; 52
    2442:	b0 e0       	ldi	r27, 0x00	; 0
    2444:	e4 e3       	ldi	r30, 0x34	; 52
    2446:	f0 e0       	ldi	r31, 0x00	; 0
    2448:	80 81       	ld	r24, Z
    244a:	48 2f       	mov	r20, r24
    244c:	8a 81       	ldd	r24, Y+2	; 0x02
    244e:	28 2f       	mov	r18, r24
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	02 2e       	mov	r0, r18
    2458:	02 c0       	rjmp	.+4      	; 0x245e <GPIO_setupPinDirection+0x13c>
    245a:	88 0f       	add	r24, r24
    245c:	99 1f       	adc	r25, r25
    245e:	0a 94       	dec	r0
    2460:	e2 f7       	brpl	.-8      	; 0x245a <GPIO_setupPinDirection+0x138>
    2462:	84 2b       	or	r24, r20
    2464:	8c 93       	st	X, r24
    2466:	40 c0       	rjmp	.+128    	; 0x24e8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    2468:	a4 e3       	ldi	r26, 0x34	; 52
    246a:	b0 e0       	ldi	r27, 0x00	; 0
    246c:	e4 e3       	ldi	r30, 0x34	; 52
    246e:	f0 e0       	ldi	r31, 0x00	; 0
    2470:	80 81       	ld	r24, Z
    2472:	48 2f       	mov	r20, r24
    2474:	8a 81       	ldd	r24, Y+2	; 0x02
    2476:	28 2f       	mov	r18, r24
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	02 2e       	mov	r0, r18
    2480:	02 c0       	rjmp	.+4      	; 0x2486 <GPIO_setupPinDirection+0x164>
    2482:	88 0f       	add	r24, r24
    2484:	99 1f       	adc	r25, r25
    2486:	0a 94       	dec	r0
    2488:	e2 f7       	brpl	.-8      	; 0x2482 <GPIO_setupPinDirection+0x160>
    248a:	80 95       	com	r24
    248c:	84 23       	and	r24, r20
    248e:	8c 93       	st	X, r24
    2490:	2b c0       	rjmp	.+86     	; 0x24e8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    2492:	8b 81       	ldd	r24, Y+3	; 0x03
    2494:	81 30       	cpi	r24, 0x01	; 1
    2496:	a1 f4       	brne	.+40     	; 0x24c0 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    2498:	a1 e3       	ldi	r26, 0x31	; 49
    249a:	b0 e0       	ldi	r27, 0x00	; 0
    249c:	e1 e3       	ldi	r30, 0x31	; 49
    249e:	f0 e0       	ldi	r31, 0x00	; 0
    24a0:	80 81       	ld	r24, Z
    24a2:	48 2f       	mov	r20, r24
    24a4:	8a 81       	ldd	r24, Y+2	; 0x02
    24a6:	28 2f       	mov	r18, r24
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	02 2e       	mov	r0, r18
    24b0:	02 c0       	rjmp	.+4      	; 0x24b6 <GPIO_setupPinDirection+0x194>
    24b2:	88 0f       	add	r24, r24
    24b4:	99 1f       	adc	r25, r25
    24b6:	0a 94       	dec	r0
    24b8:	e2 f7       	brpl	.-8      	; 0x24b2 <GPIO_setupPinDirection+0x190>
    24ba:	84 2b       	or	r24, r20
    24bc:	8c 93       	st	X, r24
    24be:	14 c0       	rjmp	.+40     	; 0x24e8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    24c0:	a1 e3       	ldi	r26, 0x31	; 49
    24c2:	b0 e0       	ldi	r27, 0x00	; 0
    24c4:	e1 e3       	ldi	r30, 0x31	; 49
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 81       	ld	r24, Z
    24ca:	48 2f       	mov	r20, r24
    24cc:	8a 81       	ldd	r24, Y+2	; 0x02
    24ce:	28 2f       	mov	r18, r24
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	02 2e       	mov	r0, r18
    24d8:	02 c0       	rjmp	.+4      	; 0x24de <GPIO_setupPinDirection+0x1bc>
    24da:	88 0f       	add	r24, r24
    24dc:	99 1f       	adc	r25, r25
    24de:	0a 94       	dec	r0
    24e0:	e2 f7       	brpl	.-8      	; 0x24da <GPIO_setupPinDirection+0x1b8>
    24e2:	80 95       	com	r24
    24e4:	84 23       	and	r24, r20
    24e6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    24e8:	0f 90       	pop	r0
    24ea:	0f 90       	pop	r0
    24ec:	0f 90       	pop	r0
    24ee:	0f 90       	pop	r0
    24f0:	0f 90       	pop	r0
    24f2:	cf 91       	pop	r28
    24f4:	df 91       	pop	r29
    24f6:	08 95       	ret

000024f8 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    24f8:	df 93       	push	r29
    24fa:	cf 93       	push	r28
    24fc:	00 d0       	rcall	.+0      	; 0x24fe <GPIO_writePin+0x6>
    24fe:	00 d0       	rcall	.+0      	; 0x2500 <GPIO_writePin+0x8>
    2500:	0f 92       	push	r0
    2502:	cd b7       	in	r28, 0x3d	; 61
    2504:	de b7       	in	r29, 0x3e	; 62
    2506:	89 83       	std	Y+1, r24	; 0x01
    2508:	6a 83       	std	Y+2, r22	; 0x02
    250a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    250c:	8a 81       	ldd	r24, Y+2	; 0x02
    250e:	88 30       	cpi	r24, 0x08	; 8
    2510:	08 f0       	brcs	.+2      	; 0x2514 <GPIO_writePin+0x1c>
    2512:	d5 c0       	rjmp	.+426    	; 0x26be <GPIO_writePin+0x1c6>
    2514:	89 81       	ldd	r24, Y+1	; 0x01
    2516:	84 30       	cpi	r24, 0x04	; 4
    2518:	08 f0       	brcs	.+2      	; 0x251c <GPIO_writePin+0x24>
    251a:	d1 c0       	rjmp	.+418    	; 0x26be <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    251c:	89 81       	ldd	r24, Y+1	; 0x01
    251e:	28 2f       	mov	r18, r24
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	3d 83       	std	Y+5, r19	; 0x05
    2524:	2c 83       	std	Y+4, r18	; 0x04
    2526:	8c 81       	ldd	r24, Y+4	; 0x04
    2528:	9d 81       	ldd	r25, Y+5	; 0x05
    252a:	81 30       	cpi	r24, 0x01	; 1
    252c:	91 05       	cpc	r25, r1
    252e:	09 f4       	brne	.+2      	; 0x2532 <GPIO_writePin+0x3a>
    2530:	43 c0       	rjmp	.+134    	; 0x25b8 <GPIO_writePin+0xc0>
    2532:	2c 81       	ldd	r18, Y+4	; 0x04
    2534:	3d 81       	ldd	r19, Y+5	; 0x05
    2536:	22 30       	cpi	r18, 0x02	; 2
    2538:	31 05       	cpc	r19, r1
    253a:	2c f4       	brge	.+10     	; 0x2546 <GPIO_writePin+0x4e>
    253c:	8c 81       	ldd	r24, Y+4	; 0x04
    253e:	9d 81       	ldd	r25, Y+5	; 0x05
    2540:	00 97       	sbiw	r24, 0x00	; 0
    2542:	71 f0       	breq	.+28     	; 0x2560 <GPIO_writePin+0x68>
    2544:	bc c0       	rjmp	.+376    	; 0x26be <GPIO_writePin+0x1c6>
    2546:	2c 81       	ldd	r18, Y+4	; 0x04
    2548:	3d 81       	ldd	r19, Y+5	; 0x05
    254a:	22 30       	cpi	r18, 0x02	; 2
    254c:	31 05       	cpc	r19, r1
    254e:	09 f4       	brne	.+2      	; 0x2552 <GPIO_writePin+0x5a>
    2550:	5f c0       	rjmp	.+190    	; 0x2610 <GPIO_writePin+0x118>
    2552:	8c 81       	ldd	r24, Y+4	; 0x04
    2554:	9d 81       	ldd	r25, Y+5	; 0x05
    2556:	83 30       	cpi	r24, 0x03	; 3
    2558:	91 05       	cpc	r25, r1
    255a:	09 f4       	brne	.+2      	; 0x255e <GPIO_writePin+0x66>
    255c:	85 c0       	rjmp	.+266    	; 0x2668 <GPIO_writePin+0x170>
    255e:	af c0       	rjmp	.+350    	; 0x26be <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    2560:	8b 81       	ldd	r24, Y+3	; 0x03
    2562:	81 30       	cpi	r24, 0x01	; 1
    2564:	a1 f4       	brne	.+40     	; 0x258e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    2566:	ab e3       	ldi	r26, 0x3B	; 59
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	eb e3       	ldi	r30, 0x3B	; 59
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	48 2f       	mov	r20, r24
    2572:	8a 81       	ldd	r24, Y+2	; 0x02
    2574:	28 2f       	mov	r18, r24
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	81 e0       	ldi	r24, 0x01	; 1
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	02 2e       	mov	r0, r18
    257e:	02 c0       	rjmp	.+4      	; 0x2584 <GPIO_writePin+0x8c>
    2580:	88 0f       	add	r24, r24
    2582:	99 1f       	adc	r25, r25
    2584:	0a 94       	dec	r0
    2586:	e2 f7       	brpl	.-8      	; 0x2580 <GPIO_writePin+0x88>
    2588:	84 2b       	or	r24, r20
    258a:	8c 93       	st	X, r24
    258c:	98 c0       	rjmp	.+304    	; 0x26be <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    258e:	ab e3       	ldi	r26, 0x3B	; 59
    2590:	b0 e0       	ldi	r27, 0x00	; 0
    2592:	eb e3       	ldi	r30, 0x3B	; 59
    2594:	f0 e0       	ldi	r31, 0x00	; 0
    2596:	80 81       	ld	r24, Z
    2598:	48 2f       	mov	r20, r24
    259a:	8a 81       	ldd	r24, Y+2	; 0x02
    259c:	28 2f       	mov	r18, r24
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	81 e0       	ldi	r24, 0x01	; 1
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	02 2e       	mov	r0, r18
    25a6:	02 c0       	rjmp	.+4      	; 0x25ac <GPIO_writePin+0xb4>
    25a8:	88 0f       	add	r24, r24
    25aa:	99 1f       	adc	r25, r25
    25ac:	0a 94       	dec	r0
    25ae:	e2 f7       	brpl	.-8      	; 0x25a8 <GPIO_writePin+0xb0>
    25b0:	80 95       	com	r24
    25b2:	84 23       	and	r24, r20
    25b4:	8c 93       	st	X, r24
    25b6:	83 c0       	rjmp	.+262    	; 0x26be <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    25b8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ba:	81 30       	cpi	r24, 0x01	; 1
    25bc:	a1 f4       	brne	.+40     	; 0x25e6 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    25be:	a8 e3       	ldi	r26, 0x38	; 56
    25c0:	b0 e0       	ldi	r27, 0x00	; 0
    25c2:	e8 e3       	ldi	r30, 0x38	; 56
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	80 81       	ld	r24, Z
    25c8:	48 2f       	mov	r20, r24
    25ca:	8a 81       	ldd	r24, Y+2	; 0x02
    25cc:	28 2f       	mov	r18, r24
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	02 2e       	mov	r0, r18
    25d6:	02 c0       	rjmp	.+4      	; 0x25dc <GPIO_writePin+0xe4>
    25d8:	88 0f       	add	r24, r24
    25da:	99 1f       	adc	r25, r25
    25dc:	0a 94       	dec	r0
    25de:	e2 f7       	brpl	.-8      	; 0x25d8 <GPIO_writePin+0xe0>
    25e0:	84 2b       	or	r24, r20
    25e2:	8c 93       	st	X, r24
    25e4:	6c c0       	rjmp	.+216    	; 0x26be <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    25e6:	a8 e3       	ldi	r26, 0x38	; 56
    25e8:	b0 e0       	ldi	r27, 0x00	; 0
    25ea:	e8 e3       	ldi	r30, 0x38	; 56
    25ec:	f0 e0       	ldi	r31, 0x00	; 0
    25ee:	80 81       	ld	r24, Z
    25f0:	48 2f       	mov	r20, r24
    25f2:	8a 81       	ldd	r24, Y+2	; 0x02
    25f4:	28 2f       	mov	r18, r24
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	81 e0       	ldi	r24, 0x01	; 1
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	02 2e       	mov	r0, r18
    25fe:	02 c0       	rjmp	.+4      	; 0x2604 <GPIO_writePin+0x10c>
    2600:	88 0f       	add	r24, r24
    2602:	99 1f       	adc	r25, r25
    2604:	0a 94       	dec	r0
    2606:	e2 f7       	brpl	.-8      	; 0x2600 <GPIO_writePin+0x108>
    2608:	80 95       	com	r24
    260a:	84 23       	and	r24, r20
    260c:	8c 93       	st	X, r24
    260e:	57 c0       	rjmp	.+174    	; 0x26be <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2610:	8b 81       	ldd	r24, Y+3	; 0x03
    2612:	81 30       	cpi	r24, 0x01	; 1
    2614:	a1 f4       	brne	.+40     	; 0x263e <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    2616:	a5 e3       	ldi	r26, 0x35	; 53
    2618:	b0 e0       	ldi	r27, 0x00	; 0
    261a:	e5 e3       	ldi	r30, 0x35	; 53
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	80 81       	ld	r24, Z
    2620:	48 2f       	mov	r20, r24
    2622:	8a 81       	ldd	r24, Y+2	; 0x02
    2624:	28 2f       	mov	r18, r24
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	81 e0       	ldi	r24, 0x01	; 1
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	02 2e       	mov	r0, r18
    262e:	02 c0       	rjmp	.+4      	; 0x2634 <GPIO_writePin+0x13c>
    2630:	88 0f       	add	r24, r24
    2632:	99 1f       	adc	r25, r25
    2634:	0a 94       	dec	r0
    2636:	e2 f7       	brpl	.-8      	; 0x2630 <GPIO_writePin+0x138>
    2638:	84 2b       	or	r24, r20
    263a:	8c 93       	st	X, r24
    263c:	40 c0       	rjmp	.+128    	; 0x26be <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    263e:	a5 e3       	ldi	r26, 0x35	; 53
    2640:	b0 e0       	ldi	r27, 0x00	; 0
    2642:	e5 e3       	ldi	r30, 0x35	; 53
    2644:	f0 e0       	ldi	r31, 0x00	; 0
    2646:	80 81       	ld	r24, Z
    2648:	48 2f       	mov	r20, r24
    264a:	8a 81       	ldd	r24, Y+2	; 0x02
    264c:	28 2f       	mov	r18, r24
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	02 2e       	mov	r0, r18
    2656:	02 c0       	rjmp	.+4      	; 0x265c <GPIO_writePin+0x164>
    2658:	88 0f       	add	r24, r24
    265a:	99 1f       	adc	r25, r25
    265c:	0a 94       	dec	r0
    265e:	e2 f7       	brpl	.-8      	; 0x2658 <GPIO_writePin+0x160>
    2660:	80 95       	com	r24
    2662:	84 23       	and	r24, r20
    2664:	8c 93       	st	X, r24
    2666:	2b c0       	rjmp	.+86     	; 0x26be <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2668:	8b 81       	ldd	r24, Y+3	; 0x03
    266a:	81 30       	cpi	r24, 0x01	; 1
    266c:	a1 f4       	brne	.+40     	; 0x2696 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    266e:	a2 e3       	ldi	r26, 0x32	; 50
    2670:	b0 e0       	ldi	r27, 0x00	; 0
    2672:	e2 e3       	ldi	r30, 0x32	; 50
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	80 81       	ld	r24, Z
    2678:	48 2f       	mov	r20, r24
    267a:	8a 81       	ldd	r24, Y+2	; 0x02
    267c:	28 2f       	mov	r18, r24
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	02 2e       	mov	r0, r18
    2686:	02 c0       	rjmp	.+4      	; 0x268c <GPIO_writePin+0x194>
    2688:	88 0f       	add	r24, r24
    268a:	99 1f       	adc	r25, r25
    268c:	0a 94       	dec	r0
    268e:	e2 f7       	brpl	.-8      	; 0x2688 <GPIO_writePin+0x190>
    2690:	84 2b       	or	r24, r20
    2692:	8c 93       	st	X, r24
    2694:	14 c0       	rjmp	.+40     	; 0x26be <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2696:	a2 e3       	ldi	r26, 0x32	; 50
    2698:	b0 e0       	ldi	r27, 0x00	; 0
    269a:	e2 e3       	ldi	r30, 0x32	; 50
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	80 81       	ld	r24, Z
    26a0:	48 2f       	mov	r20, r24
    26a2:	8a 81       	ldd	r24, Y+2	; 0x02
    26a4:	28 2f       	mov	r18, r24
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	02 2e       	mov	r0, r18
    26ae:	02 c0       	rjmp	.+4      	; 0x26b4 <GPIO_writePin+0x1bc>
    26b0:	88 0f       	add	r24, r24
    26b2:	99 1f       	adc	r25, r25
    26b4:	0a 94       	dec	r0
    26b6:	e2 f7       	brpl	.-8      	; 0x26b0 <GPIO_writePin+0x1b8>
    26b8:	80 95       	com	r24
    26ba:	84 23       	and	r24, r20
    26bc:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    26be:	0f 90       	pop	r0
    26c0:	0f 90       	pop	r0
    26c2:	0f 90       	pop	r0
    26c4:	0f 90       	pop	r0
    26c6:	0f 90       	pop	r0
    26c8:	cf 91       	pop	r28
    26ca:	df 91       	pop	r29
    26cc:	08 95       	ret

000026ce <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    26ce:	df 93       	push	r29
    26d0:	cf 93       	push	r28
    26d2:	00 d0       	rcall	.+0      	; 0x26d4 <GPIO_readPin+0x6>
    26d4:	00 d0       	rcall	.+0      	; 0x26d6 <GPIO_readPin+0x8>
    26d6:	0f 92       	push	r0
    26d8:	cd b7       	in	r28, 0x3d	; 61
    26da:	de b7       	in	r29, 0x3e	; 62
    26dc:	8a 83       	std	Y+2, r24	; 0x02
    26de:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    26e0:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    26e2:	8b 81       	ldd	r24, Y+3	; 0x03
    26e4:	88 30       	cpi	r24, 0x08	; 8
    26e6:	08 f0       	brcs	.+2      	; 0x26ea <GPIO_readPin+0x1c>
    26e8:	84 c0       	rjmp	.+264    	; 0x27f2 <GPIO_readPin+0x124>
    26ea:	8a 81       	ldd	r24, Y+2	; 0x02
    26ec:	84 30       	cpi	r24, 0x04	; 4
    26ee:	08 f0       	brcs	.+2      	; 0x26f2 <GPIO_readPin+0x24>
    26f0:	80 c0       	rjmp	.+256    	; 0x27f2 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    26f2:	8a 81       	ldd	r24, Y+2	; 0x02
    26f4:	28 2f       	mov	r18, r24
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	3d 83       	std	Y+5, r19	; 0x05
    26fa:	2c 83       	std	Y+4, r18	; 0x04
    26fc:	4c 81       	ldd	r20, Y+4	; 0x04
    26fe:	5d 81       	ldd	r21, Y+5	; 0x05
    2700:	41 30       	cpi	r20, 0x01	; 1
    2702:	51 05       	cpc	r21, r1
    2704:	79 f1       	breq	.+94     	; 0x2764 <GPIO_readPin+0x96>
    2706:	8c 81       	ldd	r24, Y+4	; 0x04
    2708:	9d 81       	ldd	r25, Y+5	; 0x05
    270a:	82 30       	cpi	r24, 0x02	; 2
    270c:	91 05       	cpc	r25, r1
    270e:	34 f4       	brge	.+12     	; 0x271c <GPIO_readPin+0x4e>
    2710:	2c 81       	ldd	r18, Y+4	; 0x04
    2712:	3d 81       	ldd	r19, Y+5	; 0x05
    2714:	21 15       	cp	r18, r1
    2716:	31 05       	cpc	r19, r1
    2718:	69 f0       	breq	.+26     	; 0x2734 <GPIO_readPin+0x66>
    271a:	6b c0       	rjmp	.+214    	; 0x27f2 <GPIO_readPin+0x124>
    271c:	4c 81       	ldd	r20, Y+4	; 0x04
    271e:	5d 81       	ldd	r21, Y+5	; 0x05
    2720:	42 30       	cpi	r20, 0x02	; 2
    2722:	51 05       	cpc	r21, r1
    2724:	b9 f1       	breq	.+110    	; 0x2794 <GPIO_readPin+0xc6>
    2726:	8c 81       	ldd	r24, Y+4	; 0x04
    2728:	9d 81       	ldd	r25, Y+5	; 0x05
    272a:	83 30       	cpi	r24, 0x03	; 3
    272c:	91 05       	cpc	r25, r1
    272e:	09 f4       	brne	.+2      	; 0x2732 <GPIO_readPin+0x64>
    2730:	49 c0       	rjmp	.+146    	; 0x27c4 <GPIO_readPin+0xf6>
    2732:	5f c0       	rjmp	.+190    	; 0x27f2 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2734:	e9 e3       	ldi	r30, 0x39	; 57
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	80 81       	ld	r24, Z
    273a:	28 2f       	mov	r18, r24
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	8b 81       	ldd	r24, Y+3	; 0x03
    2740:	88 2f       	mov	r24, r24
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	a9 01       	movw	r20, r18
    2746:	02 c0       	rjmp	.+4      	; 0x274c <GPIO_readPin+0x7e>
    2748:	55 95       	asr	r21
    274a:	47 95       	ror	r20
    274c:	8a 95       	dec	r24
    274e:	e2 f7       	brpl	.-8      	; 0x2748 <GPIO_readPin+0x7a>
    2750:	ca 01       	movw	r24, r20
    2752:	81 70       	andi	r24, 0x01	; 1
    2754:	90 70       	andi	r25, 0x00	; 0
    2756:	88 23       	and	r24, r24
    2758:	19 f0       	breq	.+6      	; 0x2760 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	89 83       	std	Y+1, r24	; 0x01
    275e:	49 c0       	rjmp	.+146    	; 0x27f2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2760:	19 82       	std	Y+1, r1	; 0x01
    2762:	47 c0       	rjmp	.+142    	; 0x27f2 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2764:	e6 e3       	ldi	r30, 0x36	; 54
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	80 81       	ld	r24, Z
    276a:	28 2f       	mov	r18, r24
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	8b 81       	ldd	r24, Y+3	; 0x03
    2770:	88 2f       	mov	r24, r24
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	a9 01       	movw	r20, r18
    2776:	02 c0       	rjmp	.+4      	; 0x277c <GPIO_readPin+0xae>
    2778:	55 95       	asr	r21
    277a:	47 95       	ror	r20
    277c:	8a 95       	dec	r24
    277e:	e2 f7       	brpl	.-8      	; 0x2778 <GPIO_readPin+0xaa>
    2780:	ca 01       	movw	r24, r20
    2782:	81 70       	andi	r24, 0x01	; 1
    2784:	90 70       	andi	r25, 0x00	; 0
    2786:	88 23       	and	r24, r24
    2788:	19 f0       	breq	.+6      	; 0x2790 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	89 83       	std	Y+1, r24	; 0x01
    278e:	31 c0       	rjmp	.+98     	; 0x27f2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2790:	19 82       	std	Y+1, r1	; 0x01
    2792:	2f c0       	rjmp	.+94     	; 0x27f2 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2794:	e3 e3       	ldi	r30, 0x33	; 51
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	80 81       	ld	r24, Z
    279a:	28 2f       	mov	r18, r24
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	8b 81       	ldd	r24, Y+3	; 0x03
    27a0:	88 2f       	mov	r24, r24
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	a9 01       	movw	r20, r18
    27a6:	02 c0       	rjmp	.+4      	; 0x27ac <GPIO_readPin+0xde>
    27a8:	55 95       	asr	r21
    27aa:	47 95       	ror	r20
    27ac:	8a 95       	dec	r24
    27ae:	e2 f7       	brpl	.-8      	; 0x27a8 <GPIO_readPin+0xda>
    27b0:	ca 01       	movw	r24, r20
    27b2:	81 70       	andi	r24, 0x01	; 1
    27b4:	90 70       	andi	r25, 0x00	; 0
    27b6:	88 23       	and	r24, r24
    27b8:	19 f0       	breq	.+6      	; 0x27c0 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	89 83       	std	Y+1, r24	; 0x01
    27be:	19 c0       	rjmp	.+50     	; 0x27f2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    27c0:	19 82       	std	Y+1, r1	; 0x01
    27c2:	17 c0       	rjmp	.+46     	; 0x27f2 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    27c4:	e0 e3       	ldi	r30, 0x30	; 48
    27c6:	f0 e0       	ldi	r31, 0x00	; 0
    27c8:	80 81       	ld	r24, Z
    27ca:	28 2f       	mov	r18, r24
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	8b 81       	ldd	r24, Y+3	; 0x03
    27d0:	88 2f       	mov	r24, r24
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	a9 01       	movw	r20, r18
    27d6:	02 c0       	rjmp	.+4      	; 0x27dc <GPIO_readPin+0x10e>
    27d8:	55 95       	asr	r21
    27da:	47 95       	ror	r20
    27dc:	8a 95       	dec	r24
    27de:	e2 f7       	brpl	.-8      	; 0x27d8 <GPIO_readPin+0x10a>
    27e0:	ca 01       	movw	r24, r20
    27e2:	81 70       	andi	r24, 0x01	; 1
    27e4:	90 70       	andi	r25, 0x00	; 0
    27e6:	88 23       	and	r24, r24
    27e8:	19 f0       	breq	.+6      	; 0x27f0 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    27ea:	81 e0       	ldi	r24, 0x01	; 1
    27ec:	89 83       	std	Y+1, r24	; 0x01
    27ee:	01 c0       	rjmp	.+2      	; 0x27f2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    27f0:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    27f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    27f4:	0f 90       	pop	r0
    27f6:	0f 90       	pop	r0
    27f8:	0f 90       	pop	r0
    27fa:	0f 90       	pop	r0
    27fc:	0f 90       	pop	r0
    27fe:	cf 91       	pop	r28
    2800:	df 91       	pop	r29
    2802:	08 95       	ret

00002804 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2804:	df 93       	push	r29
    2806:	cf 93       	push	r28
    2808:	00 d0       	rcall	.+0      	; 0x280a <GPIO_setupPortDirection+0x6>
    280a:	00 d0       	rcall	.+0      	; 0x280c <GPIO_setupPortDirection+0x8>
    280c:	cd b7       	in	r28, 0x3d	; 61
    280e:	de b7       	in	r29, 0x3e	; 62
    2810:	89 83       	std	Y+1, r24	; 0x01
    2812:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2814:	89 81       	ldd	r24, Y+1	; 0x01
    2816:	84 30       	cpi	r24, 0x04	; 4
    2818:	90 f5       	brcc	.+100    	; 0x287e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    281a:	89 81       	ldd	r24, Y+1	; 0x01
    281c:	28 2f       	mov	r18, r24
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	3c 83       	std	Y+4, r19	; 0x04
    2822:	2b 83       	std	Y+3, r18	; 0x03
    2824:	8b 81       	ldd	r24, Y+3	; 0x03
    2826:	9c 81       	ldd	r25, Y+4	; 0x04
    2828:	81 30       	cpi	r24, 0x01	; 1
    282a:	91 05       	cpc	r25, r1
    282c:	d1 f0       	breq	.+52     	; 0x2862 <GPIO_setupPortDirection+0x5e>
    282e:	2b 81       	ldd	r18, Y+3	; 0x03
    2830:	3c 81       	ldd	r19, Y+4	; 0x04
    2832:	22 30       	cpi	r18, 0x02	; 2
    2834:	31 05       	cpc	r19, r1
    2836:	2c f4       	brge	.+10     	; 0x2842 <GPIO_setupPortDirection+0x3e>
    2838:	8b 81       	ldd	r24, Y+3	; 0x03
    283a:	9c 81       	ldd	r25, Y+4	; 0x04
    283c:	00 97       	sbiw	r24, 0x00	; 0
    283e:	61 f0       	breq	.+24     	; 0x2858 <GPIO_setupPortDirection+0x54>
    2840:	1e c0       	rjmp	.+60     	; 0x287e <GPIO_setupPortDirection+0x7a>
    2842:	2b 81       	ldd	r18, Y+3	; 0x03
    2844:	3c 81       	ldd	r19, Y+4	; 0x04
    2846:	22 30       	cpi	r18, 0x02	; 2
    2848:	31 05       	cpc	r19, r1
    284a:	81 f0       	breq	.+32     	; 0x286c <GPIO_setupPortDirection+0x68>
    284c:	8b 81       	ldd	r24, Y+3	; 0x03
    284e:	9c 81       	ldd	r25, Y+4	; 0x04
    2850:	83 30       	cpi	r24, 0x03	; 3
    2852:	91 05       	cpc	r25, r1
    2854:	81 f0       	breq	.+32     	; 0x2876 <GPIO_setupPortDirection+0x72>
    2856:	13 c0       	rjmp	.+38     	; 0x287e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2858:	ea e3       	ldi	r30, 0x3A	; 58
    285a:	f0 e0       	ldi	r31, 0x00	; 0
    285c:	8a 81       	ldd	r24, Y+2	; 0x02
    285e:	80 83       	st	Z, r24
    2860:	0e c0       	rjmp	.+28     	; 0x287e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2862:	e7 e3       	ldi	r30, 0x37	; 55
    2864:	f0 e0       	ldi	r31, 0x00	; 0
    2866:	8a 81       	ldd	r24, Y+2	; 0x02
    2868:	80 83       	st	Z, r24
    286a:	09 c0       	rjmp	.+18     	; 0x287e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    286c:	e4 e3       	ldi	r30, 0x34	; 52
    286e:	f0 e0       	ldi	r31, 0x00	; 0
    2870:	8a 81       	ldd	r24, Y+2	; 0x02
    2872:	80 83       	st	Z, r24
    2874:	04 c0       	rjmp	.+8      	; 0x287e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2876:	e1 e3       	ldi	r30, 0x31	; 49
    2878:	f0 e0       	ldi	r31, 0x00	; 0
    287a:	8a 81       	ldd	r24, Y+2	; 0x02
    287c:	80 83       	st	Z, r24
			break;
		}
	}
}
    287e:	0f 90       	pop	r0
    2880:	0f 90       	pop	r0
    2882:	0f 90       	pop	r0
    2884:	0f 90       	pop	r0
    2886:	cf 91       	pop	r28
    2888:	df 91       	pop	r29
    288a:	08 95       	ret

0000288c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    288c:	df 93       	push	r29
    288e:	cf 93       	push	r28
    2890:	00 d0       	rcall	.+0      	; 0x2892 <GPIO_writePort+0x6>
    2892:	00 d0       	rcall	.+0      	; 0x2894 <GPIO_writePort+0x8>
    2894:	cd b7       	in	r28, 0x3d	; 61
    2896:	de b7       	in	r29, 0x3e	; 62
    2898:	89 83       	std	Y+1, r24	; 0x01
    289a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    289c:	89 81       	ldd	r24, Y+1	; 0x01
    289e:	84 30       	cpi	r24, 0x04	; 4
    28a0:	90 f5       	brcc	.+100    	; 0x2906 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    28a2:	89 81       	ldd	r24, Y+1	; 0x01
    28a4:	28 2f       	mov	r18, r24
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	3c 83       	std	Y+4, r19	; 0x04
    28aa:	2b 83       	std	Y+3, r18	; 0x03
    28ac:	8b 81       	ldd	r24, Y+3	; 0x03
    28ae:	9c 81       	ldd	r25, Y+4	; 0x04
    28b0:	81 30       	cpi	r24, 0x01	; 1
    28b2:	91 05       	cpc	r25, r1
    28b4:	d1 f0       	breq	.+52     	; 0x28ea <GPIO_writePort+0x5e>
    28b6:	2b 81       	ldd	r18, Y+3	; 0x03
    28b8:	3c 81       	ldd	r19, Y+4	; 0x04
    28ba:	22 30       	cpi	r18, 0x02	; 2
    28bc:	31 05       	cpc	r19, r1
    28be:	2c f4       	brge	.+10     	; 0x28ca <GPIO_writePort+0x3e>
    28c0:	8b 81       	ldd	r24, Y+3	; 0x03
    28c2:	9c 81       	ldd	r25, Y+4	; 0x04
    28c4:	00 97       	sbiw	r24, 0x00	; 0
    28c6:	61 f0       	breq	.+24     	; 0x28e0 <GPIO_writePort+0x54>
    28c8:	1e c0       	rjmp	.+60     	; 0x2906 <GPIO_writePort+0x7a>
    28ca:	2b 81       	ldd	r18, Y+3	; 0x03
    28cc:	3c 81       	ldd	r19, Y+4	; 0x04
    28ce:	22 30       	cpi	r18, 0x02	; 2
    28d0:	31 05       	cpc	r19, r1
    28d2:	81 f0       	breq	.+32     	; 0x28f4 <GPIO_writePort+0x68>
    28d4:	8b 81       	ldd	r24, Y+3	; 0x03
    28d6:	9c 81       	ldd	r25, Y+4	; 0x04
    28d8:	83 30       	cpi	r24, 0x03	; 3
    28da:	91 05       	cpc	r25, r1
    28dc:	81 f0       	breq	.+32     	; 0x28fe <GPIO_writePort+0x72>
    28de:	13 c0       	rjmp	.+38     	; 0x2906 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    28e0:	eb e3       	ldi	r30, 0x3B	; 59
    28e2:	f0 e0       	ldi	r31, 0x00	; 0
    28e4:	8a 81       	ldd	r24, Y+2	; 0x02
    28e6:	80 83       	st	Z, r24
    28e8:	0e c0       	rjmp	.+28     	; 0x2906 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    28ea:	e8 e3       	ldi	r30, 0x38	; 56
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	8a 81       	ldd	r24, Y+2	; 0x02
    28f0:	80 83       	st	Z, r24
    28f2:	09 c0       	rjmp	.+18     	; 0x2906 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    28f4:	e5 e3       	ldi	r30, 0x35	; 53
    28f6:	f0 e0       	ldi	r31, 0x00	; 0
    28f8:	8a 81       	ldd	r24, Y+2	; 0x02
    28fa:	80 83       	st	Z, r24
    28fc:	04 c0       	rjmp	.+8      	; 0x2906 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    28fe:	e2 e3       	ldi	r30, 0x32	; 50
    2900:	f0 e0       	ldi	r31, 0x00	; 0
    2902:	8a 81       	ldd	r24, Y+2	; 0x02
    2904:	80 83       	st	Z, r24
			break;
		}
	}
}
    2906:	0f 90       	pop	r0
    2908:	0f 90       	pop	r0
    290a:	0f 90       	pop	r0
    290c:	0f 90       	pop	r0
    290e:	cf 91       	pop	r28
    2910:	df 91       	pop	r29
    2912:	08 95       	ret

00002914 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2914:	df 93       	push	r29
    2916:	cf 93       	push	r28
    2918:	00 d0       	rcall	.+0      	; 0x291a <GPIO_readPort+0x6>
    291a:	00 d0       	rcall	.+0      	; 0x291c <GPIO_readPort+0x8>
    291c:	cd b7       	in	r28, 0x3d	; 61
    291e:	de b7       	in	r29, 0x3e	; 62
    2920:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2922:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2924:	8a 81       	ldd	r24, Y+2	; 0x02
    2926:	84 30       	cpi	r24, 0x04	; 4
    2928:	90 f5       	brcc	.+100    	; 0x298e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    292a:	8a 81       	ldd	r24, Y+2	; 0x02
    292c:	28 2f       	mov	r18, r24
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	3c 83       	std	Y+4, r19	; 0x04
    2932:	2b 83       	std	Y+3, r18	; 0x03
    2934:	8b 81       	ldd	r24, Y+3	; 0x03
    2936:	9c 81       	ldd	r25, Y+4	; 0x04
    2938:	81 30       	cpi	r24, 0x01	; 1
    293a:	91 05       	cpc	r25, r1
    293c:	d1 f0       	breq	.+52     	; 0x2972 <GPIO_readPort+0x5e>
    293e:	2b 81       	ldd	r18, Y+3	; 0x03
    2940:	3c 81       	ldd	r19, Y+4	; 0x04
    2942:	22 30       	cpi	r18, 0x02	; 2
    2944:	31 05       	cpc	r19, r1
    2946:	2c f4       	brge	.+10     	; 0x2952 <GPIO_readPort+0x3e>
    2948:	8b 81       	ldd	r24, Y+3	; 0x03
    294a:	9c 81       	ldd	r25, Y+4	; 0x04
    294c:	00 97       	sbiw	r24, 0x00	; 0
    294e:	61 f0       	breq	.+24     	; 0x2968 <GPIO_readPort+0x54>
    2950:	1e c0       	rjmp	.+60     	; 0x298e <GPIO_readPort+0x7a>
    2952:	2b 81       	ldd	r18, Y+3	; 0x03
    2954:	3c 81       	ldd	r19, Y+4	; 0x04
    2956:	22 30       	cpi	r18, 0x02	; 2
    2958:	31 05       	cpc	r19, r1
    295a:	81 f0       	breq	.+32     	; 0x297c <GPIO_readPort+0x68>
    295c:	8b 81       	ldd	r24, Y+3	; 0x03
    295e:	9c 81       	ldd	r25, Y+4	; 0x04
    2960:	83 30       	cpi	r24, 0x03	; 3
    2962:	91 05       	cpc	r25, r1
    2964:	81 f0       	breq	.+32     	; 0x2986 <GPIO_readPort+0x72>
    2966:	13 c0       	rjmp	.+38     	; 0x298e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2968:	e9 e3       	ldi	r30, 0x39	; 57
    296a:	f0 e0       	ldi	r31, 0x00	; 0
    296c:	80 81       	ld	r24, Z
    296e:	89 83       	std	Y+1, r24	; 0x01
    2970:	0e c0       	rjmp	.+28     	; 0x298e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2972:	e6 e3       	ldi	r30, 0x36	; 54
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	80 81       	ld	r24, Z
    2978:	89 83       	std	Y+1, r24	; 0x01
    297a:	09 c0       	rjmp	.+18     	; 0x298e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    297c:	e3 e3       	ldi	r30, 0x33	; 51
    297e:	f0 e0       	ldi	r31, 0x00	; 0
    2980:	80 81       	ld	r24, Z
    2982:	89 83       	std	Y+1, r24	; 0x01
    2984:	04 c0       	rjmp	.+8      	; 0x298e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2986:	e0 e3       	ldi	r30, 0x30	; 48
    2988:	f0 e0       	ldi	r31, 0x00	; 0
    298a:	80 81       	ld	r24, Z
    298c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    298e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2990:	0f 90       	pop	r0
    2992:	0f 90       	pop	r0
    2994:	0f 90       	pop	r0
    2996:	0f 90       	pop	r0
    2998:	cf 91       	pop	r28
    299a:	df 91       	pop	r29
    299c:	08 95       	ret

0000299e <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    299e:	df 93       	push	r29
    29a0:	cf 93       	push	r28
    29a2:	cd b7       	in	r28, 0x3d	; 61
    29a4:	de b7       	in	r29, 0x3e	; 62
    29a6:	60 97       	sbiw	r28, 0x10	; 16
    29a8:	0f b6       	in	r0, 0x3f	; 63
    29aa:	f8 94       	cli
    29ac:	de bf       	out	0x3e, r29	; 62
    29ae:	0f be       	out	0x3f, r0	; 63
    29b0:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID  , PIN_INPUT);
    29b2:	81 e0       	ldi	r24, 0x01	; 1
    29b4:	60 e0       	ldi	r22, 0x00	; 0
    29b6:	40 e0       	ldi	r20, 0x00	; 0
    29b8:	0e 94 91 11 	call	0x2322	; 0x2322 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	61 e0       	ldi	r22, 0x01	; 1
    29c0:	40 e0       	ldi	r20, 0x00	; 0
    29c2:	0e 94 91 11 	call	0x2322	; 0x2322 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    29c6:	81 e0       	ldi	r24, 0x01	; 1
    29c8:	62 e0       	ldi	r22, 0x02	; 2
    29ca:	40 e0       	ldi	r20, 0x00	; 0
    29cc:	0e 94 91 11 	call	0x2322	; 0x2322 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    29d0:	81 e0       	ldi	r24, 0x01	; 1
    29d2:	63 e0       	ldi	r22, 0x03	; 3
    29d4:	40 e0       	ldi	r20, 0x00	; 0
    29d6:	0e 94 91 11 	call	0x2322	; 0x2322 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID  , PIN_INPUT);
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	64 e0       	ldi	r22, 0x04	; 4
    29de:	40 e0       	ldi	r20, 0x00	; 0
    29e0:	0e 94 91 11 	call	0x2322	; 0x2322 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    29e4:	81 e0       	ldi	r24, 0x01	; 1
    29e6:	65 e0       	ldi	r22, 0x05	; 5
    29e8:	40 e0       	ldi	r20, 0x00	; 0
    29ea:	0e 94 91 11 	call	0x2322	; 0x2322 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	66 e0       	ldi	r22, 0x06	; 6
    29f2:	40 e0       	ldi	r20, 0x00	; 0
    29f4:	0e 94 91 11 	call	0x2322	; 0x2322 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	67 e0       	ldi	r22, 0x07	; 7
    29fc:	40 e0       	ldi	r20, 0x00	; 0
    29fe:	0e 94 91 11 	call	0x2322	; 0x2322 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2a02:	1f 86       	std	Y+15, r1	; 0x0f
    2a04:	ab c0       	rjmp	.+342    	; 0x2b5c <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	6f 85       	ldd	r22, Y+15	; 0x0f
    2a0a:	41 e0       	ldi	r20, 0x01	; 1
    2a0c:	0e 94 91 11 	call	0x2322	; 0x2322 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2a10:	81 e0       	ldi	r24, 0x01	; 1
    2a12:	6f 85       	ldd	r22, Y+15	; 0x0f
    2a14:	40 e0       	ldi	r20, 0x00	; 0
    2a16:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2a1a:	18 8a       	std	Y+16, r1	; 0x10
    2a1c:	22 c0       	rjmp	.+68     	; 0x2a62 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    2a1e:	88 89       	ldd	r24, Y+16	; 0x10
    2a20:	98 2f       	mov	r25, r24
    2a22:	9c 5f       	subi	r25, 0xFC	; 252
    2a24:	81 e0       	ldi	r24, 0x01	; 1
    2a26:	69 2f       	mov	r22, r25
    2a28:	0e 94 67 13 	call	0x26ce	; 0x26ce <GPIO_readPin>
    2a2c:	88 23       	and	r24, r24
    2a2e:	b1 f4       	brne	.+44     	; 0x2a5c <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2a30:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a32:	88 2f       	mov	r24, r24
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	88 0f       	add	r24, r24
    2a38:	99 1f       	adc	r25, r25
    2a3a:	88 0f       	add	r24, r24
    2a3c:	99 1f       	adc	r25, r25
    2a3e:	98 2f       	mov	r25, r24
    2a40:	88 89       	ldd	r24, Y+16	; 0x10
    2a42:	89 0f       	add	r24, r25
    2a44:	8f 5f       	subi	r24, 0xFF	; 255
    2a46:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    2a4a:	60 96       	adiw	r28, 0x10	; 16
    2a4c:	0f b6       	in	r0, 0x3f	; 63
    2a4e:	f8 94       	cli
    2a50:	de bf       	out	0x3e, r29	; 62
    2a52:	0f be       	out	0x3f, r0	; 63
    2a54:	cd bf       	out	0x3d, r28	; 61
    2a56:	cf 91       	pop	r28
    2a58:	df 91       	pop	r29
    2a5a:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2a5c:	88 89       	ldd	r24, Y+16	; 0x10
    2a5e:	8f 5f       	subi	r24, 0xFF	; 255
    2a60:	88 8b       	std	Y+16, r24	; 0x10
    2a62:	88 89       	ldd	r24, Y+16	; 0x10
    2a64:	84 30       	cpi	r24, 0x04	; 4
    2a66:	d8 f2       	brcs	.-74     	; 0x2a1e <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	6f 85       	ldd	r22, Y+15	; 0x0f
    2a6c:	40 e0       	ldi	r20, 0x00	; 0
    2a6e:	0e 94 91 11 	call	0x2322	; 0x2322 <GPIO_setupPinDirection>
    2a72:	80 e0       	ldi	r24, 0x00	; 0
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	a0 ea       	ldi	r26, 0xA0	; 160
    2a78:	b0 e4       	ldi	r27, 0x40	; 64
    2a7a:	8b 87       	std	Y+11, r24	; 0x0b
    2a7c:	9c 87       	std	Y+12, r25	; 0x0c
    2a7e:	ad 87       	std	Y+13, r26	; 0x0d
    2a80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a82:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a84:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a86:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a88:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	4a ef       	ldi	r20, 0xFA	; 250
    2a90:	54 e4       	ldi	r21, 0x44	; 68
    2a92:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2a96:	dc 01       	movw	r26, r24
    2a98:	cb 01       	movw	r24, r22
    2a9a:	8f 83       	std	Y+7, r24	; 0x07
    2a9c:	98 87       	std	Y+8, r25	; 0x08
    2a9e:	a9 87       	std	Y+9, r26	; 0x09
    2aa0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2aa2:	6f 81       	ldd	r22, Y+7	; 0x07
    2aa4:	78 85       	ldd	r23, Y+8	; 0x08
    2aa6:	89 85       	ldd	r24, Y+9	; 0x09
    2aa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	40 e8       	ldi	r20, 0x80	; 128
    2ab0:	5f e3       	ldi	r21, 0x3F	; 63
    2ab2:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2ab6:	88 23       	and	r24, r24
    2ab8:	2c f4       	brge	.+10     	; 0x2ac4 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    2aba:	81 e0       	ldi	r24, 0x01	; 1
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	9e 83       	std	Y+6, r25	; 0x06
    2ac0:	8d 83       	std	Y+5, r24	; 0x05
    2ac2:	3f c0       	rjmp	.+126    	; 0x2b42 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    2ac4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ac6:	78 85       	ldd	r23, Y+8	; 0x08
    2ac8:	89 85       	ldd	r24, Y+9	; 0x09
    2aca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2acc:	20 e0       	ldi	r18, 0x00	; 0
    2ace:	3f ef       	ldi	r19, 0xFF	; 255
    2ad0:	4f e7       	ldi	r20, 0x7F	; 127
    2ad2:	57 e4       	ldi	r21, 0x47	; 71
    2ad4:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    2ad8:	18 16       	cp	r1, r24
    2ada:	4c f5       	brge	.+82     	; 0x2b2e <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2adc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ade:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ae0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ae2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ae4:	20 e0       	ldi	r18, 0x00	; 0
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	40 e2       	ldi	r20, 0x20	; 32
    2aea:	51 e4       	ldi	r21, 0x41	; 65
    2aec:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2af0:	dc 01       	movw	r26, r24
    2af2:	cb 01       	movw	r24, r22
    2af4:	bc 01       	movw	r22, r24
    2af6:	cd 01       	movw	r24, r26
    2af8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2afc:	dc 01       	movw	r26, r24
    2afe:	cb 01       	movw	r24, r22
    2b00:	9e 83       	std	Y+6, r25	; 0x06
    2b02:	8d 83       	std	Y+5, r24	; 0x05
    2b04:	0f c0       	rjmp	.+30     	; 0x2b24 <KEYPAD_getPressedKey+0x186>
    2b06:	88 ec       	ldi	r24, 0xC8	; 200
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	9c 83       	std	Y+4, r25	; 0x04
    2b0c:	8b 83       	std	Y+3, r24	; 0x03
    2b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b10:	9c 81       	ldd	r25, Y+4	; 0x04
    2b12:	01 97       	sbiw	r24, 0x01	; 1
    2b14:	f1 f7       	brne	.-4      	; 0x2b12 <KEYPAD_getPressedKey+0x174>
    2b16:	9c 83       	std	Y+4, r25	; 0x04
    2b18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b1e:	01 97       	sbiw	r24, 0x01	; 1
    2b20:	9e 83       	std	Y+6, r25	; 0x06
    2b22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b24:	8d 81       	ldd	r24, Y+5	; 0x05
    2b26:	9e 81       	ldd	r25, Y+6	; 0x06
    2b28:	00 97       	sbiw	r24, 0x00	; 0
    2b2a:	69 f7       	brne	.-38     	; 0x2b06 <KEYPAD_getPressedKey+0x168>
    2b2c:	14 c0       	rjmp	.+40     	; 0x2b56 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b2e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b30:	78 85       	ldd	r23, Y+8	; 0x08
    2b32:	89 85       	ldd	r24, Y+9	; 0x09
    2b34:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b36:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2b3a:	dc 01       	movw	r26, r24
    2b3c:	cb 01       	movw	r24, r22
    2b3e:	9e 83       	std	Y+6, r25	; 0x06
    2b40:	8d 83       	std	Y+5, r24	; 0x05
    2b42:	8d 81       	ldd	r24, Y+5	; 0x05
    2b44:	9e 81       	ldd	r25, Y+6	; 0x06
    2b46:	9a 83       	std	Y+2, r25	; 0x02
    2b48:	89 83       	std	Y+1, r24	; 0x01
    2b4a:	89 81       	ldd	r24, Y+1	; 0x01
    2b4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b4e:	01 97       	sbiw	r24, 0x01	; 1
    2b50:	f1 f7       	brne	.-4      	; 0x2b4e <KEYPAD_getPressedKey+0x1b0>
    2b52:	9a 83       	std	Y+2, r25	; 0x02
    2b54:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2b56:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b58:	8f 5f       	subi	r24, 0xFF	; 255
    2b5a:	8f 87       	std	Y+15, r24	; 0x0f
    2b5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b5e:	84 30       	cpi	r24, 0x04	; 4
    2b60:	08 f4       	brcc	.+2      	; 0x2b64 <KEYPAD_getPressedKey+0x1c6>
    2b62:	51 cf       	rjmp	.-350    	; 0x2a06 <KEYPAD_getPressedKey+0x68>
    2b64:	4e cf       	rjmp	.-356    	; 0x2a02 <KEYPAD_getPressedKey+0x64>

00002b66 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2b66:	df 93       	push	r29
    2b68:	cf 93       	push	r28
    2b6a:	00 d0       	rcall	.+0      	; 0x2b6c <KEYPAD_4x4_adjustKeyNumber+0x6>
    2b6c:	00 d0       	rcall	.+0      	; 0x2b6e <KEYPAD_4x4_adjustKeyNumber+0x8>
    2b6e:	cd b7       	in	r28, 0x3d	; 61
    2b70:	de b7       	in	r29, 0x3e	; 62
    2b72:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2b74:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2b76:	8a 81       	ldd	r24, Y+2	; 0x02
    2b78:	28 2f       	mov	r18, r24
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	3c 83       	std	Y+4, r19	; 0x04
    2b7e:	2b 83       	std	Y+3, r18	; 0x03
    2b80:	8b 81       	ldd	r24, Y+3	; 0x03
    2b82:	9c 81       	ldd	r25, Y+4	; 0x04
    2b84:	88 30       	cpi	r24, 0x08	; 8
    2b86:	91 05       	cpc	r25, r1
    2b88:	09 f4       	brne	.+2      	; 0x2b8c <KEYPAD_4x4_adjustKeyNumber+0x26>
    2b8a:	70 c0       	rjmp	.+224    	; 0x2c6c <KEYPAD_4x4_adjustKeyNumber+0x106>
    2b8c:	2b 81       	ldd	r18, Y+3	; 0x03
    2b8e:	3c 81       	ldd	r19, Y+4	; 0x04
    2b90:	29 30       	cpi	r18, 0x09	; 9
    2b92:	31 05       	cpc	r19, r1
    2b94:	5c f5       	brge	.+86     	; 0x2bec <KEYPAD_4x4_adjustKeyNumber+0x86>
    2b96:	8b 81       	ldd	r24, Y+3	; 0x03
    2b98:	9c 81       	ldd	r25, Y+4	; 0x04
    2b9a:	84 30       	cpi	r24, 0x04	; 4
    2b9c:	91 05       	cpc	r25, r1
    2b9e:	09 f4       	brne	.+2      	; 0x2ba2 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2ba0:	59 c0       	rjmp	.+178    	; 0x2c54 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2ba2:	2b 81       	ldd	r18, Y+3	; 0x03
    2ba4:	3c 81       	ldd	r19, Y+4	; 0x04
    2ba6:	25 30       	cpi	r18, 0x05	; 5
    2ba8:	31 05       	cpc	r19, r1
    2baa:	9c f4       	brge	.+38     	; 0x2bd2 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2bac:	8b 81       	ldd	r24, Y+3	; 0x03
    2bae:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb0:	82 30       	cpi	r24, 0x02	; 2
    2bb2:	91 05       	cpc	r25, r1
    2bb4:	09 f4       	brne	.+2      	; 0x2bb8 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2bb6:	48 c0       	rjmp	.+144    	; 0x2c48 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2bb8:	2b 81       	ldd	r18, Y+3	; 0x03
    2bba:	3c 81       	ldd	r19, Y+4	; 0x04
    2bbc:	23 30       	cpi	r18, 0x03	; 3
    2bbe:	31 05       	cpc	r19, r1
    2bc0:	0c f0       	brlt	.+2      	; 0x2bc4 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2bc2:	45 c0       	rjmp	.+138    	; 0x2c4e <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc6:	9c 81       	ldd	r25, Y+4	; 0x04
    2bc8:	81 30       	cpi	r24, 0x01	; 1
    2bca:	91 05       	cpc	r25, r1
    2bcc:	09 f4       	brne	.+2      	; 0x2bd0 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2bce:	39 c0       	rjmp	.+114    	; 0x2c42 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2bd0:	67 c0       	rjmp	.+206    	; 0x2ca0 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2bd2:	2b 81       	ldd	r18, Y+3	; 0x03
    2bd4:	3c 81       	ldd	r19, Y+4	; 0x04
    2bd6:	26 30       	cpi	r18, 0x06	; 6
    2bd8:	31 05       	cpc	r19, r1
    2bda:	09 f4       	brne	.+2      	; 0x2bde <KEYPAD_4x4_adjustKeyNumber+0x78>
    2bdc:	41 c0       	rjmp	.+130    	; 0x2c60 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2bde:	8b 81       	ldd	r24, Y+3	; 0x03
    2be0:	9c 81       	ldd	r25, Y+4	; 0x04
    2be2:	87 30       	cpi	r24, 0x07	; 7
    2be4:	91 05       	cpc	r25, r1
    2be6:	0c f0       	brlt	.+2      	; 0x2bea <KEYPAD_4x4_adjustKeyNumber+0x84>
    2be8:	3e c0       	rjmp	.+124    	; 0x2c66 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2bea:	37 c0       	rjmp	.+110    	; 0x2c5a <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2bec:	2b 81       	ldd	r18, Y+3	; 0x03
    2bee:	3c 81       	ldd	r19, Y+4	; 0x04
    2bf0:	2c 30       	cpi	r18, 0x0C	; 12
    2bf2:	31 05       	cpc	r19, r1
    2bf4:	09 f4       	brne	.+2      	; 0x2bf8 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2bf6:	46 c0       	rjmp	.+140    	; 0x2c84 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bfa:	9c 81       	ldd	r25, Y+4	; 0x04
    2bfc:	8d 30       	cpi	r24, 0x0D	; 13
    2bfe:	91 05       	cpc	r25, r1
    2c00:	5c f4       	brge	.+22     	; 0x2c18 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2c02:	2b 81       	ldd	r18, Y+3	; 0x03
    2c04:	3c 81       	ldd	r19, Y+4	; 0x04
    2c06:	2a 30       	cpi	r18, 0x0A	; 10
    2c08:	31 05       	cpc	r19, r1
    2c0a:	b1 f1       	breq	.+108    	; 0x2c78 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c10:	8b 30       	cpi	r24, 0x0B	; 11
    2c12:	91 05       	cpc	r25, r1
    2c14:	a4 f5       	brge	.+104    	; 0x2c7e <KEYPAD_4x4_adjustKeyNumber+0x118>
    2c16:	2d c0       	rjmp	.+90     	; 0x2c72 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2c18:	2b 81       	ldd	r18, Y+3	; 0x03
    2c1a:	3c 81       	ldd	r19, Y+4	; 0x04
    2c1c:	2e 30       	cpi	r18, 0x0E	; 14
    2c1e:	31 05       	cpc	r19, r1
    2c20:	b9 f1       	breq	.+110    	; 0x2c90 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2c22:	8b 81       	ldd	r24, Y+3	; 0x03
    2c24:	9c 81       	ldd	r25, Y+4	; 0x04
    2c26:	8e 30       	cpi	r24, 0x0E	; 14
    2c28:	91 05       	cpc	r25, r1
    2c2a:	7c f1       	brlt	.+94     	; 0x2c8a <KEYPAD_4x4_adjustKeyNumber+0x124>
    2c2c:	2b 81       	ldd	r18, Y+3	; 0x03
    2c2e:	3c 81       	ldd	r19, Y+4	; 0x04
    2c30:	2f 30       	cpi	r18, 0x0F	; 15
    2c32:	31 05       	cpc	r19, r1
    2c34:	79 f1       	breq	.+94     	; 0x2c94 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2c36:	8b 81       	ldd	r24, Y+3	; 0x03
    2c38:	9c 81       	ldd	r25, Y+4	; 0x04
    2c3a:	80 31       	cpi	r24, 0x10	; 16
    2c3c:	91 05       	cpc	r25, r1
    2c3e:	69 f1       	breq	.+90     	; 0x2c9a <KEYPAD_4x4_adjustKeyNumber+0x134>
    2c40:	2f c0       	rjmp	.+94     	; 0x2ca0 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2c42:	87 e0       	ldi	r24, 0x07	; 7
    2c44:	89 83       	std	Y+1, r24	; 0x01
    2c46:	2e c0       	rjmp	.+92     	; 0x2ca4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2c48:	88 e0       	ldi	r24, 0x08	; 8
    2c4a:	89 83       	std	Y+1, r24	; 0x01
    2c4c:	2b c0       	rjmp	.+86     	; 0x2ca4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2c4e:	89 e0       	ldi	r24, 0x09	; 9
    2c50:	89 83       	std	Y+1, r24	; 0x01
    2c52:	28 c0       	rjmp	.+80     	; 0x2ca4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2c54:	85 e2       	ldi	r24, 0x25	; 37
    2c56:	89 83       	std	Y+1, r24	; 0x01
    2c58:	25 c0       	rjmp	.+74     	; 0x2ca4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2c5a:	84 e0       	ldi	r24, 0x04	; 4
    2c5c:	89 83       	std	Y+1, r24	; 0x01
    2c5e:	22 c0       	rjmp	.+68     	; 0x2ca4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2c60:	85 e0       	ldi	r24, 0x05	; 5
    2c62:	89 83       	std	Y+1, r24	; 0x01
    2c64:	1f c0       	rjmp	.+62     	; 0x2ca4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2c66:	86 e0       	ldi	r24, 0x06	; 6
    2c68:	89 83       	std	Y+1, r24	; 0x01
    2c6a:	1c c0       	rjmp	.+56     	; 0x2ca4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2c6c:	8a e2       	ldi	r24, 0x2A	; 42
    2c6e:	89 83       	std	Y+1, r24	; 0x01
    2c70:	19 c0       	rjmp	.+50     	; 0x2ca4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2c72:	81 e0       	ldi	r24, 0x01	; 1
    2c74:	89 83       	std	Y+1, r24	; 0x01
    2c76:	16 c0       	rjmp	.+44     	; 0x2ca4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2c78:	82 e0       	ldi	r24, 0x02	; 2
    2c7a:	89 83       	std	Y+1, r24	; 0x01
    2c7c:	13 c0       	rjmp	.+38     	; 0x2ca4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2c7e:	83 e0       	ldi	r24, 0x03	; 3
    2c80:	89 83       	std	Y+1, r24	; 0x01
    2c82:	10 c0       	rjmp	.+32     	; 0x2ca4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2c84:	8d e2       	ldi	r24, 0x2D	; 45
    2c86:	89 83       	std	Y+1, r24	; 0x01
    2c88:	0d c0       	rjmp	.+26     	; 0x2ca4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = '#';  /* ASCII of Enter */
    2c8a:	83 e2       	ldi	r24, 0x23	; 35
    2c8c:	89 83       	std	Y+1, r24	; 0x01
    2c8e:	0a c0       	rjmp	.+20     	; 0x2ca4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2c90:	19 82       	std	Y+1, r1	; 0x01
    2c92:	08 c0       	rjmp	.+16     	; 0x2ca4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2c94:	8d e3       	ldi	r24, 0x3D	; 61
    2c96:	89 83       	std	Y+1, r24	; 0x01
    2c98:	05 c0       	rjmp	.+10     	; 0x2ca4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2c9a:	8b e2       	ldi	r24, 0x2B	; 43
    2c9c:	89 83       	std	Y+1, r24	; 0x01
    2c9e:	02 c0       	rjmp	.+4      	; 0x2ca4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca2:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2ca4:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2ca6:	0f 90       	pop	r0
    2ca8:	0f 90       	pop	r0
    2caa:	0f 90       	pop	r0
    2cac:	0f 90       	pop	r0
    2cae:	cf 91       	pop	r28
    2cb0:	df 91       	pop	r29
    2cb2:	08 95       	ret

00002cb4 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2cb4:	df 93       	push	r29
    2cb6:	cf 93       	push	r28
    2cb8:	cd b7       	in	r28, 0x3d	; 61
    2cba:	de b7       	in	r29, 0x3e	; 62
    2cbc:	2e 97       	sbiw	r28, 0x0e	; 14
    2cbe:	0f b6       	in	r0, 0x3f	; 63
    2cc0:	f8 94       	cli
    2cc2:	de bf       	out	0x3e, r29	; 62
    2cc4:	0f be       	out	0x3f, r0	; 63
    2cc6:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2cc8:	82 e0       	ldi	r24, 0x02	; 2
    2cca:	60 e0       	ldi	r22, 0x00	; 0
    2ccc:	41 e0       	ldi	r20, 0x01	; 1
    2cce:	0e 94 91 11 	call	0x2322	; 0x2322 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2cd2:	82 e0       	ldi	r24, 0x02	; 2
    2cd4:	61 e0       	ldi	r22, 0x01	; 1
    2cd6:	41 e0       	ldi	r20, 0x01	; 1
    2cd8:	0e 94 91 11 	call	0x2322	; 0x2322 <GPIO_setupPinDirection>
    2cdc:	80 e0       	ldi	r24, 0x00	; 0
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	a0 ea       	ldi	r26, 0xA0	; 160
    2ce2:	b1 e4       	ldi	r27, 0x41	; 65
    2ce4:	8b 87       	std	Y+11, r24	; 0x0b
    2ce6:	9c 87       	std	Y+12, r25	; 0x0c
    2ce8:	ad 87       	std	Y+13, r26	; 0x0d
    2cea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cec:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cee:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cf0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cf2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cf4:	20 e0       	ldi	r18, 0x00	; 0
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	4a ef       	ldi	r20, 0xFA	; 250
    2cfa:	54 e4       	ldi	r21, 0x44	; 68
    2cfc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2d00:	dc 01       	movw	r26, r24
    2d02:	cb 01       	movw	r24, r22
    2d04:	8f 83       	std	Y+7, r24	; 0x07
    2d06:	98 87       	std	Y+8, r25	; 0x08
    2d08:	a9 87       	std	Y+9, r26	; 0x09
    2d0a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d0e:	78 85       	ldd	r23, Y+8	; 0x08
    2d10:	89 85       	ldd	r24, Y+9	; 0x09
    2d12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	40 e8       	ldi	r20, 0x80	; 128
    2d1a:	5f e3       	ldi	r21, 0x3F	; 63
    2d1c:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2d20:	88 23       	and	r24, r24
    2d22:	2c f4       	brge	.+10     	; 0x2d2e <LCD_init+0x7a>
		__ticks = 1;
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	9e 83       	std	Y+6, r25	; 0x06
    2d2a:	8d 83       	std	Y+5, r24	; 0x05
    2d2c:	3f c0       	rjmp	.+126    	; 0x2dac <LCD_init+0xf8>
	else if (__tmp > 65535)
    2d2e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d30:	78 85       	ldd	r23, Y+8	; 0x08
    2d32:	89 85       	ldd	r24, Y+9	; 0x09
    2d34:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	3f ef       	ldi	r19, 0xFF	; 255
    2d3a:	4f e7       	ldi	r20, 0x7F	; 127
    2d3c:	57 e4       	ldi	r21, 0x47	; 71
    2d3e:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    2d42:	18 16       	cp	r1, r24
    2d44:	4c f5       	brge	.+82     	; 0x2d98 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d46:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d48:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d4e:	20 e0       	ldi	r18, 0x00	; 0
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	40 e2       	ldi	r20, 0x20	; 32
    2d54:	51 e4       	ldi	r21, 0x41	; 65
    2d56:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	bc 01       	movw	r22, r24
    2d60:	cd 01       	movw	r24, r26
    2d62:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2d66:	dc 01       	movw	r26, r24
    2d68:	cb 01       	movw	r24, r22
    2d6a:	9e 83       	std	Y+6, r25	; 0x06
    2d6c:	8d 83       	std	Y+5, r24	; 0x05
    2d6e:	0f c0       	rjmp	.+30     	; 0x2d8e <LCD_init+0xda>
    2d70:	88 ec       	ldi	r24, 0xC8	; 200
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	9c 83       	std	Y+4, r25	; 0x04
    2d76:	8b 83       	std	Y+3, r24	; 0x03
    2d78:	8b 81       	ldd	r24, Y+3	; 0x03
    2d7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d7c:	01 97       	sbiw	r24, 0x01	; 1
    2d7e:	f1 f7       	brne	.-4      	; 0x2d7c <LCD_init+0xc8>
    2d80:	9c 83       	std	Y+4, r25	; 0x04
    2d82:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d84:	8d 81       	ldd	r24, Y+5	; 0x05
    2d86:	9e 81       	ldd	r25, Y+6	; 0x06
    2d88:	01 97       	sbiw	r24, 0x01	; 1
    2d8a:	9e 83       	std	Y+6, r25	; 0x06
    2d8c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d90:	9e 81       	ldd	r25, Y+6	; 0x06
    2d92:	00 97       	sbiw	r24, 0x00	; 0
    2d94:	69 f7       	brne	.-38     	; 0x2d70 <LCD_init+0xbc>
    2d96:	14 c0       	rjmp	.+40     	; 0x2dc0 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d98:	6f 81       	ldd	r22, Y+7	; 0x07
    2d9a:	78 85       	ldd	r23, Y+8	; 0x08
    2d9c:	89 85       	ldd	r24, Y+9	; 0x09
    2d9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2da0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2da4:	dc 01       	movw	r26, r24
    2da6:	cb 01       	movw	r24, r22
    2da8:	9e 83       	std	Y+6, r25	; 0x06
    2daa:	8d 83       	std	Y+5, r24	; 0x05
    2dac:	8d 81       	ldd	r24, Y+5	; 0x05
    2dae:	9e 81       	ldd	r25, Y+6	; 0x06
    2db0:	9a 83       	std	Y+2, r25	; 0x02
    2db2:	89 83       	std	Y+1, r24	; 0x01
    2db4:	89 81       	ldd	r24, Y+1	; 0x01
    2db6:	9a 81       	ldd	r25, Y+2	; 0x02
    2db8:	01 97       	sbiw	r24, 0x01	; 1
    2dba:	f1 f7       	brne	.-4      	; 0x2db8 <LCD_init+0x104>
    2dbc:	9a 83       	std	Y+2, r25	; 0x02
    2dbe:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2dc0:	80 e0       	ldi	r24, 0x00	; 0
    2dc2:	6f ef       	ldi	r22, 0xFF	; 255
    2dc4:	0e 94 02 14 	call	0x2804	; 0x2804 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2dc8:	88 e3       	ldi	r24, 0x38	; 56
    2dca:	0e 94 f6 16 	call	0x2dec	; 0x2dec <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2dce:	8c e0       	ldi	r24, 0x0C	; 12
    2dd0:	0e 94 f6 16 	call	0x2dec	; 0x2dec <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2dd4:	81 e0       	ldi	r24, 0x01	; 1
    2dd6:	0e 94 f6 16 	call	0x2dec	; 0x2dec <LCD_sendCommand>
}
    2dda:	2e 96       	adiw	r28, 0x0e	; 14
    2ddc:	0f b6       	in	r0, 0x3f	; 63
    2dde:	f8 94       	cli
    2de0:	de bf       	out	0x3e, r29	; 62
    2de2:	0f be       	out	0x3f, r0	; 63
    2de4:	cd bf       	out	0x3d, r28	; 61
    2de6:	cf 91       	pop	r28
    2de8:	df 91       	pop	r29
    2dea:	08 95       	ret

00002dec <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2dec:	df 93       	push	r29
    2dee:	cf 93       	push	r28
    2df0:	cd b7       	in	r28, 0x3d	; 61
    2df2:	de b7       	in	r29, 0x3e	; 62
    2df4:	e9 97       	sbiw	r28, 0x39	; 57
    2df6:	0f b6       	in	r0, 0x3f	; 63
    2df8:	f8 94       	cli
    2dfa:	de bf       	out	0x3e, r29	; 62
    2dfc:	0f be       	out	0x3f, r0	; 63
    2dfe:	cd bf       	out	0x3d, r28	; 61
    2e00:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2e02:	82 e0       	ldi	r24, 0x02	; 2
    2e04:	60 e0       	ldi	r22, 0x00	; 0
    2e06:	40 e0       	ldi	r20, 0x00	; 0
    2e08:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <GPIO_writePin>
    2e0c:	80 e0       	ldi	r24, 0x00	; 0
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	a0 e8       	ldi	r26, 0x80	; 128
    2e12:	bf e3       	ldi	r27, 0x3F	; 63
    2e14:	8d ab       	std	Y+53, r24	; 0x35
    2e16:	9e ab       	std	Y+54, r25	; 0x36
    2e18:	af ab       	std	Y+55, r26	; 0x37
    2e1a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e1c:	6d a9       	ldd	r22, Y+53	; 0x35
    2e1e:	7e a9       	ldd	r23, Y+54	; 0x36
    2e20:	8f a9       	ldd	r24, Y+55	; 0x37
    2e22:	98 ad       	ldd	r25, Y+56	; 0x38
    2e24:	20 e0       	ldi	r18, 0x00	; 0
    2e26:	30 e0       	ldi	r19, 0x00	; 0
    2e28:	4a ef       	ldi	r20, 0xFA	; 250
    2e2a:	54 e4       	ldi	r21, 0x44	; 68
    2e2c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2e30:	dc 01       	movw	r26, r24
    2e32:	cb 01       	movw	r24, r22
    2e34:	89 ab       	std	Y+49, r24	; 0x31
    2e36:	9a ab       	std	Y+50, r25	; 0x32
    2e38:	ab ab       	std	Y+51, r26	; 0x33
    2e3a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e3c:	69 a9       	ldd	r22, Y+49	; 0x31
    2e3e:	7a a9       	ldd	r23, Y+50	; 0x32
    2e40:	8b a9       	ldd	r24, Y+51	; 0x33
    2e42:	9c a9       	ldd	r25, Y+52	; 0x34
    2e44:	20 e0       	ldi	r18, 0x00	; 0
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	40 e8       	ldi	r20, 0x80	; 128
    2e4a:	5f e3       	ldi	r21, 0x3F	; 63
    2e4c:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2e50:	88 23       	and	r24, r24
    2e52:	2c f4       	brge	.+10     	; 0x2e5e <LCD_sendCommand+0x72>
		__ticks = 1;
    2e54:	81 e0       	ldi	r24, 0x01	; 1
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	98 ab       	std	Y+48, r25	; 0x30
    2e5a:	8f a7       	std	Y+47, r24	; 0x2f
    2e5c:	3f c0       	rjmp	.+126    	; 0x2edc <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2e5e:	69 a9       	ldd	r22, Y+49	; 0x31
    2e60:	7a a9       	ldd	r23, Y+50	; 0x32
    2e62:	8b a9       	ldd	r24, Y+51	; 0x33
    2e64:	9c a9       	ldd	r25, Y+52	; 0x34
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	3f ef       	ldi	r19, 0xFF	; 255
    2e6a:	4f e7       	ldi	r20, 0x7F	; 127
    2e6c:	57 e4       	ldi	r21, 0x47	; 71
    2e6e:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    2e72:	18 16       	cp	r1, r24
    2e74:	4c f5       	brge	.+82     	; 0x2ec8 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e76:	6d a9       	ldd	r22, Y+53	; 0x35
    2e78:	7e a9       	ldd	r23, Y+54	; 0x36
    2e7a:	8f a9       	ldd	r24, Y+55	; 0x37
    2e7c:	98 ad       	ldd	r25, Y+56	; 0x38
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	40 e2       	ldi	r20, 0x20	; 32
    2e84:	51 e4       	ldi	r21, 0x41	; 65
    2e86:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	cb 01       	movw	r24, r22
    2e8e:	bc 01       	movw	r22, r24
    2e90:	cd 01       	movw	r24, r26
    2e92:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2e96:	dc 01       	movw	r26, r24
    2e98:	cb 01       	movw	r24, r22
    2e9a:	98 ab       	std	Y+48, r25	; 0x30
    2e9c:	8f a7       	std	Y+47, r24	; 0x2f
    2e9e:	0f c0       	rjmp	.+30     	; 0x2ebe <LCD_sendCommand+0xd2>
    2ea0:	88 ec       	ldi	r24, 0xC8	; 200
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	9e a7       	std	Y+46, r25	; 0x2e
    2ea6:	8d a7       	std	Y+45, r24	; 0x2d
    2ea8:	8d a5       	ldd	r24, Y+45	; 0x2d
    2eaa:	9e a5       	ldd	r25, Y+46	; 0x2e
    2eac:	01 97       	sbiw	r24, 0x01	; 1
    2eae:	f1 f7       	brne	.-4      	; 0x2eac <LCD_sendCommand+0xc0>
    2eb0:	9e a7       	std	Y+46, r25	; 0x2e
    2eb2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eb4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2eb6:	98 a9       	ldd	r25, Y+48	; 0x30
    2eb8:	01 97       	sbiw	r24, 0x01	; 1
    2eba:	98 ab       	std	Y+48, r25	; 0x30
    2ebc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ebe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ec0:	98 a9       	ldd	r25, Y+48	; 0x30
    2ec2:	00 97       	sbiw	r24, 0x00	; 0
    2ec4:	69 f7       	brne	.-38     	; 0x2ea0 <LCD_sendCommand+0xb4>
    2ec6:	14 c0       	rjmp	.+40     	; 0x2ef0 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ec8:	69 a9       	ldd	r22, Y+49	; 0x31
    2eca:	7a a9       	ldd	r23, Y+50	; 0x32
    2ecc:	8b a9       	ldd	r24, Y+51	; 0x33
    2ece:	9c a9       	ldd	r25, Y+52	; 0x34
    2ed0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2ed4:	dc 01       	movw	r26, r24
    2ed6:	cb 01       	movw	r24, r22
    2ed8:	98 ab       	std	Y+48, r25	; 0x30
    2eda:	8f a7       	std	Y+47, r24	; 0x2f
    2edc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ede:	98 a9       	ldd	r25, Y+48	; 0x30
    2ee0:	9c a7       	std	Y+44, r25	; 0x2c
    2ee2:	8b a7       	std	Y+43, r24	; 0x2b
    2ee4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ee6:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ee8:	01 97       	sbiw	r24, 0x01	; 1
    2eea:	f1 f7       	brne	.-4      	; 0x2ee8 <LCD_sendCommand+0xfc>
    2eec:	9c a7       	std	Y+44, r25	; 0x2c
    2eee:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2ef0:	82 e0       	ldi	r24, 0x02	; 2
    2ef2:	61 e0       	ldi	r22, 0x01	; 1
    2ef4:	41 e0       	ldi	r20, 0x01	; 1
    2ef6:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <GPIO_writePin>
    2efa:	80 e0       	ldi	r24, 0x00	; 0
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	a0 e8       	ldi	r26, 0x80	; 128
    2f00:	bf e3       	ldi	r27, 0x3F	; 63
    2f02:	8f a3       	std	Y+39, r24	; 0x27
    2f04:	98 a7       	std	Y+40, r25	; 0x28
    2f06:	a9 a7       	std	Y+41, r26	; 0x29
    2f08:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f0a:	6f a1       	ldd	r22, Y+39	; 0x27
    2f0c:	78 a5       	ldd	r23, Y+40	; 0x28
    2f0e:	89 a5       	ldd	r24, Y+41	; 0x29
    2f10:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f12:	20 e0       	ldi	r18, 0x00	; 0
    2f14:	30 e0       	ldi	r19, 0x00	; 0
    2f16:	4a ef       	ldi	r20, 0xFA	; 250
    2f18:	54 e4       	ldi	r21, 0x44	; 68
    2f1a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2f1e:	dc 01       	movw	r26, r24
    2f20:	cb 01       	movw	r24, r22
    2f22:	8b a3       	std	Y+35, r24	; 0x23
    2f24:	9c a3       	std	Y+36, r25	; 0x24
    2f26:	ad a3       	std	Y+37, r26	; 0x25
    2f28:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f2a:	6b a1       	ldd	r22, Y+35	; 0x23
    2f2c:	7c a1       	ldd	r23, Y+36	; 0x24
    2f2e:	8d a1       	ldd	r24, Y+37	; 0x25
    2f30:	9e a1       	ldd	r25, Y+38	; 0x26
    2f32:	20 e0       	ldi	r18, 0x00	; 0
    2f34:	30 e0       	ldi	r19, 0x00	; 0
    2f36:	40 e8       	ldi	r20, 0x80	; 128
    2f38:	5f e3       	ldi	r21, 0x3F	; 63
    2f3a:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2f3e:	88 23       	and	r24, r24
    2f40:	2c f4       	brge	.+10     	; 0x2f4c <LCD_sendCommand+0x160>
		__ticks = 1;
    2f42:	81 e0       	ldi	r24, 0x01	; 1
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	9a a3       	std	Y+34, r25	; 0x22
    2f48:	89 a3       	std	Y+33, r24	; 0x21
    2f4a:	3f c0       	rjmp	.+126    	; 0x2fca <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2f4c:	6b a1       	ldd	r22, Y+35	; 0x23
    2f4e:	7c a1       	ldd	r23, Y+36	; 0x24
    2f50:	8d a1       	ldd	r24, Y+37	; 0x25
    2f52:	9e a1       	ldd	r25, Y+38	; 0x26
    2f54:	20 e0       	ldi	r18, 0x00	; 0
    2f56:	3f ef       	ldi	r19, 0xFF	; 255
    2f58:	4f e7       	ldi	r20, 0x7F	; 127
    2f5a:	57 e4       	ldi	r21, 0x47	; 71
    2f5c:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    2f60:	18 16       	cp	r1, r24
    2f62:	4c f5       	brge	.+82     	; 0x2fb6 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f64:	6f a1       	ldd	r22, Y+39	; 0x27
    2f66:	78 a5       	ldd	r23, Y+40	; 0x28
    2f68:	89 a5       	ldd	r24, Y+41	; 0x29
    2f6a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f6c:	20 e0       	ldi	r18, 0x00	; 0
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	40 e2       	ldi	r20, 0x20	; 32
    2f72:	51 e4       	ldi	r21, 0x41	; 65
    2f74:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2f78:	dc 01       	movw	r26, r24
    2f7a:	cb 01       	movw	r24, r22
    2f7c:	bc 01       	movw	r22, r24
    2f7e:	cd 01       	movw	r24, r26
    2f80:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2f84:	dc 01       	movw	r26, r24
    2f86:	cb 01       	movw	r24, r22
    2f88:	9a a3       	std	Y+34, r25	; 0x22
    2f8a:	89 a3       	std	Y+33, r24	; 0x21
    2f8c:	0f c0       	rjmp	.+30     	; 0x2fac <LCD_sendCommand+0x1c0>
    2f8e:	88 ec       	ldi	r24, 0xC8	; 200
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	98 a3       	std	Y+32, r25	; 0x20
    2f94:	8f 8f       	std	Y+31, r24	; 0x1f
    2f96:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f98:	98 a1       	ldd	r25, Y+32	; 0x20
    2f9a:	01 97       	sbiw	r24, 0x01	; 1
    2f9c:	f1 f7       	brne	.-4      	; 0x2f9a <LCD_sendCommand+0x1ae>
    2f9e:	98 a3       	std	Y+32, r25	; 0x20
    2fa0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fa2:	89 a1       	ldd	r24, Y+33	; 0x21
    2fa4:	9a a1       	ldd	r25, Y+34	; 0x22
    2fa6:	01 97       	sbiw	r24, 0x01	; 1
    2fa8:	9a a3       	std	Y+34, r25	; 0x22
    2faa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fac:	89 a1       	ldd	r24, Y+33	; 0x21
    2fae:	9a a1       	ldd	r25, Y+34	; 0x22
    2fb0:	00 97       	sbiw	r24, 0x00	; 0
    2fb2:	69 f7       	brne	.-38     	; 0x2f8e <LCD_sendCommand+0x1a2>
    2fb4:	14 c0       	rjmp	.+40     	; 0x2fde <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fb6:	6b a1       	ldd	r22, Y+35	; 0x23
    2fb8:	7c a1       	ldd	r23, Y+36	; 0x24
    2fba:	8d a1       	ldd	r24, Y+37	; 0x25
    2fbc:	9e a1       	ldd	r25, Y+38	; 0x26
    2fbe:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	9a a3       	std	Y+34, r25	; 0x22
    2fc8:	89 a3       	std	Y+33, r24	; 0x21
    2fca:	89 a1       	ldd	r24, Y+33	; 0x21
    2fcc:	9a a1       	ldd	r25, Y+34	; 0x22
    2fce:	9e 8f       	std	Y+30, r25	; 0x1e
    2fd0:	8d 8f       	std	Y+29, r24	; 0x1d
    2fd2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fd4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2fd6:	01 97       	sbiw	r24, 0x01	; 1
    2fd8:	f1 f7       	brne	.-4      	; 0x2fd6 <LCD_sendCommand+0x1ea>
    2fda:	9e 8f       	std	Y+30, r25	; 0x1e
    2fdc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2fde:	80 e0       	ldi	r24, 0x00	; 0
    2fe0:	69 ad       	ldd	r22, Y+57	; 0x39
    2fe2:	0e 94 46 14 	call	0x288c	; 0x288c <GPIO_writePort>
    2fe6:	80 e0       	ldi	r24, 0x00	; 0
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	a0 e8       	ldi	r26, 0x80	; 128
    2fec:	bf e3       	ldi	r27, 0x3F	; 63
    2fee:	89 8f       	std	Y+25, r24	; 0x19
    2ff0:	9a 8f       	std	Y+26, r25	; 0x1a
    2ff2:	ab 8f       	std	Y+27, r26	; 0x1b
    2ff4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ff6:	69 8d       	ldd	r22, Y+25	; 0x19
    2ff8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ffa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ffc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ffe:	20 e0       	ldi	r18, 0x00	; 0
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	4a ef       	ldi	r20, 0xFA	; 250
    3004:	54 e4       	ldi	r21, 0x44	; 68
    3006:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    300a:	dc 01       	movw	r26, r24
    300c:	cb 01       	movw	r24, r22
    300e:	8d 8b       	std	Y+21, r24	; 0x15
    3010:	9e 8b       	std	Y+22, r25	; 0x16
    3012:	af 8b       	std	Y+23, r26	; 0x17
    3014:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3016:	6d 89       	ldd	r22, Y+21	; 0x15
    3018:	7e 89       	ldd	r23, Y+22	; 0x16
    301a:	8f 89       	ldd	r24, Y+23	; 0x17
    301c:	98 8d       	ldd	r25, Y+24	; 0x18
    301e:	20 e0       	ldi	r18, 0x00	; 0
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	40 e8       	ldi	r20, 0x80	; 128
    3024:	5f e3       	ldi	r21, 0x3F	; 63
    3026:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    302a:	88 23       	and	r24, r24
    302c:	2c f4       	brge	.+10     	; 0x3038 <LCD_sendCommand+0x24c>
		__ticks = 1;
    302e:	81 e0       	ldi	r24, 0x01	; 1
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	9c 8b       	std	Y+20, r25	; 0x14
    3034:	8b 8b       	std	Y+19, r24	; 0x13
    3036:	3f c0       	rjmp	.+126    	; 0x30b6 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    3038:	6d 89       	ldd	r22, Y+21	; 0x15
    303a:	7e 89       	ldd	r23, Y+22	; 0x16
    303c:	8f 89       	ldd	r24, Y+23	; 0x17
    303e:	98 8d       	ldd	r25, Y+24	; 0x18
    3040:	20 e0       	ldi	r18, 0x00	; 0
    3042:	3f ef       	ldi	r19, 0xFF	; 255
    3044:	4f e7       	ldi	r20, 0x7F	; 127
    3046:	57 e4       	ldi	r21, 0x47	; 71
    3048:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    304c:	18 16       	cp	r1, r24
    304e:	4c f5       	brge	.+82     	; 0x30a2 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3050:	69 8d       	ldd	r22, Y+25	; 0x19
    3052:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3054:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3056:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3058:	20 e0       	ldi	r18, 0x00	; 0
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	40 e2       	ldi	r20, 0x20	; 32
    305e:	51 e4       	ldi	r21, 0x41	; 65
    3060:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3064:	dc 01       	movw	r26, r24
    3066:	cb 01       	movw	r24, r22
    3068:	bc 01       	movw	r22, r24
    306a:	cd 01       	movw	r24, r26
    306c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3070:	dc 01       	movw	r26, r24
    3072:	cb 01       	movw	r24, r22
    3074:	9c 8b       	std	Y+20, r25	; 0x14
    3076:	8b 8b       	std	Y+19, r24	; 0x13
    3078:	0f c0       	rjmp	.+30     	; 0x3098 <LCD_sendCommand+0x2ac>
    307a:	88 ec       	ldi	r24, 0xC8	; 200
    307c:	90 e0       	ldi	r25, 0x00	; 0
    307e:	9a 8b       	std	Y+18, r25	; 0x12
    3080:	89 8b       	std	Y+17, r24	; 0x11
    3082:	89 89       	ldd	r24, Y+17	; 0x11
    3084:	9a 89       	ldd	r25, Y+18	; 0x12
    3086:	01 97       	sbiw	r24, 0x01	; 1
    3088:	f1 f7       	brne	.-4      	; 0x3086 <LCD_sendCommand+0x29a>
    308a:	9a 8b       	std	Y+18, r25	; 0x12
    308c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    308e:	8b 89       	ldd	r24, Y+19	; 0x13
    3090:	9c 89       	ldd	r25, Y+20	; 0x14
    3092:	01 97       	sbiw	r24, 0x01	; 1
    3094:	9c 8b       	std	Y+20, r25	; 0x14
    3096:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3098:	8b 89       	ldd	r24, Y+19	; 0x13
    309a:	9c 89       	ldd	r25, Y+20	; 0x14
    309c:	00 97       	sbiw	r24, 0x00	; 0
    309e:	69 f7       	brne	.-38     	; 0x307a <LCD_sendCommand+0x28e>
    30a0:	14 c0       	rjmp	.+40     	; 0x30ca <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30a2:	6d 89       	ldd	r22, Y+21	; 0x15
    30a4:	7e 89       	ldd	r23, Y+22	; 0x16
    30a6:	8f 89       	ldd	r24, Y+23	; 0x17
    30a8:	98 8d       	ldd	r25, Y+24	; 0x18
    30aa:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    30ae:	dc 01       	movw	r26, r24
    30b0:	cb 01       	movw	r24, r22
    30b2:	9c 8b       	std	Y+20, r25	; 0x14
    30b4:	8b 8b       	std	Y+19, r24	; 0x13
    30b6:	8b 89       	ldd	r24, Y+19	; 0x13
    30b8:	9c 89       	ldd	r25, Y+20	; 0x14
    30ba:	98 8b       	std	Y+16, r25	; 0x10
    30bc:	8f 87       	std	Y+15, r24	; 0x0f
    30be:	8f 85       	ldd	r24, Y+15	; 0x0f
    30c0:	98 89       	ldd	r25, Y+16	; 0x10
    30c2:	01 97       	sbiw	r24, 0x01	; 1
    30c4:	f1 f7       	brne	.-4      	; 0x30c2 <LCD_sendCommand+0x2d6>
    30c6:	98 8b       	std	Y+16, r25	; 0x10
    30c8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    30ca:	82 e0       	ldi	r24, 0x02	; 2
    30cc:	61 e0       	ldi	r22, 0x01	; 1
    30ce:	40 e0       	ldi	r20, 0x00	; 0
    30d0:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <GPIO_writePin>
    30d4:	80 e0       	ldi	r24, 0x00	; 0
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	a0 e8       	ldi	r26, 0x80	; 128
    30da:	bf e3       	ldi	r27, 0x3F	; 63
    30dc:	8b 87       	std	Y+11, r24	; 0x0b
    30de:	9c 87       	std	Y+12, r25	; 0x0c
    30e0:	ad 87       	std	Y+13, r26	; 0x0d
    30e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    30e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    30e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    30ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    30ec:	20 e0       	ldi	r18, 0x00	; 0
    30ee:	30 e0       	ldi	r19, 0x00	; 0
    30f0:	4a ef       	ldi	r20, 0xFA	; 250
    30f2:	54 e4       	ldi	r21, 0x44	; 68
    30f4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    30f8:	dc 01       	movw	r26, r24
    30fa:	cb 01       	movw	r24, r22
    30fc:	8f 83       	std	Y+7, r24	; 0x07
    30fe:	98 87       	std	Y+8, r25	; 0x08
    3100:	a9 87       	std	Y+9, r26	; 0x09
    3102:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3104:	6f 81       	ldd	r22, Y+7	; 0x07
    3106:	78 85       	ldd	r23, Y+8	; 0x08
    3108:	89 85       	ldd	r24, Y+9	; 0x09
    310a:	9a 85       	ldd	r25, Y+10	; 0x0a
    310c:	20 e0       	ldi	r18, 0x00	; 0
    310e:	30 e0       	ldi	r19, 0x00	; 0
    3110:	40 e8       	ldi	r20, 0x80	; 128
    3112:	5f e3       	ldi	r21, 0x3F	; 63
    3114:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    3118:	88 23       	and	r24, r24
    311a:	2c f4       	brge	.+10     	; 0x3126 <LCD_sendCommand+0x33a>
		__ticks = 1;
    311c:	81 e0       	ldi	r24, 0x01	; 1
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	9e 83       	std	Y+6, r25	; 0x06
    3122:	8d 83       	std	Y+5, r24	; 0x05
    3124:	3f c0       	rjmp	.+126    	; 0x31a4 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    3126:	6f 81       	ldd	r22, Y+7	; 0x07
    3128:	78 85       	ldd	r23, Y+8	; 0x08
    312a:	89 85       	ldd	r24, Y+9	; 0x09
    312c:	9a 85       	ldd	r25, Y+10	; 0x0a
    312e:	20 e0       	ldi	r18, 0x00	; 0
    3130:	3f ef       	ldi	r19, 0xFF	; 255
    3132:	4f e7       	ldi	r20, 0x7F	; 127
    3134:	57 e4       	ldi	r21, 0x47	; 71
    3136:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    313a:	18 16       	cp	r1, r24
    313c:	4c f5       	brge	.+82     	; 0x3190 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    313e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3140:	7c 85       	ldd	r23, Y+12	; 0x0c
    3142:	8d 85       	ldd	r24, Y+13	; 0x0d
    3144:	9e 85       	ldd	r25, Y+14	; 0x0e
    3146:	20 e0       	ldi	r18, 0x00	; 0
    3148:	30 e0       	ldi	r19, 0x00	; 0
    314a:	40 e2       	ldi	r20, 0x20	; 32
    314c:	51 e4       	ldi	r21, 0x41	; 65
    314e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3152:	dc 01       	movw	r26, r24
    3154:	cb 01       	movw	r24, r22
    3156:	bc 01       	movw	r22, r24
    3158:	cd 01       	movw	r24, r26
    315a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    315e:	dc 01       	movw	r26, r24
    3160:	cb 01       	movw	r24, r22
    3162:	9e 83       	std	Y+6, r25	; 0x06
    3164:	8d 83       	std	Y+5, r24	; 0x05
    3166:	0f c0       	rjmp	.+30     	; 0x3186 <LCD_sendCommand+0x39a>
    3168:	88 ec       	ldi	r24, 0xC8	; 200
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	9c 83       	std	Y+4, r25	; 0x04
    316e:	8b 83       	std	Y+3, r24	; 0x03
    3170:	8b 81       	ldd	r24, Y+3	; 0x03
    3172:	9c 81       	ldd	r25, Y+4	; 0x04
    3174:	01 97       	sbiw	r24, 0x01	; 1
    3176:	f1 f7       	brne	.-4      	; 0x3174 <LCD_sendCommand+0x388>
    3178:	9c 83       	std	Y+4, r25	; 0x04
    317a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    317c:	8d 81       	ldd	r24, Y+5	; 0x05
    317e:	9e 81       	ldd	r25, Y+6	; 0x06
    3180:	01 97       	sbiw	r24, 0x01	; 1
    3182:	9e 83       	std	Y+6, r25	; 0x06
    3184:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3186:	8d 81       	ldd	r24, Y+5	; 0x05
    3188:	9e 81       	ldd	r25, Y+6	; 0x06
    318a:	00 97       	sbiw	r24, 0x00	; 0
    318c:	69 f7       	brne	.-38     	; 0x3168 <LCD_sendCommand+0x37c>
    318e:	14 c0       	rjmp	.+40     	; 0x31b8 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3190:	6f 81       	ldd	r22, Y+7	; 0x07
    3192:	78 85       	ldd	r23, Y+8	; 0x08
    3194:	89 85       	ldd	r24, Y+9	; 0x09
    3196:	9a 85       	ldd	r25, Y+10	; 0x0a
    3198:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    319c:	dc 01       	movw	r26, r24
    319e:	cb 01       	movw	r24, r22
    31a0:	9e 83       	std	Y+6, r25	; 0x06
    31a2:	8d 83       	std	Y+5, r24	; 0x05
    31a4:	8d 81       	ldd	r24, Y+5	; 0x05
    31a6:	9e 81       	ldd	r25, Y+6	; 0x06
    31a8:	9a 83       	std	Y+2, r25	; 0x02
    31aa:	89 83       	std	Y+1, r24	; 0x01
    31ac:	89 81       	ldd	r24, Y+1	; 0x01
    31ae:	9a 81       	ldd	r25, Y+2	; 0x02
    31b0:	01 97       	sbiw	r24, 0x01	; 1
    31b2:	f1 f7       	brne	.-4      	; 0x31b0 <LCD_sendCommand+0x3c4>
    31b4:	9a 83       	std	Y+2, r25	; 0x02
    31b6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    31b8:	e9 96       	adiw	r28, 0x39	; 57
    31ba:	0f b6       	in	r0, 0x3f	; 63
    31bc:	f8 94       	cli
    31be:	de bf       	out	0x3e, r29	; 62
    31c0:	0f be       	out	0x3f, r0	; 63
    31c2:	cd bf       	out	0x3d, r28	; 61
    31c4:	cf 91       	pop	r28
    31c6:	df 91       	pop	r29
    31c8:	08 95       	ret

000031ca <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    31ca:	df 93       	push	r29
    31cc:	cf 93       	push	r28
    31ce:	cd b7       	in	r28, 0x3d	; 61
    31d0:	de b7       	in	r29, 0x3e	; 62
    31d2:	e9 97       	sbiw	r28, 0x39	; 57
    31d4:	0f b6       	in	r0, 0x3f	; 63
    31d6:	f8 94       	cli
    31d8:	de bf       	out	0x3e, r29	; 62
    31da:	0f be       	out	0x3f, r0	; 63
    31dc:	cd bf       	out	0x3d, r28	; 61
    31de:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    31e0:	82 e0       	ldi	r24, 0x02	; 2
    31e2:	60 e0       	ldi	r22, 0x00	; 0
    31e4:	41 e0       	ldi	r20, 0x01	; 1
    31e6:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <GPIO_writePin>
    31ea:	80 e0       	ldi	r24, 0x00	; 0
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	a0 e8       	ldi	r26, 0x80	; 128
    31f0:	bf e3       	ldi	r27, 0x3F	; 63
    31f2:	8d ab       	std	Y+53, r24	; 0x35
    31f4:	9e ab       	std	Y+54, r25	; 0x36
    31f6:	af ab       	std	Y+55, r26	; 0x37
    31f8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31fa:	6d a9       	ldd	r22, Y+53	; 0x35
    31fc:	7e a9       	ldd	r23, Y+54	; 0x36
    31fe:	8f a9       	ldd	r24, Y+55	; 0x37
    3200:	98 ad       	ldd	r25, Y+56	; 0x38
    3202:	20 e0       	ldi	r18, 0x00	; 0
    3204:	30 e0       	ldi	r19, 0x00	; 0
    3206:	4a ef       	ldi	r20, 0xFA	; 250
    3208:	54 e4       	ldi	r21, 0x44	; 68
    320a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    320e:	dc 01       	movw	r26, r24
    3210:	cb 01       	movw	r24, r22
    3212:	89 ab       	std	Y+49, r24	; 0x31
    3214:	9a ab       	std	Y+50, r25	; 0x32
    3216:	ab ab       	std	Y+51, r26	; 0x33
    3218:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    321a:	69 a9       	ldd	r22, Y+49	; 0x31
    321c:	7a a9       	ldd	r23, Y+50	; 0x32
    321e:	8b a9       	ldd	r24, Y+51	; 0x33
    3220:	9c a9       	ldd	r25, Y+52	; 0x34
    3222:	20 e0       	ldi	r18, 0x00	; 0
    3224:	30 e0       	ldi	r19, 0x00	; 0
    3226:	40 e8       	ldi	r20, 0x80	; 128
    3228:	5f e3       	ldi	r21, 0x3F	; 63
    322a:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    322e:	88 23       	and	r24, r24
    3230:	2c f4       	brge	.+10     	; 0x323c <LCD_displayCharacter+0x72>
		__ticks = 1;
    3232:	81 e0       	ldi	r24, 0x01	; 1
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	98 ab       	std	Y+48, r25	; 0x30
    3238:	8f a7       	std	Y+47, r24	; 0x2f
    323a:	3f c0       	rjmp	.+126    	; 0x32ba <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    323c:	69 a9       	ldd	r22, Y+49	; 0x31
    323e:	7a a9       	ldd	r23, Y+50	; 0x32
    3240:	8b a9       	ldd	r24, Y+51	; 0x33
    3242:	9c a9       	ldd	r25, Y+52	; 0x34
    3244:	20 e0       	ldi	r18, 0x00	; 0
    3246:	3f ef       	ldi	r19, 0xFF	; 255
    3248:	4f e7       	ldi	r20, 0x7F	; 127
    324a:	57 e4       	ldi	r21, 0x47	; 71
    324c:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    3250:	18 16       	cp	r1, r24
    3252:	4c f5       	brge	.+82     	; 0x32a6 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3254:	6d a9       	ldd	r22, Y+53	; 0x35
    3256:	7e a9       	ldd	r23, Y+54	; 0x36
    3258:	8f a9       	ldd	r24, Y+55	; 0x37
    325a:	98 ad       	ldd	r25, Y+56	; 0x38
    325c:	20 e0       	ldi	r18, 0x00	; 0
    325e:	30 e0       	ldi	r19, 0x00	; 0
    3260:	40 e2       	ldi	r20, 0x20	; 32
    3262:	51 e4       	ldi	r21, 0x41	; 65
    3264:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3268:	dc 01       	movw	r26, r24
    326a:	cb 01       	movw	r24, r22
    326c:	bc 01       	movw	r22, r24
    326e:	cd 01       	movw	r24, r26
    3270:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3274:	dc 01       	movw	r26, r24
    3276:	cb 01       	movw	r24, r22
    3278:	98 ab       	std	Y+48, r25	; 0x30
    327a:	8f a7       	std	Y+47, r24	; 0x2f
    327c:	0f c0       	rjmp	.+30     	; 0x329c <LCD_displayCharacter+0xd2>
    327e:	88 ec       	ldi	r24, 0xC8	; 200
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	9e a7       	std	Y+46, r25	; 0x2e
    3284:	8d a7       	std	Y+45, r24	; 0x2d
    3286:	8d a5       	ldd	r24, Y+45	; 0x2d
    3288:	9e a5       	ldd	r25, Y+46	; 0x2e
    328a:	01 97       	sbiw	r24, 0x01	; 1
    328c:	f1 f7       	brne	.-4      	; 0x328a <LCD_displayCharacter+0xc0>
    328e:	9e a7       	std	Y+46, r25	; 0x2e
    3290:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3292:	8f a5       	ldd	r24, Y+47	; 0x2f
    3294:	98 a9       	ldd	r25, Y+48	; 0x30
    3296:	01 97       	sbiw	r24, 0x01	; 1
    3298:	98 ab       	std	Y+48, r25	; 0x30
    329a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    329c:	8f a5       	ldd	r24, Y+47	; 0x2f
    329e:	98 a9       	ldd	r25, Y+48	; 0x30
    32a0:	00 97       	sbiw	r24, 0x00	; 0
    32a2:	69 f7       	brne	.-38     	; 0x327e <LCD_displayCharacter+0xb4>
    32a4:	14 c0       	rjmp	.+40     	; 0x32ce <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32a6:	69 a9       	ldd	r22, Y+49	; 0x31
    32a8:	7a a9       	ldd	r23, Y+50	; 0x32
    32aa:	8b a9       	ldd	r24, Y+51	; 0x33
    32ac:	9c a9       	ldd	r25, Y+52	; 0x34
    32ae:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    32b2:	dc 01       	movw	r26, r24
    32b4:	cb 01       	movw	r24, r22
    32b6:	98 ab       	std	Y+48, r25	; 0x30
    32b8:	8f a7       	std	Y+47, r24	; 0x2f
    32ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    32bc:	98 a9       	ldd	r25, Y+48	; 0x30
    32be:	9c a7       	std	Y+44, r25	; 0x2c
    32c0:	8b a7       	std	Y+43, r24	; 0x2b
    32c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    32c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    32c6:	01 97       	sbiw	r24, 0x01	; 1
    32c8:	f1 f7       	brne	.-4      	; 0x32c6 <LCD_displayCharacter+0xfc>
    32ca:	9c a7       	std	Y+44, r25	; 0x2c
    32cc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    32ce:	82 e0       	ldi	r24, 0x02	; 2
    32d0:	61 e0       	ldi	r22, 0x01	; 1
    32d2:	41 e0       	ldi	r20, 0x01	; 1
    32d4:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <GPIO_writePin>
    32d8:	80 e0       	ldi	r24, 0x00	; 0
    32da:	90 e0       	ldi	r25, 0x00	; 0
    32dc:	a0 e8       	ldi	r26, 0x80	; 128
    32de:	bf e3       	ldi	r27, 0x3F	; 63
    32e0:	8f a3       	std	Y+39, r24	; 0x27
    32e2:	98 a7       	std	Y+40, r25	; 0x28
    32e4:	a9 a7       	std	Y+41, r26	; 0x29
    32e6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32e8:	6f a1       	ldd	r22, Y+39	; 0x27
    32ea:	78 a5       	ldd	r23, Y+40	; 0x28
    32ec:	89 a5       	ldd	r24, Y+41	; 0x29
    32ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    32f0:	20 e0       	ldi	r18, 0x00	; 0
    32f2:	30 e0       	ldi	r19, 0x00	; 0
    32f4:	4a ef       	ldi	r20, 0xFA	; 250
    32f6:	54 e4       	ldi	r21, 0x44	; 68
    32f8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    32fc:	dc 01       	movw	r26, r24
    32fe:	cb 01       	movw	r24, r22
    3300:	8b a3       	std	Y+35, r24	; 0x23
    3302:	9c a3       	std	Y+36, r25	; 0x24
    3304:	ad a3       	std	Y+37, r26	; 0x25
    3306:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3308:	6b a1       	ldd	r22, Y+35	; 0x23
    330a:	7c a1       	ldd	r23, Y+36	; 0x24
    330c:	8d a1       	ldd	r24, Y+37	; 0x25
    330e:	9e a1       	ldd	r25, Y+38	; 0x26
    3310:	20 e0       	ldi	r18, 0x00	; 0
    3312:	30 e0       	ldi	r19, 0x00	; 0
    3314:	40 e8       	ldi	r20, 0x80	; 128
    3316:	5f e3       	ldi	r21, 0x3F	; 63
    3318:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    331c:	88 23       	and	r24, r24
    331e:	2c f4       	brge	.+10     	; 0x332a <LCD_displayCharacter+0x160>
		__ticks = 1;
    3320:	81 e0       	ldi	r24, 0x01	; 1
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	9a a3       	std	Y+34, r25	; 0x22
    3326:	89 a3       	std	Y+33, r24	; 0x21
    3328:	3f c0       	rjmp	.+126    	; 0x33a8 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    332a:	6b a1       	ldd	r22, Y+35	; 0x23
    332c:	7c a1       	ldd	r23, Y+36	; 0x24
    332e:	8d a1       	ldd	r24, Y+37	; 0x25
    3330:	9e a1       	ldd	r25, Y+38	; 0x26
    3332:	20 e0       	ldi	r18, 0x00	; 0
    3334:	3f ef       	ldi	r19, 0xFF	; 255
    3336:	4f e7       	ldi	r20, 0x7F	; 127
    3338:	57 e4       	ldi	r21, 0x47	; 71
    333a:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    333e:	18 16       	cp	r1, r24
    3340:	4c f5       	brge	.+82     	; 0x3394 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3342:	6f a1       	ldd	r22, Y+39	; 0x27
    3344:	78 a5       	ldd	r23, Y+40	; 0x28
    3346:	89 a5       	ldd	r24, Y+41	; 0x29
    3348:	9a a5       	ldd	r25, Y+42	; 0x2a
    334a:	20 e0       	ldi	r18, 0x00	; 0
    334c:	30 e0       	ldi	r19, 0x00	; 0
    334e:	40 e2       	ldi	r20, 0x20	; 32
    3350:	51 e4       	ldi	r21, 0x41	; 65
    3352:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3356:	dc 01       	movw	r26, r24
    3358:	cb 01       	movw	r24, r22
    335a:	bc 01       	movw	r22, r24
    335c:	cd 01       	movw	r24, r26
    335e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3362:	dc 01       	movw	r26, r24
    3364:	cb 01       	movw	r24, r22
    3366:	9a a3       	std	Y+34, r25	; 0x22
    3368:	89 a3       	std	Y+33, r24	; 0x21
    336a:	0f c0       	rjmp	.+30     	; 0x338a <LCD_displayCharacter+0x1c0>
    336c:	88 ec       	ldi	r24, 0xC8	; 200
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	98 a3       	std	Y+32, r25	; 0x20
    3372:	8f 8f       	std	Y+31, r24	; 0x1f
    3374:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3376:	98 a1       	ldd	r25, Y+32	; 0x20
    3378:	01 97       	sbiw	r24, 0x01	; 1
    337a:	f1 f7       	brne	.-4      	; 0x3378 <LCD_displayCharacter+0x1ae>
    337c:	98 a3       	std	Y+32, r25	; 0x20
    337e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3380:	89 a1       	ldd	r24, Y+33	; 0x21
    3382:	9a a1       	ldd	r25, Y+34	; 0x22
    3384:	01 97       	sbiw	r24, 0x01	; 1
    3386:	9a a3       	std	Y+34, r25	; 0x22
    3388:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    338a:	89 a1       	ldd	r24, Y+33	; 0x21
    338c:	9a a1       	ldd	r25, Y+34	; 0x22
    338e:	00 97       	sbiw	r24, 0x00	; 0
    3390:	69 f7       	brne	.-38     	; 0x336c <LCD_displayCharacter+0x1a2>
    3392:	14 c0       	rjmp	.+40     	; 0x33bc <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3394:	6b a1       	ldd	r22, Y+35	; 0x23
    3396:	7c a1       	ldd	r23, Y+36	; 0x24
    3398:	8d a1       	ldd	r24, Y+37	; 0x25
    339a:	9e a1       	ldd	r25, Y+38	; 0x26
    339c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    33a0:	dc 01       	movw	r26, r24
    33a2:	cb 01       	movw	r24, r22
    33a4:	9a a3       	std	Y+34, r25	; 0x22
    33a6:	89 a3       	std	Y+33, r24	; 0x21
    33a8:	89 a1       	ldd	r24, Y+33	; 0x21
    33aa:	9a a1       	ldd	r25, Y+34	; 0x22
    33ac:	9e 8f       	std	Y+30, r25	; 0x1e
    33ae:	8d 8f       	std	Y+29, r24	; 0x1d
    33b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    33b4:	01 97       	sbiw	r24, 0x01	; 1
    33b6:	f1 f7       	brne	.-4      	; 0x33b4 <LCD_displayCharacter+0x1ea>
    33b8:	9e 8f       	std	Y+30, r25	; 0x1e
    33ba:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    33bc:	80 e0       	ldi	r24, 0x00	; 0
    33be:	69 ad       	ldd	r22, Y+57	; 0x39
    33c0:	0e 94 46 14 	call	0x288c	; 0x288c <GPIO_writePort>
    33c4:	80 e0       	ldi	r24, 0x00	; 0
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	a0 e8       	ldi	r26, 0x80	; 128
    33ca:	bf e3       	ldi	r27, 0x3F	; 63
    33cc:	89 8f       	std	Y+25, r24	; 0x19
    33ce:	9a 8f       	std	Y+26, r25	; 0x1a
    33d0:	ab 8f       	std	Y+27, r26	; 0x1b
    33d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33d4:	69 8d       	ldd	r22, Y+25	; 0x19
    33d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33dc:	20 e0       	ldi	r18, 0x00	; 0
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	4a ef       	ldi	r20, 0xFA	; 250
    33e2:	54 e4       	ldi	r21, 0x44	; 68
    33e4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    33e8:	dc 01       	movw	r26, r24
    33ea:	cb 01       	movw	r24, r22
    33ec:	8d 8b       	std	Y+21, r24	; 0x15
    33ee:	9e 8b       	std	Y+22, r25	; 0x16
    33f0:	af 8b       	std	Y+23, r26	; 0x17
    33f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33f4:	6d 89       	ldd	r22, Y+21	; 0x15
    33f6:	7e 89       	ldd	r23, Y+22	; 0x16
    33f8:	8f 89       	ldd	r24, Y+23	; 0x17
    33fa:	98 8d       	ldd	r25, Y+24	; 0x18
    33fc:	20 e0       	ldi	r18, 0x00	; 0
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	40 e8       	ldi	r20, 0x80	; 128
    3402:	5f e3       	ldi	r21, 0x3F	; 63
    3404:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    3408:	88 23       	and	r24, r24
    340a:	2c f4       	brge	.+10     	; 0x3416 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    340c:	81 e0       	ldi	r24, 0x01	; 1
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	9c 8b       	std	Y+20, r25	; 0x14
    3412:	8b 8b       	std	Y+19, r24	; 0x13
    3414:	3f c0       	rjmp	.+126    	; 0x3494 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    3416:	6d 89       	ldd	r22, Y+21	; 0x15
    3418:	7e 89       	ldd	r23, Y+22	; 0x16
    341a:	8f 89       	ldd	r24, Y+23	; 0x17
    341c:	98 8d       	ldd	r25, Y+24	; 0x18
    341e:	20 e0       	ldi	r18, 0x00	; 0
    3420:	3f ef       	ldi	r19, 0xFF	; 255
    3422:	4f e7       	ldi	r20, 0x7F	; 127
    3424:	57 e4       	ldi	r21, 0x47	; 71
    3426:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    342a:	18 16       	cp	r1, r24
    342c:	4c f5       	brge	.+82     	; 0x3480 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    342e:	69 8d       	ldd	r22, Y+25	; 0x19
    3430:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3432:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3434:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3436:	20 e0       	ldi	r18, 0x00	; 0
    3438:	30 e0       	ldi	r19, 0x00	; 0
    343a:	40 e2       	ldi	r20, 0x20	; 32
    343c:	51 e4       	ldi	r21, 0x41	; 65
    343e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3442:	dc 01       	movw	r26, r24
    3444:	cb 01       	movw	r24, r22
    3446:	bc 01       	movw	r22, r24
    3448:	cd 01       	movw	r24, r26
    344a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    344e:	dc 01       	movw	r26, r24
    3450:	cb 01       	movw	r24, r22
    3452:	9c 8b       	std	Y+20, r25	; 0x14
    3454:	8b 8b       	std	Y+19, r24	; 0x13
    3456:	0f c0       	rjmp	.+30     	; 0x3476 <LCD_displayCharacter+0x2ac>
    3458:	88 ec       	ldi	r24, 0xC8	; 200
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	9a 8b       	std	Y+18, r25	; 0x12
    345e:	89 8b       	std	Y+17, r24	; 0x11
    3460:	89 89       	ldd	r24, Y+17	; 0x11
    3462:	9a 89       	ldd	r25, Y+18	; 0x12
    3464:	01 97       	sbiw	r24, 0x01	; 1
    3466:	f1 f7       	brne	.-4      	; 0x3464 <LCD_displayCharacter+0x29a>
    3468:	9a 8b       	std	Y+18, r25	; 0x12
    346a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    346c:	8b 89       	ldd	r24, Y+19	; 0x13
    346e:	9c 89       	ldd	r25, Y+20	; 0x14
    3470:	01 97       	sbiw	r24, 0x01	; 1
    3472:	9c 8b       	std	Y+20, r25	; 0x14
    3474:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3476:	8b 89       	ldd	r24, Y+19	; 0x13
    3478:	9c 89       	ldd	r25, Y+20	; 0x14
    347a:	00 97       	sbiw	r24, 0x00	; 0
    347c:	69 f7       	brne	.-38     	; 0x3458 <LCD_displayCharacter+0x28e>
    347e:	14 c0       	rjmp	.+40     	; 0x34a8 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3480:	6d 89       	ldd	r22, Y+21	; 0x15
    3482:	7e 89       	ldd	r23, Y+22	; 0x16
    3484:	8f 89       	ldd	r24, Y+23	; 0x17
    3486:	98 8d       	ldd	r25, Y+24	; 0x18
    3488:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    348c:	dc 01       	movw	r26, r24
    348e:	cb 01       	movw	r24, r22
    3490:	9c 8b       	std	Y+20, r25	; 0x14
    3492:	8b 8b       	std	Y+19, r24	; 0x13
    3494:	8b 89       	ldd	r24, Y+19	; 0x13
    3496:	9c 89       	ldd	r25, Y+20	; 0x14
    3498:	98 8b       	std	Y+16, r25	; 0x10
    349a:	8f 87       	std	Y+15, r24	; 0x0f
    349c:	8f 85       	ldd	r24, Y+15	; 0x0f
    349e:	98 89       	ldd	r25, Y+16	; 0x10
    34a0:	01 97       	sbiw	r24, 0x01	; 1
    34a2:	f1 f7       	brne	.-4      	; 0x34a0 <LCD_displayCharacter+0x2d6>
    34a4:	98 8b       	std	Y+16, r25	; 0x10
    34a6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    34a8:	82 e0       	ldi	r24, 0x02	; 2
    34aa:	61 e0       	ldi	r22, 0x01	; 1
    34ac:	40 e0       	ldi	r20, 0x00	; 0
    34ae:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <GPIO_writePin>
    34b2:	80 e0       	ldi	r24, 0x00	; 0
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	a0 e8       	ldi	r26, 0x80	; 128
    34b8:	bf e3       	ldi	r27, 0x3F	; 63
    34ba:	8b 87       	std	Y+11, r24	; 0x0b
    34bc:	9c 87       	std	Y+12, r25	; 0x0c
    34be:	ad 87       	std	Y+13, r26	; 0x0d
    34c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    34c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    34c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    34c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    34ca:	20 e0       	ldi	r18, 0x00	; 0
    34cc:	30 e0       	ldi	r19, 0x00	; 0
    34ce:	4a ef       	ldi	r20, 0xFA	; 250
    34d0:	54 e4       	ldi	r21, 0x44	; 68
    34d2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    34d6:	dc 01       	movw	r26, r24
    34d8:	cb 01       	movw	r24, r22
    34da:	8f 83       	std	Y+7, r24	; 0x07
    34dc:	98 87       	std	Y+8, r25	; 0x08
    34de:	a9 87       	std	Y+9, r26	; 0x09
    34e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34e2:	6f 81       	ldd	r22, Y+7	; 0x07
    34e4:	78 85       	ldd	r23, Y+8	; 0x08
    34e6:	89 85       	ldd	r24, Y+9	; 0x09
    34e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    34ea:	20 e0       	ldi	r18, 0x00	; 0
    34ec:	30 e0       	ldi	r19, 0x00	; 0
    34ee:	40 e8       	ldi	r20, 0x80	; 128
    34f0:	5f e3       	ldi	r21, 0x3F	; 63
    34f2:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    34f6:	88 23       	and	r24, r24
    34f8:	2c f4       	brge	.+10     	; 0x3504 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    34fa:	81 e0       	ldi	r24, 0x01	; 1
    34fc:	90 e0       	ldi	r25, 0x00	; 0
    34fe:	9e 83       	std	Y+6, r25	; 0x06
    3500:	8d 83       	std	Y+5, r24	; 0x05
    3502:	3f c0       	rjmp	.+126    	; 0x3582 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    3504:	6f 81       	ldd	r22, Y+7	; 0x07
    3506:	78 85       	ldd	r23, Y+8	; 0x08
    3508:	89 85       	ldd	r24, Y+9	; 0x09
    350a:	9a 85       	ldd	r25, Y+10	; 0x0a
    350c:	20 e0       	ldi	r18, 0x00	; 0
    350e:	3f ef       	ldi	r19, 0xFF	; 255
    3510:	4f e7       	ldi	r20, 0x7F	; 127
    3512:	57 e4       	ldi	r21, 0x47	; 71
    3514:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    3518:	18 16       	cp	r1, r24
    351a:	4c f5       	brge	.+82     	; 0x356e <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    351c:	6b 85       	ldd	r22, Y+11	; 0x0b
    351e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3520:	8d 85       	ldd	r24, Y+13	; 0x0d
    3522:	9e 85       	ldd	r25, Y+14	; 0x0e
    3524:	20 e0       	ldi	r18, 0x00	; 0
    3526:	30 e0       	ldi	r19, 0x00	; 0
    3528:	40 e2       	ldi	r20, 0x20	; 32
    352a:	51 e4       	ldi	r21, 0x41	; 65
    352c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3530:	dc 01       	movw	r26, r24
    3532:	cb 01       	movw	r24, r22
    3534:	bc 01       	movw	r22, r24
    3536:	cd 01       	movw	r24, r26
    3538:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    353c:	dc 01       	movw	r26, r24
    353e:	cb 01       	movw	r24, r22
    3540:	9e 83       	std	Y+6, r25	; 0x06
    3542:	8d 83       	std	Y+5, r24	; 0x05
    3544:	0f c0       	rjmp	.+30     	; 0x3564 <LCD_displayCharacter+0x39a>
    3546:	88 ec       	ldi	r24, 0xC8	; 200
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	9c 83       	std	Y+4, r25	; 0x04
    354c:	8b 83       	std	Y+3, r24	; 0x03
    354e:	8b 81       	ldd	r24, Y+3	; 0x03
    3550:	9c 81       	ldd	r25, Y+4	; 0x04
    3552:	01 97       	sbiw	r24, 0x01	; 1
    3554:	f1 f7       	brne	.-4      	; 0x3552 <LCD_displayCharacter+0x388>
    3556:	9c 83       	std	Y+4, r25	; 0x04
    3558:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    355a:	8d 81       	ldd	r24, Y+5	; 0x05
    355c:	9e 81       	ldd	r25, Y+6	; 0x06
    355e:	01 97       	sbiw	r24, 0x01	; 1
    3560:	9e 83       	std	Y+6, r25	; 0x06
    3562:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3564:	8d 81       	ldd	r24, Y+5	; 0x05
    3566:	9e 81       	ldd	r25, Y+6	; 0x06
    3568:	00 97       	sbiw	r24, 0x00	; 0
    356a:	69 f7       	brne	.-38     	; 0x3546 <LCD_displayCharacter+0x37c>
    356c:	14 c0       	rjmp	.+40     	; 0x3596 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    356e:	6f 81       	ldd	r22, Y+7	; 0x07
    3570:	78 85       	ldd	r23, Y+8	; 0x08
    3572:	89 85       	ldd	r24, Y+9	; 0x09
    3574:	9a 85       	ldd	r25, Y+10	; 0x0a
    3576:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    357a:	dc 01       	movw	r26, r24
    357c:	cb 01       	movw	r24, r22
    357e:	9e 83       	std	Y+6, r25	; 0x06
    3580:	8d 83       	std	Y+5, r24	; 0x05
    3582:	8d 81       	ldd	r24, Y+5	; 0x05
    3584:	9e 81       	ldd	r25, Y+6	; 0x06
    3586:	9a 83       	std	Y+2, r25	; 0x02
    3588:	89 83       	std	Y+1, r24	; 0x01
    358a:	89 81       	ldd	r24, Y+1	; 0x01
    358c:	9a 81       	ldd	r25, Y+2	; 0x02
    358e:	01 97       	sbiw	r24, 0x01	; 1
    3590:	f1 f7       	brne	.-4      	; 0x358e <LCD_displayCharacter+0x3c4>
    3592:	9a 83       	std	Y+2, r25	; 0x02
    3594:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3596:	e9 96       	adiw	r28, 0x39	; 57
    3598:	0f b6       	in	r0, 0x3f	; 63
    359a:	f8 94       	cli
    359c:	de bf       	out	0x3e, r29	; 62
    359e:	0f be       	out	0x3f, r0	; 63
    35a0:	cd bf       	out	0x3d, r28	; 61
    35a2:	cf 91       	pop	r28
    35a4:	df 91       	pop	r29
    35a6:	08 95       	ret

000035a8 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    35a8:	df 93       	push	r29
    35aa:	cf 93       	push	r28
    35ac:	00 d0       	rcall	.+0      	; 0x35ae <LCD_displayString+0x6>
    35ae:	0f 92       	push	r0
    35b0:	cd b7       	in	r28, 0x3d	; 61
    35b2:	de b7       	in	r29, 0x3e	; 62
    35b4:	9b 83       	std	Y+3, r25	; 0x03
    35b6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    35b8:	19 82       	std	Y+1, r1	; 0x01
    35ba:	0e c0       	rjmp	.+28     	; 0x35d8 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    35bc:	89 81       	ldd	r24, Y+1	; 0x01
    35be:	28 2f       	mov	r18, r24
    35c0:	30 e0       	ldi	r19, 0x00	; 0
    35c2:	8a 81       	ldd	r24, Y+2	; 0x02
    35c4:	9b 81       	ldd	r25, Y+3	; 0x03
    35c6:	fc 01       	movw	r30, r24
    35c8:	e2 0f       	add	r30, r18
    35ca:	f3 1f       	adc	r31, r19
    35cc:	80 81       	ld	r24, Z
    35ce:	0e 94 e5 18 	call	0x31ca	; 0x31ca <LCD_displayCharacter>
		i++;
    35d2:	89 81       	ldd	r24, Y+1	; 0x01
    35d4:	8f 5f       	subi	r24, 0xFF	; 255
    35d6:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    35d8:	89 81       	ldd	r24, Y+1	; 0x01
    35da:	28 2f       	mov	r18, r24
    35dc:	30 e0       	ldi	r19, 0x00	; 0
    35de:	8a 81       	ldd	r24, Y+2	; 0x02
    35e0:	9b 81       	ldd	r25, Y+3	; 0x03
    35e2:	fc 01       	movw	r30, r24
    35e4:	e2 0f       	add	r30, r18
    35e6:	f3 1f       	adc	r31, r19
    35e8:	80 81       	ld	r24, Z
    35ea:	88 23       	and	r24, r24
    35ec:	39 f7       	brne	.-50     	; 0x35bc <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    35ee:	0f 90       	pop	r0
    35f0:	0f 90       	pop	r0
    35f2:	0f 90       	pop	r0
    35f4:	cf 91       	pop	r28
    35f6:	df 91       	pop	r29
    35f8:	08 95       	ret

000035fa <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    35fa:	df 93       	push	r29
    35fc:	cf 93       	push	r28
    35fe:	00 d0       	rcall	.+0      	; 0x3600 <LCD_moveCursor+0x6>
    3600:	00 d0       	rcall	.+0      	; 0x3602 <LCD_moveCursor+0x8>
    3602:	0f 92       	push	r0
    3604:	cd b7       	in	r28, 0x3d	; 61
    3606:	de b7       	in	r29, 0x3e	; 62
    3608:	8a 83       	std	Y+2, r24	; 0x02
    360a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    360c:	8a 81       	ldd	r24, Y+2	; 0x02
    360e:	28 2f       	mov	r18, r24
    3610:	30 e0       	ldi	r19, 0x00	; 0
    3612:	3d 83       	std	Y+5, r19	; 0x05
    3614:	2c 83       	std	Y+4, r18	; 0x04
    3616:	8c 81       	ldd	r24, Y+4	; 0x04
    3618:	9d 81       	ldd	r25, Y+5	; 0x05
    361a:	81 30       	cpi	r24, 0x01	; 1
    361c:	91 05       	cpc	r25, r1
    361e:	c1 f0       	breq	.+48     	; 0x3650 <LCD_moveCursor+0x56>
    3620:	2c 81       	ldd	r18, Y+4	; 0x04
    3622:	3d 81       	ldd	r19, Y+5	; 0x05
    3624:	22 30       	cpi	r18, 0x02	; 2
    3626:	31 05       	cpc	r19, r1
    3628:	2c f4       	brge	.+10     	; 0x3634 <LCD_moveCursor+0x3a>
    362a:	8c 81       	ldd	r24, Y+4	; 0x04
    362c:	9d 81       	ldd	r25, Y+5	; 0x05
    362e:	00 97       	sbiw	r24, 0x00	; 0
    3630:	61 f0       	breq	.+24     	; 0x364a <LCD_moveCursor+0x50>
    3632:	19 c0       	rjmp	.+50     	; 0x3666 <LCD_moveCursor+0x6c>
    3634:	2c 81       	ldd	r18, Y+4	; 0x04
    3636:	3d 81       	ldd	r19, Y+5	; 0x05
    3638:	22 30       	cpi	r18, 0x02	; 2
    363a:	31 05       	cpc	r19, r1
    363c:	69 f0       	breq	.+26     	; 0x3658 <LCD_moveCursor+0x5e>
    363e:	8c 81       	ldd	r24, Y+4	; 0x04
    3640:	9d 81       	ldd	r25, Y+5	; 0x05
    3642:	83 30       	cpi	r24, 0x03	; 3
    3644:	91 05       	cpc	r25, r1
    3646:	61 f0       	breq	.+24     	; 0x3660 <LCD_moveCursor+0x66>
    3648:	0e c0       	rjmp	.+28     	; 0x3666 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    364a:	8b 81       	ldd	r24, Y+3	; 0x03
    364c:	89 83       	std	Y+1, r24	; 0x01
    364e:	0b c0       	rjmp	.+22     	; 0x3666 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    3650:	8b 81       	ldd	r24, Y+3	; 0x03
    3652:	80 5c       	subi	r24, 0xC0	; 192
    3654:	89 83       	std	Y+1, r24	; 0x01
    3656:	07 c0       	rjmp	.+14     	; 0x3666 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    3658:	8b 81       	ldd	r24, Y+3	; 0x03
    365a:	80 5f       	subi	r24, 0xF0	; 240
    365c:	89 83       	std	Y+1, r24	; 0x01
    365e:	03 c0       	rjmp	.+6      	; 0x3666 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    3660:	8b 81       	ldd	r24, Y+3	; 0x03
    3662:	80 5b       	subi	r24, 0xB0	; 176
    3664:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3666:	89 81       	ldd	r24, Y+1	; 0x01
    3668:	80 68       	ori	r24, 0x80	; 128
    366a:	0e 94 f6 16 	call	0x2dec	; 0x2dec <LCD_sendCommand>
}
    366e:	0f 90       	pop	r0
    3670:	0f 90       	pop	r0
    3672:	0f 90       	pop	r0
    3674:	0f 90       	pop	r0
    3676:	0f 90       	pop	r0
    3678:	cf 91       	pop	r28
    367a:	df 91       	pop	r29
    367c:	08 95       	ret

0000367e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    367e:	df 93       	push	r29
    3680:	cf 93       	push	r28
    3682:	00 d0       	rcall	.+0      	; 0x3684 <LCD_displayStringRowColumn+0x6>
    3684:	00 d0       	rcall	.+0      	; 0x3686 <LCD_displayStringRowColumn+0x8>
    3686:	cd b7       	in	r28, 0x3d	; 61
    3688:	de b7       	in	r29, 0x3e	; 62
    368a:	89 83       	std	Y+1, r24	; 0x01
    368c:	6a 83       	std	Y+2, r22	; 0x02
    368e:	5c 83       	std	Y+4, r21	; 0x04
    3690:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3692:	89 81       	ldd	r24, Y+1	; 0x01
    3694:	6a 81       	ldd	r22, Y+2	; 0x02
    3696:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    369a:	8b 81       	ldd	r24, Y+3	; 0x03
    369c:	9c 81       	ldd	r25, Y+4	; 0x04
    369e:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <LCD_displayString>
}
    36a2:	0f 90       	pop	r0
    36a4:	0f 90       	pop	r0
    36a6:	0f 90       	pop	r0
    36a8:	0f 90       	pop	r0
    36aa:	cf 91       	pop	r28
    36ac:	df 91       	pop	r29
    36ae:	08 95       	ret

000036b0 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    36b0:	df 93       	push	r29
    36b2:	cf 93       	push	r28
    36b4:	cd b7       	in	r28, 0x3d	; 61
    36b6:	de b7       	in	r29, 0x3e	; 62
    36b8:	62 97       	sbiw	r28, 0x12	; 18
    36ba:	0f b6       	in	r0, 0x3f	; 63
    36bc:	f8 94       	cli
    36be:	de bf       	out	0x3e, r29	; 62
    36c0:	0f be       	out	0x3f, r0	; 63
    36c2:	cd bf       	out	0x3d, r28	; 61
    36c4:	9a 8b       	std	Y+18, r25	; 0x12
    36c6:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    36c8:	89 89       	ldd	r24, Y+17	; 0x11
    36ca:	9a 89       	ldd	r25, Y+18	; 0x12
    36cc:	9e 01       	movw	r18, r28
    36ce:	2f 5f       	subi	r18, 0xFF	; 255
    36d0:	3f 4f       	sbci	r19, 0xFF	; 255
    36d2:	b9 01       	movw	r22, r18
    36d4:	4a e0       	ldi	r20, 0x0A	; 10
    36d6:	50 e0       	ldi	r21, 0x00	; 0
    36d8:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <itoa>
   LCD_displayString(buff); /* Display the string */
    36dc:	ce 01       	movw	r24, r28
    36de:	01 96       	adiw	r24, 0x01	; 1
    36e0:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <LCD_displayString>
}
    36e4:	62 96       	adiw	r28, 0x12	; 18
    36e6:	0f b6       	in	r0, 0x3f	; 63
    36e8:	f8 94       	cli
    36ea:	de bf       	out	0x3e, r29	; 62
    36ec:	0f be       	out	0x3f, r0	; 63
    36ee:	cd bf       	out	0x3d, r28	; 61
    36f0:	cf 91       	pop	r28
    36f2:	df 91       	pop	r29
    36f4:	08 95       	ret

000036f6 <LCD_floatToString>:
/*
 * Description :
 * Display the required float value on the screen
 */
void LCD_floatToString(float data)
{
    36f6:	0f 93       	push	r16
    36f8:	1f 93       	push	r17
    36fa:	df 93       	push	r29
    36fc:	cf 93       	push	r28
    36fe:	cd b7       	in	r28, 0x3d	; 61
    3700:	de b7       	in	r29, 0x3e	; 62
    3702:	68 97       	sbiw	r28, 0x18	; 24
    3704:	0f b6       	in	r0, 0x3f	; 63
    3706:	f8 94       	cli
    3708:	de bf       	out	0x3e, r29	; 62
    370a:	0f be       	out	0x3f, r0	; 63
    370c:	cd bf       	out	0x3d, r28	; 61
    370e:	6d 8b       	std	Y+21, r22	; 0x15
    3710:	7e 8b       	std	Y+22, r23	; 0x16
    3712:	8f 8b       	std	Y+23, r24	; 0x17
    3714:	98 8f       	std	Y+24, r25	; 0x18
    char buffer[20];  /* Create a buffer to hold the float as a string */
    dtostrf(data, 2,2, buffer);  /* Convert the float to string with 2 decimal places */
    3716:	8d 89       	ldd	r24, Y+21	; 0x15
    3718:	9e 89       	ldd	r25, Y+22	; 0x16
    371a:	af 89       	ldd	r26, Y+23	; 0x17
    371c:	b8 8d       	ldd	r27, Y+24	; 0x18
    371e:	bc 01       	movw	r22, r24
    3720:	cd 01       	movw	r24, r26
    3722:	42 e0       	ldi	r20, 0x02	; 2
    3724:	50 e0       	ldi	r21, 0x00	; 0
    3726:	22 e0       	ldi	r18, 0x02	; 2
    3728:	30 e0       	ldi	r19, 0x00	; 0
    372a:	fe 01       	movw	r30, r28
    372c:	31 96       	adiw	r30, 0x01	; 1
    372e:	8f 01       	movw	r16, r30
    3730:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <dtostrf>
    LCD_displayString(buffer);  /* Display the string on the LCD */
    3734:	ce 01       	movw	r24, r28
    3736:	01 96       	adiw	r24, 0x01	; 1
    3738:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <LCD_displayString>
}
    373c:	68 96       	adiw	r28, 0x18	; 24
    373e:	0f b6       	in	r0, 0x3f	; 63
    3740:	f8 94       	cli
    3742:	de bf       	out	0x3e, r29	; 62
    3744:	0f be       	out	0x3f, r0	; 63
    3746:	cd bf       	out	0x3d, r28	; 61
    3748:	cf 91       	pop	r28
    374a:	df 91       	pop	r29
    374c:	1f 91       	pop	r17
    374e:	0f 91       	pop	r16
    3750:	08 95       	ret

00003752 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3752:	df 93       	push	r29
    3754:	cf 93       	push	r28
    3756:	cd b7       	in	r28, 0x3d	; 61
    3758:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    375a:	81 e0       	ldi	r24, 0x01	; 1
    375c:	0e 94 f6 16 	call	0x2dec	; 0x2dec <LCD_sendCommand>
}
    3760:	cf 91       	pop	r28
    3762:	df 91       	pop	r29
    3764:	08 95       	ret

00003766 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    3766:	df 93       	push	r29
    3768:	cf 93       	push	r28
    376a:	00 d0       	rcall	.+0      	; 0x376c <UART_init+0x6>
    376c:	00 d0       	rcall	.+0      	; 0x376e <UART_init+0x8>
    376e:	cd b7       	in	r28, 0x3d	; 61
    3770:	de b7       	in	r29, 0x3e	; 62
    3772:	9c 83       	std	Y+4, r25	; 0x04
    3774:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3776:	1a 82       	std	Y+2, r1	; 0x02
    3778:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    377a:	eb e2       	ldi	r30, 0x2B	; 43
    377c:	f0 e0       	ldi	r31, 0x00	; 0
    377e:	82 e0       	ldi	r24, 0x02	; 2
    3780:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For al bit modes except 9 bit
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3782:	ea e2       	ldi	r30, 0x2A	; 42
    3784:	f0 e0       	ldi	r31, 0x00	; 0
    3786:	88 e1       	ldi	r24, 0x18	; 24
    3788:	80 83       	st	Z, r24
	 * USBS    = 0 OR 1 1-bit or 2-bit (stop bit).
	 * UCSZ1:0 = Choose X-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/

	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
    378a:	e0 e4       	ldi	r30, 0x40	; 64
    378c:	f0 e0       	ldi	r31, 0x00	; 0
    378e:	86 e8       	ldi	r24, 0x86	; 134
    3790:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0XF9) | (Config_Ptr->bit_data<<1);
    3792:	a0 e4       	ldi	r26, 0x40	; 64
    3794:	b0 e0       	ldi	r27, 0x00	; 0
    3796:	e0 e4       	ldi	r30, 0x40	; 64
    3798:	f0 e0       	ldi	r31, 0x00	; 0
    379a:	80 81       	ld	r24, Z
    379c:	28 2f       	mov	r18, r24
    379e:	29 7f       	andi	r18, 0xF9	; 249
    37a0:	eb 81       	ldd	r30, Y+3	; 0x03
    37a2:	fc 81       	ldd	r31, Y+4	; 0x04
    37a4:	80 81       	ld	r24, Z
    37a6:	88 2f       	mov	r24, r24
    37a8:	90 e0       	ldi	r25, 0x00	; 0
    37aa:	88 0f       	add	r24, r24
    37ac:	99 1f       	adc	r25, r25
    37ae:	82 2b       	or	r24, r18
    37b0:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0XF7) | (Config_Ptr->stop_bit<<3);
    37b2:	a0 e4       	ldi	r26, 0x40	; 64
    37b4:	b0 e0       	ldi	r27, 0x00	; 0
    37b6:	e0 e4       	ldi	r30, 0x40	; 64
    37b8:	f0 e0       	ldi	r31, 0x00	; 0
    37ba:	80 81       	ld	r24, Z
    37bc:	28 2f       	mov	r18, r24
    37be:	27 7f       	andi	r18, 0xF7	; 247
    37c0:	eb 81       	ldd	r30, Y+3	; 0x03
    37c2:	fc 81       	ldd	r31, Y+4	; 0x04
    37c4:	82 81       	ldd	r24, Z+2	; 0x02
    37c6:	88 2f       	mov	r24, r24
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	88 0f       	add	r24, r24
    37cc:	99 1f       	adc	r25, r25
    37ce:	88 0f       	add	r24, r24
    37d0:	99 1f       	adc	r25, r25
    37d2:	88 0f       	add	r24, r24
    37d4:	99 1f       	adc	r25, r25
    37d6:	82 2b       	or	r24, r18
    37d8:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0XCF) | (Config_Ptr->parity<<4);
    37da:	a0 e4       	ldi	r26, 0x40	; 64
    37dc:	b0 e0       	ldi	r27, 0x00	; 0
    37de:	e0 e4       	ldi	r30, 0x40	; 64
    37e0:	f0 e0       	ldi	r31, 0x00	; 0
    37e2:	80 81       	ld	r24, Z
    37e4:	28 2f       	mov	r18, r24
    37e6:	2f 7c       	andi	r18, 0xCF	; 207
    37e8:	eb 81       	ldd	r30, Y+3	; 0x03
    37ea:	fc 81       	ldd	r31, Y+4	; 0x04
    37ec:	81 81       	ldd	r24, Z+1	; 0x01
    37ee:	88 2f       	mov	r24, r24
    37f0:	90 e0       	ldi	r25, 0x00	; 0
    37f2:	82 95       	swap	r24
    37f4:	92 95       	swap	r25
    37f6:	90 7f       	andi	r25, 0xF0	; 240
    37f8:	98 27       	eor	r25, r24
    37fa:	80 7f       	andi	r24, 0xF0	; 240
    37fc:	98 27       	eor	r25, r24
    37fe:	82 2b       	or	r24, r18
    3800:	8c 93       	st	X, r24

	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ( Config_Ptr->baud_rate * 8UL))) - 1);
    3802:	eb 81       	ldd	r30, Y+3	; 0x03
    3804:	fc 81       	ldd	r31, Y+4	; 0x04
    3806:	83 81       	ldd	r24, Z+3	; 0x03
    3808:	94 81       	ldd	r25, Z+4	; 0x04
    380a:	cc 01       	movw	r24, r24
    380c:	a0 e0       	ldi	r26, 0x00	; 0
    380e:	b0 e0       	ldi	r27, 0x00	; 0
    3810:	88 0f       	add	r24, r24
    3812:	99 1f       	adc	r25, r25
    3814:	aa 1f       	adc	r26, r26
    3816:	bb 1f       	adc	r27, r27
    3818:	88 0f       	add	r24, r24
    381a:	99 1f       	adc	r25, r25
    381c:	aa 1f       	adc	r26, r26
    381e:	bb 1f       	adc	r27, r27
    3820:	88 0f       	add	r24, r24
    3822:	99 1f       	adc	r25, r25
    3824:	aa 1f       	adc	r26, r26
    3826:	bb 1f       	adc	r27, r27
    3828:	9c 01       	movw	r18, r24
    382a:	ad 01       	movw	r20, r26
    382c:	80 e0       	ldi	r24, 0x00	; 0
    382e:	92 e1       	ldi	r25, 0x12	; 18
    3830:	aa e7       	ldi	r26, 0x7A	; 122
    3832:	b0 e0       	ldi	r27, 0x00	; 0
    3834:	bc 01       	movw	r22, r24
    3836:	cd 01       	movw	r24, r26
    3838:	0e 94 c7 1c 	call	0x398e	; 0x398e <__udivmodsi4>
    383c:	da 01       	movw	r26, r20
    383e:	c9 01       	movw	r24, r18
    3840:	01 97       	sbiw	r24, 0x01	; 1
    3842:	9a 83       	std	Y+2, r25	; 0x02
    3844:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3846:	e0 e4       	ldi	r30, 0x40	; 64
    3848:	f0 e0       	ldi	r31, 0x00	; 0
    384a:	89 81       	ldd	r24, Y+1	; 0x01
    384c:	9a 81       	ldd	r25, Y+2	; 0x02
    384e:	89 2f       	mov	r24, r25
    3850:	99 27       	eor	r25, r25
    3852:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3854:	e9 e2       	ldi	r30, 0x29	; 41
    3856:	f0 e0       	ldi	r31, 0x00	; 0
    3858:	89 81       	ldd	r24, Y+1	; 0x01
    385a:	80 83       	st	Z, r24
}
    385c:	0f 90       	pop	r0
    385e:	0f 90       	pop	r0
    3860:	0f 90       	pop	r0
    3862:	0f 90       	pop	r0
    3864:	cf 91       	pop	r28
    3866:	df 91       	pop	r29
    3868:	08 95       	ret

0000386a <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    386a:	df 93       	push	r29
    386c:	cf 93       	push	r28
    386e:	0f 92       	push	r0
    3870:	cd b7       	in	r28, 0x3d	; 61
    3872:	de b7       	in	r29, 0x3e	; 62
    3874:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3876:	eb e2       	ldi	r30, 0x2B	; 43
    3878:	f0 e0       	ldi	r31, 0x00	; 0
    387a:	80 81       	ld	r24, Z
    387c:	88 2f       	mov	r24, r24
    387e:	90 e0       	ldi	r25, 0x00	; 0
    3880:	80 72       	andi	r24, 0x20	; 32
    3882:	90 70       	andi	r25, 0x00	; 0
    3884:	00 97       	sbiw	r24, 0x00	; 0
    3886:	b9 f3       	breq	.-18     	; 0x3876 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3888:	ec e2       	ldi	r30, 0x2C	; 44
    388a:	f0 e0       	ldi	r31, 0x00	; 0
    388c:	89 81       	ldd	r24, Y+1	; 0x01
    388e:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3890:	0f 90       	pop	r0
    3892:	cf 91       	pop	r28
    3894:	df 91       	pop	r29
    3896:	08 95       	ret

00003898 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3898:	df 93       	push	r29
    389a:	cf 93       	push	r28
    389c:	cd b7       	in	r28, 0x3d	; 61
    389e:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    38a0:	eb e2       	ldi	r30, 0x2B	; 43
    38a2:	f0 e0       	ldi	r31, 0x00	; 0
    38a4:	80 81       	ld	r24, Z
    38a6:	88 23       	and	r24, r24
    38a8:	dc f7       	brge	.-10     	; 0x38a0 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    38aa:	ec e2       	ldi	r30, 0x2C	; 44
    38ac:	f0 e0       	ldi	r31, 0x00	; 0
    38ae:	80 81       	ld	r24, Z
}
    38b0:	cf 91       	pop	r28
    38b2:	df 91       	pop	r29
    38b4:	08 95       	ret

000038b6 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    38b6:	df 93       	push	r29
    38b8:	cf 93       	push	r28
    38ba:	00 d0       	rcall	.+0      	; 0x38bc <UART_sendString+0x6>
    38bc:	0f 92       	push	r0
    38be:	cd b7       	in	r28, 0x3d	; 61
    38c0:	de b7       	in	r29, 0x3e	; 62
    38c2:	9b 83       	std	Y+3, r25	; 0x03
    38c4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    38c6:	19 82       	std	Y+1, r1	; 0x01
    38c8:	0e c0       	rjmp	.+28     	; 0x38e6 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    38ca:	89 81       	ldd	r24, Y+1	; 0x01
    38cc:	28 2f       	mov	r18, r24
    38ce:	30 e0       	ldi	r19, 0x00	; 0
    38d0:	8a 81       	ldd	r24, Y+2	; 0x02
    38d2:	9b 81       	ldd	r25, Y+3	; 0x03
    38d4:	fc 01       	movw	r30, r24
    38d6:	e2 0f       	add	r30, r18
    38d8:	f3 1f       	adc	r31, r19
    38da:	80 81       	ld	r24, Z
    38dc:	0e 94 35 1c 	call	0x386a	; 0x386a <UART_sendByte>
		i++;
    38e0:	89 81       	ldd	r24, Y+1	; 0x01
    38e2:	8f 5f       	subi	r24, 0xFF	; 255
    38e4:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    38e6:	89 81       	ldd	r24, Y+1	; 0x01
    38e8:	28 2f       	mov	r18, r24
    38ea:	30 e0       	ldi	r19, 0x00	; 0
    38ec:	8a 81       	ldd	r24, Y+2	; 0x02
    38ee:	9b 81       	ldd	r25, Y+3	; 0x03
    38f0:	fc 01       	movw	r30, r24
    38f2:	e2 0f       	add	r30, r18
    38f4:	f3 1f       	adc	r31, r19
    38f6:	80 81       	ld	r24, Z
    38f8:	88 23       	and	r24, r24
    38fa:	39 f7       	brne	.-50     	; 0x38ca <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    38fc:	0f 90       	pop	r0
    38fe:	0f 90       	pop	r0
    3900:	0f 90       	pop	r0
    3902:	cf 91       	pop	r28
    3904:	df 91       	pop	r29
    3906:	08 95       	ret

00003908 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3908:	0f 93       	push	r16
    390a:	1f 93       	push	r17
    390c:	df 93       	push	r29
    390e:	cf 93       	push	r28
    3910:	00 d0       	rcall	.+0      	; 0x3912 <UART_receiveString+0xa>
    3912:	0f 92       	push	r0
    3914:	cd b7       	in	r28, 0x3d	; 61
    3916:	de b7       	in	r29, 0x3e	; 62
    3918:	9b 83       	std	Y+3, r25	; 0x03
    391a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    391c:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    391e:	89 81       	ldd	r24, Y+1	; 0x01
    3920:	28 2f       	mov	r18, r24
    3922:	30 e0       	ldi	r19, 0x00	; 0
    3924:	8a 81       	ldd	r24, Y+2	; 0x02
    3926:	9b 81       	ldd	r25, Y+3	; 0x03
    3928:	8c 01       	movw	r16, r24
    392a:	02 0f       	add	r16, r18
    392c:	13 1f       	adc	r17, r19
    392e:	0e 94 4c 1c 	call	0x3898	; 0x3898 <UART_recieveByte>
    3932:	f8 01       	movw	r30, r16
    3934:	80 83       	st	Z, r24
    3936:	0f c0       	rjmp	.+30     	; 0x3956 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3938:	89 81       	ldd	r24, Y+1	; 0x01
    393a:	8f 5f       	subi	r24, 0xFF	; 255
    393c:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    393e:	89 81       	ldd	r24, Y+1	; 0x01
    3940:	28 2f       	mov	r18, r24
    3942:	30 e0       	ldi	r19, 0x00	; 0
    3944:	8a 81       	ldd	r24, Y+2	; 0x02
    3946:	9b 81       	ldd	r25, Y+3	; 0x03
    3948:	8c 01       	movw	r16, r24
    394a:	02 0f       	add	r16, r18
    394c:	13 1f       	adc	r17, r19
    394e:	0e 94 4c 1c 	call	0x3898	; 0x3898 <UART_recieveByte>
    3952:	f8 01       	movw	r30, r16
    3954:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3956:	89 81       	ldd	r24, Y+1	; 0x01
    3958:	28 2f       	mov	r18, r24
    395a:	30 e0       	ldi	r19, 0x00	; 0
    395c:	8a 81       	ldd	r24, Y+2	; 0x02
    395e:	9b 81       	ldd	r25, Y+3	; 0x03
    3960:	fc 01       	movw	r30, r24
    3962:	e2 0f       	add	r30, r18
    3964:	f3 1f       	adc	r31, r19
    3966:	80 81       	ld	r24, Z
    3968:	83 32       	cpi	r24, 0x23	; 35
    396a:	31 f7       	brne	.-52     	; 0x3938 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    396c:	89 81       	ldd	r24, Y+1	; 0x01
    396e:	28 2f       	mov	r18, r24
    3970:	30 e0       	ldi	r19, 0x00	; 0
    3972:	8a 81       	ldd	r24, Y+2	; 0x02
    3974:	9b 81       	ldd	r25, Y+3	; 0x03
    3976:	fc 01       	movw	r30, r24
    3978:	e2 0f       	add	r30, r18
    397a:	f3 1f       	adc	r31, r19
    397c:	10 82       	st	Z, r1
}
    397e:	0f 90       	pop	r0
    3980:	0f 90       	pop	r0
    3982:	0f 90       	pop	r0
    3984:	cf 91       	pop	r28
    3986:	df 91       	pop	r29
    3988:	1f 91       	pop	r17
    398a:	0f 91       	pop	r16
    398c:	08 95       	ret

0000398e <__udivmodsi4>:
    398e:	a1 e2       	ldi	r26, 0x21	; 33
    3990:	1a 2e       	mov	r1, r26
    3992:	aa 1b       	sub	r26, r26
    3994:	bb 1b       	sub	r27, r27
    3996:	fd 01       	movw	r30, r26
    3998:	0d c0       	rjmp	.+26     	; 0x39b4 <__udivmodsi4_ep>

0000399a <__udivmodsi4_loop>:
    399a:	aa 1f       	adc	r26, r26
    399c:	bb 1f       	adc	r27, r27
    399e:	ee 1f       	adc	r30, r30
    39a0:	ff 1f       	adc	r31, r31
    39a2:	a2 17       	cp	r26, r18
    39a4:	b3 07       	cpc	r27, r19
    39a6:	e4 07       	cpc	r30, r20
    39a8:	f5 07       	cpc	r31, r21
    39aa:	20 f0       	brcs	.+8      	; 0x39b4 <__udivmodsi4_ep>
    39ac:	a2 1b       	sub	r26, r18
    39ae:	b3 0b       	sbc	r27, r19
    39b0:	e4 0b       	sbc	r30, r20
    39b2:	f5 0b       	sbc	r31, r21

000039b4 <__udivmodsi4_ep>:
    39b4:	66 1f       	adc	r22, r22
    39b6:	77 1f       	adc	r23, r23
    39b8:	88 1f       	adc	r24, r24
    39ba:	99 1f       	adc	r25, r25
    39bc:	1a 94       	dec	r1
    39be:	69 f7       	brne	.-38     	; 0x399a <__udivmodsi4_loop>
    39c0:	60 95       	com	r22
    39c2:	70 95       	com	r23
    39c4:	80 95       	com	r24
    39c6:	90 95       	com	r25
    39c8:	9b 01       	movw	r18, r22
    39ca:	ac 01       	movw	r20, r24
    39cc:	bd 01       	movw	r22, r26
    39ce:	cf 01       	movw	r24, r30
    39d0:	08 95       	ret

000039d2 <__prologue_saves__>:
    39d2:	2f 92       	push	r2
    39d4:	3f 92       	push	r3
    39d6:	4f 92       	push	r4
    39d8:	5f 92       	push	r5
    39da:	6f 92       	push	r6
    39dc:	7f 92       	push	r7
    39de:	8f 92       	push	r8
    39e0:	9f 92       	push	r9
    39e2:	af 92       	push	r10
    39e4:	bf 92       	push	r11
    39e6:	cf 92       	push	r12
    39e8:	df 92       	push	r13
    39ea:	ef 92       	push	r14
    39ec:	ff 92       	push	r15
    39ee:	0f 93       	push	r16
    39f0:	1f 93       	push	r17
    39f2:	cf 93       	push	r28
    39f4:	df 93       	push	r29
    39f6:	cd b7       	in	r28, 0x3d	; 61
    39f8:	de b7       	in	r29, 0x3e	; 62
    39fa:	ca 1b       	sub	r28, r26
    39fc:	db 0b       	sbc	r29, r27
    39fe:	0f b6       	in	r0, 0x3f	; 63
    3a00:	f8 94       	cli
    3a02:	de bf       	out	0x3e, r29	; 62
    3a04:	0f be       	out	0x3f, r0	; 63
    3a06:	cd bf       	out	0x3d, r28	; 61
    3a08:	09 94       	ijmp

00003a0a <__epilogue_restores__>:
    3a0a:	2a 88       	ldd	r2, Y+18	; 0x12
    3a0c:	39 88       	ldd	r3, Y+17	; 0x11
    3a0e:	48 88       	ldd	r4, Y+16	; 0x10
    3a10:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a12:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a14:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a16:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a18:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a1a:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a1c:	b9 84       	ldd	r11, Y+9	; 0x09
    3a1e:	c8 84       	ldd	r12, Y+8	; 0x08
    3a20:	df 80       	ldd	r13, Y+7	; 0x07
    3a22:	ee 80       	ldd	r14, Y+6	; 0x06
    3a24:	fd 80       	ldd	r15, Y+5	; 0x05
    3a26:	0c 81       	ldd	r16, Y+4	; 0x04
    3a28:	1b 81       	ldd	r17, Y+3	; 0x03
    3a2a:	aa 81       	ldd	r26, Y+2	; 0x02
    3a2c:	b9 81       	ldd	r27, Y+1	; 0x01
    3a2e:	ce 0f       	add	r28, r30
    3a30:	d1 1d       	adc	r29, r1
    3a32:	0f b6       	in	r0, 0x3f	; 63
    3a34:	f8 94       	cli
    3a36:	de bf       	out	0x3e, r29	; 62
    3a38:	0f be       	out	0x3f, r0	; 63
    3a3a:	cd bf       	out	0x3d, r28	; 61
    3a3c:	ed 01       	movw	r28, r26
    3a3e:	08 95       	ret

00003a40 <dtostrf>:
    3a40:	ef 92       	push	r14
    3a42:	ff 92       	push	r15
    3a44:	0f 93       	push	r16
    3a46:	1f 93       	push	r17
    3a48:	f2 2f       	mov	r31, r18
    3a4a:	f0 2e       	mov	r15, r16
    3a4c:	47 fd       	sbrc	r20, 7
    3a4e:	02 c0       	rjmp	.+4      	; 0x3a54 <dtostrf+0x14>
    3a50:	e4 e0       	ldi	r30, 0x04	; 4
    3a52:	01 c0       	rjmp	.+2      	; 0x3a56 <dtostrf+0x16>
    3a54:	e4 e1       	ldi	r30, 0x14	; 20
    3a56:	24 2f       	mov	r18, r20
    3a58:	33 27       	eor	r19, r19
    3a5a:	27 fd       	sbrc	r18, 7
    3a5c:	30 95       	com	r19
    3a5e:	37 ff       	sbrs	r19, 7
    3a60:	03 c0       	rjmp	.+6      	; 0x3a68 <dtostrf+0x28>
    3a62:	30 95       	com	r19
    3a64:	21 95       	neg	r18
    3a66:	3f 4f       	sbci	r19, 0xFF	; 255
    3a68:	4f 2d       	mov	r20, r15
    3a6a:	51 2f       	mov	r21, r17
    3a6c:	0f 2f       	mov	r16, r31
    3a6e:	ee 2e       	mov	r14, r30
    3a70:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <dtoa_prf>
    3a74:	8f 2d       	mov	r24, r15
    3a76:	91 2f       	mov	r25, r17
    3a78:	1f 91       	pop	r17
    3a7a:	0f 91       	pop	r16
    3a7c:	ff 90       	pop	r15
    3a7e:	ef 90       	pop	r14
    3a80:	08 95       	ret

00003a82 <itoa>:
    3a82:	fb 01       	movw	r30, r22
    3a84:	9f 01       	movw	r18, r30
    3a86:	e8 94       	clt
    3a88:	42 30       	cpi	r20, 0x02	; 2
    3a8a:	c4 f0       	brlt	.+48     	; 0x3abc <itoa+0x3a>
    3a8c:	45 32       	cpi	r20, 0x25	; 37
    3a8e:	b4 f4       	brge	.+44     	; 0x3abc <itoa+0x3a>
    3a90:	4a 30       	cpi	r20, 0x0A	; 10
    3a92:	29 f4       	brne	.+10     	; 0x3a9e <itoa+0x1c>
    3a94:	97 fb       	bst	r25, 7
    3a96:	1e f4       	brtc	.+6      	; 0x3a9e <itoa+0x1c>
    3a98:	90 95       	com	r25
    3a9a:	81 95       	neg	r24
    3a9c:	9f 4f       	sbci	r25, 0xFF	; 255
    3a9e:	64 2f       	mov	r22, r20
    3aa0:	77 27       	eor	r23, r23
    3aa2:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <__udivmodhi4>
    3aa6:	80 5d       	subi	r24, 0xD0	; 208
    3aa8:	8a 33       	cpi	r24, 0x3A	; 58
    3aaa:	0c f0       	brlt	.+2      	; 0x3aae <itoa+0x2c>
    3aac:	89 5d       	subi	r24, 0xD9	; 217
    3aae:	81 93       	st	Z+, r24
    3ab0:	cb 01       	movw	r24, r22
    3ab2:	00 97       	sbiw	r24, 0x00	; 0
    3ab4:	a1 f7       	brne	.-24     	; 0x3a9e <itoa+0x1c>
    3ab6:	16 f4       	brtc	.+4      	; 0x3abc <itoa+0x3a>
    3ab8:	5d e2       	ldi	r21, 0x2D	; 45
    3aba:	51 93       	st	Z+, r21
    3abc:	10 82       	st	Z, r1
    3abe:	c9 01       	movw	r24, r18
    3ac0:	0c 94 9c 1f 	jmp	0x3f38	; 0x3f38 <strrev>

00003ac4 <dtoa_prf>:
    3ac4:	a9 e0       	ldi	r26, 0x09	; 9
    3ac6:	b0 e0       	ldi	r27, 0x00	; 0
    3ac8:	e8 e6       	ldi	r30, 0x68	; 104
    3aca:	fd e1       	ldi	r31, 0x1D	; 29
    3acc:	0c 94 ed 1c 	jmp	0x39da	; 0x39da <__prologue_saves__+0x8>
    3ad0:	6a 01       	movw	r12, r20
    3ad2:	12 2f       	mov	r17, r18
    3ad4:	a0 2e       	mov	r10, r16
    3ad6:	be 2c       	mov	r11, r14
    3ad8:	2b e3       	ldi	r18, 0x3B	; 59
    3ada:	20 17       	cp	r18, r16
    3adc:	18 f4       	brcc	.+6      	; 0x3ae4 <dtoa_prf+0x20>
    3ade:	2c e3       	ldi	r18, 0x3C	; 60
    3ae0:	92 2e       	mov	r9, r18
    3ae2:	02 c0       	rjmp	.+4      	; 0x3ae8 <dtoa_prf+0x24>
    3ae4:	90 2e       	mov	r9, r16
    3ae6:	93 94       	inc	r9
    3ae8:	ae 01       	movw	r20, r28
    3aea:	4f 5f       	subi	r20, 0xFF	; 255
    3aec:	5f 4f       	sbci	r21, 0xFF	; 255
    3aee:	27 e0       	ldi	r18, 0x07	; 7
    3af0:	09 2d       	mov	r16, r9
    3af2:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <__ftoa_engine>
    3af6:	bc 01       	movw	r22, r24
    3af8:	89 81       	ldd	r24, Y+1	; 0x01
    3afa:	e8 2e       	mov	r14, r24
    3afc:	ff 24       	eor	r15, r15
    3afe:	c7 01       	movw	r24, r14
    3b00:	89 70       	andi	r24, 0x09	; 9
    3b02:	90 70       	andi	r25, 0x00	; 0
    3b04:	01 97       	sbiw	r24, 0x01	; 1
    3b06:	11 f4       	brne	.+4      	; 0x3b0c <dtoa_prf+0x48>
    3b08:	ad e2       	ldi	r26, 0x2D	; 45
    3b0a:	09 c0       	rjmp	.+18     	; 0x3b1e <dtoa_prf+0x5a>
    3b0c:	b1 fe       	sbrs	r11, 1
    3b0e:	02 c0       	rjmp	.+4      	; 0x3b14 <dtoa_prf+0x50>
    3b10:	ab e2       	ldi	r26, 0x2B	; 43
    3b12:	05 c0       	rjmp	.+10     	; 0x3b1e <dtoa_prf+0x5a>
    3b14:	b0 fc       	sbrc	r11, 0
    3b16:	02 c0       	rjmp	.+4      	; 0x3b1c <dtoa_prf+0x58>
    3b18:	a0 e0       	ldi	r26, 0x00	; 0
    3b1a:	01 c0       	rjmp	.+2      	; 0x3b1e <dtoa_prf+0x5a>
    3b1c:	a0 e2       	ldi	r26, 0x20	; 32
    3b1e:	e3 fe       	sbrs	r14, 3
    3b20:	3b c0       	rjmp	.+118    	; 0x3b98 <dtoa_prf+0xd4>
    3b22:	aa 23       	and	r26, r26
    3b24:	11 f4       	brne	.+4      	; 0x3b2a <dtoa_prf+0x66>
    3b26:	23 e0       	ldi	r18, 0x03	; 3
    3b28:	01 c0       	rjmp	.+2      	; 0x3b2c <dtoa_prf+0x68>
    3b2a:	24 e0       	ldi	r18, 0x04	; 4
    3b2c:	21 17       	cp	r18, r17
    3b2e:	10 f0       	brcs	.+4      	; 0x3b34 <dtoa_prf+0x70>
    3b30:	20 e0       	ldi	r18, 0x00	; 0
    3b32:	02 c0       	rjmp	.+4      	; 0x3b38 <dtoa_prf+0x74>
    3b34:	12 1b       	sub	r17, r18
    3b36:	21 2f       	mov	r18, r17
    3b38:	eb 2c       	mov	r14, r11
    3b3a:	b4 fe       	sbrs	r11, 4
    3b3c:	02 c0       	rjmp	.+4      	; 0x3b42 <dtoa_prf+0x7e>
    3b3e:	32 2f       	mov	r19, r18
    3b40:	0a c0       	rjmp	.+20     	; 0x3b56 <dtoa_prf+0x92>
    3b42:	f6 01       	movw	r30, r12
    3b44:	32 2f       	mov	r19, r18
    3b46:	80 e2       	ldi	r24, 0x20	; 32
    3b48:	02 c0       	rjmp	.+4      	; 0x3b4e <dtoa_prf+0x8a>
    3b4a:	81 93       	st	Z+, r24
    3b4c:	31 50       	subi	r19, 0x01	; 1
    3b4e:	33 23       	and	r19, r19
    3b50:	e1 f7       	brne	.-8      	; 0x3b4a <dtoa_prf+0x86>
    3b52:	c2 0e       	add	r12, r18
    3b54:	d1 1c       	adc	r13, r1
    3b56:	aa 23       	and	r26, r26
    3b58:	19 f0       	breq	.+6      	; 0x3b60 <dtoa_prf+0x9c>
    3b5a:	f6 01       	movw	r30, r12
    3b5c:	a1 93       	st	Z+, r26
    3b5e:	6f 01       	movw	r12, r30
    3b60:	f6 01       	movw	r30, r12
    3b62:	31 96       	adiw	r30, 0x01	; 1
    3b64:	e2 fe       	sbrs	r14, 2
    3b66:	05 c0       	rjmp	.+10     	; 0x3b72 <dtoa_prf+0xae>
    3b68:	9e e4       	ldi	r25, 0x4E	; 78
    3b6a:	d6 01       	movw	r26, r12
    3b6c:	9c 93       	st	X, r25
    3b6e:	81 e4       	ldi	r24, 0x41	; 65
    3b70:	04 c0       	rjmp	.+8      	; 0x3b7a <dtoa_prf+0xb6>
    3b72:	9e e6       	ldi	r25, 0x6E	; 110
    3b74:	d6 01       	movw	r26, r12
    3b76:	9c 93       	st	X, r25
    3b78:	81 e6       	ldi	r24, 0x61	; 97
    3b7a:	11 96       	adiw	r26, 0x01	; 1
    3b7c:	8c 93       	st	X, r24
    3b7e:	91 83       	std	Z+1, r25	; 0x01
    3b80:	32 96       	adiw	r30, 0x02	; 2
    3b82:	df 01       	movw	r26, r30
    3b84:	83 2f       	mov	r24, r19
    3b86:	90 e2       	ldi	r25, 0x20	; 32
    3b88:	02 c0       	rjmp	.+4      	; 0x3b8e <dtoa_prf+0xca>
    3b8a:	9d 93       	st	X+, r25
    3b8c:	81 50       	subi	r24, 0x01	; 1
    3b8e:	88 23       	and	r24, r24
    3b90:	e1 f7       	brne	.-8      	; 0x3b8a <dtoa_prf+0xc6>
    3b92:	e3 0f       	add	r30, r19
    3b94:	f1 1d       	adc	r31, r1
    3b96:	40 c0       	rjmp	.+128    	; 0x3c18 <dtoa_prf+0x154>
    3b98:	e2 fe       	sbrs	r14, 2
    3b9a:	42 c0       	rjmp	.+132    	; 0x3c20 <dtoa_prf+0x15c>
    3b9c:	aa 23       	and	r26, r26
    3b9e:	11 f4       	brne	.+4      	; 0x3ba4 <dtoa_prf+0xe0>
    3ba0:	23 e0       	ldi	r18, 0x03	; 3
    3ba2:	01 c0       	rjmp	.+2      	; 0x3ba6 <dtoa_prf+0xe2>
    3ba4:	24 e0       	ldi	r18, 0x04	; 4
    3ba6:	21 17       	cp	r18, r17
    3ba8:	10 f0       	brcs	.+4      	; 0x3bae <dtoa_prf+0xea>
    3baa:	20 e0       	ldi	r18, 0x00	; 0
    3bac:	02 c0       	rjmp	.+4      	; 0x3bb2 <dtoa_prf+0xee>
    3bae:	12 1b       	sub	r17, r18
    3bb0:	21 2f       	mov	r18, r17
    3bb2:	eb 2c       	mov	r14, r11
    3bb4:	b4 fe       	sbrs	r11, 4
    3bb6:	02 c0       	rjmp	.+4      	; 0x3bbc <dtoa_prf+0xf8>
    3bb8:	92 2f       	mov	r25, r18
    3bba:	0a c0       	rjmp	.+20     	; 0x3bd0 <dtoa_prf+0x10c>
    3bbc:	f6 01       	movw	r30, r12
    3bbe:	92 2f       	mov	r25, r18
    3bc0:	80 e2       	ldi	r24, 0x20	; 32
    3bc2:	02 c0       	rjmp	.+4      	; 0x3bc8 <dtoa_prf+0x104>
    3bc4:	81 93       	st	Z+, r24
    3bc6:	91 50       	subi	r25, 0x01	; 1
    3bc8:	99 23       	and	r25, r25
    3bca:	e1 f7       	brne	.-8      	; 0x3bc4 <dtoa_prf+0x100>
    3bcc:	c2 0e       	add	r12, r18
    3bce:	d1 1c       	adc	r13, r1
    3bd0:	aa 23       	and	r26, r26
    3bd2:	19 f0       	breq	.+6      	; 0x3bda <dtoa_prf+0x116>
    3bd4:	f6 01       	movw	r30, r12
    3bd6:	a1 93       	st	Z+, r26
    3bd8:	6f 01       	movw	r12, r30
    3bda:	f6 01       	movw	r30, r12
    3bdc:	31 96       	adiw	r30, 0x01	; 1
    3bde:	e2 fe       	sbrs	r14, 2
    3be0:	08 c0       	rjmp	.+16     	; 0x3bf2 <dtoa_prf+0x12e>
    3be2:	89 e4       	ldi	r24, 0x49	; 73
    3be4:	d6 01       	movw	r26, r12
    3be6:	8c 93       	st	X, r24
    3be8:	8e e4       	ldi	r24, 0x4E	; 78
    3bea:	11 96       	adiw	r26, 0x01	; 1
    3bec:	8c 93       	st	X, r24
    3bee:	86 e4       	ldi	r24, 0x46	; 70
    3bf0:	07 c0       	rjmp	.+14     	; 0x3c00 <dtoa_prf+0x13c>
    3bf2:	89 e6       	ldi	r24, 0x69	; 105
    3bf4:	d6 01       	movw	r26, r12
    3bf6:	8c 93       	st	X, r24
    3bf8:	8e e6       	ldi	r24, 0x6E	; 110
    3bfa:	11 96       	adiw	r26, 0x01	; 1
    3bfc:	8c 93       	st	X, r24
    3bfe:	86 e6       	ldi	r24, 0x66	; 102
    3c00:	81 83       	std	Z+1, r24	; 0x01
    3c02:	32 96       	adiw	r30, 0x02	; 2
    3c04:	df 01       	movw	r26, r30
    3c06:	89 2f       	mov	r24, r25
    3c08:	20 e2       	ldi	r18, 0x20	; 32
    3c0a:	02 c0       	rjmp	.+4      	; 0x3c10 <dtoa_prf+0x14c>
    3c0c:	2d 93       	st	X+, r18
    3c0e:	81 50       	subi	r24, 0x01	; 1
    3c10:	88 23       	and	r24, r24
    3c12:	e1 f7       	brne	.-8      	; 0x3c0c <dtoa_prf+0x148>
    3c14:	e9 0f       	add	r30, r25
    3c16:	f1 1d       	adc	r31, r1
    3c18:	10 82       	st	Z, r1
    3c1a:	2e ef       	ldi	r18, 0xFE	; 254
    3c1c:	3f ef       	ldi	r19, 0xFF	; 255
    3c1e:	af c0       	rjmp	.+350    	; 0x3d7e <dtoa_prf+0x2ba>
    3c20:	16 16       	cp	r1, r22
    3c22:	17 06       	cpc	r1, r23
    3c24:	1c f0       	brlt	.+6      	; 0x3c2c <dtoa_prf+0x168>
    3c26:	41 e0       	ldi	r20, 0x01	; 1
    3c28:	50 e0       	ldi	r21, 0x00	; 0
    3c2a:	03 c0       	rjmp	.+6      	; 0x3c32 <dtoa_prf+0x16e>
    3c2c:	ab 01       	movw	r20, r22
    3c2e:	4f 5f       	subi	r20, 0xFF	; 255
    3c30:	5f 4f       	sbci	r21, 0xFF	; 255
    3c32:	aa 20       	and	r10, r10
    3c34:	19 f4       	brne	.+6      	; 0x3c3c <dtoa_prf+0x178>
    3c36:	80 e0       	ldi	r24, 0x00	; 0
    3c38:	90 e0       	ldi	r25, 0x00	; 0
    3c3a:	03 c0       	rjmp	.+6      	; 0x3c42 <dtoa_prf+0x17e>
    3c3c:	8a 2d       	mov	r24, r10
    3c3e:	90 e0       	ldi	r25, 0x00	; 0
    3c40:	01 96       	adiw	r24, 0x01	; 1
    3c42:	20 e0       	ldi	r18, 0x00	; 0
    3c44:	30 e0       	ldi	r19, 0x00	; 0
    3c46:	aa 23       	and	r26, r26
    3c48:	11 f0       	breq	.+4      	; 0x3c4e <dtoa_prf+0x18a>
    3c4a:	21 e0       	ldi	r18, 0x01	; 1
    3c4c:	30 e0       	ldi	r19, 0x00	; 0
    3c4e:	24 0f       	add	r18, r20
    3c50:	35 1f       	adc	r19, r21
    3c52:	28 0f       	add	r18, r24
    3c54:	39 1f       	adc	r19, r25
    3c56:	81 2f       	mov	r24, r17
    3c58:	90 e0       	ldi	r25, 0x00	; 0
    3c5a:	28 17       	cp	r18, r24
    3c5c:	39 07       	cpc	r19, r25
    3c5e:	14 f0       	brlt	.+4      	; 0x3c64 <dtoa_prf+0x1a0>
    3c60:	20 e0       	ldi	r18, 0x00	; 0
    3c62:	02 c0       	rjmp	.+4      	; 0x3c68 <dtoa_prf+0x1a4>
    3c64:	12 1b       	sub	r17, r18
    3c66:	21 2f       	mov	r18, r17
    3c68:	4b 2d       	mov	r20, r11
    3c6a:	50 e0       	ldi	r21, 0x00	; 0
    3c6c:	ca 01       	movw	r24, r20
    3c6e:	80 71       	andi	r24, 0x10	; 16
    3c70:	90 70       	andi	r25, 0x00	; 0
    3c72:	b4 fc       	sbrc	r11, 4
    3c74:	0d c0       	rjmp	.+26     	; 0x3c90 <dtoa_prf+0x1cc>
    3c76:	b3 fc       	sbrc	r11, 3
    3c78:	0b c0       	rjmp	.+22     	; 0x3c90 <dtoa_prf+0x1cc>
    3c7a:	f6 01       	movw	r30, r12
    3c7c:	32 2f       	mov	r19, r18
    3c7e:	40 e2       	ldi	r20, 0x20	; 32
    3c80:	02 c0       	rjmp	.+4      	; 0x3c86 <dtoa_prf+0x1c2>
    3c82:	41 93       	st	Z+, r20
    3c84:	31 50       	subi	r19, 0x01	; 1
    3c86:	33 23       	and	r19, r19
    3c88:	e1 f7       	brne	.-8      	; 0x3c82 <dtoa_prf+0x1be>
    3c8a:	c2 0e       	add	r12, r18
    3c8c:	d1 1c       	adc	r13, r1
    3c8e:	01 c0       	rjmp	.+2      	; 0x3c92 <dtoa_prf+0x1ce>
    3c90:	32 2f       	mov	r19, r18
    3c92:	aa 23       	and	r26, r26
    3c94:	19 f0       	breq	.+6      	; 0x3c9c <dtoa_prf+0x1d8>
    3c96:	f6 01       	movw	r30, r12
    3c98:	a1 93       	st	Z+, r26
    3c9a:	6f 01       	movw	r12, r30
    3c9c:	89 2b       	or	r24, r25
    3c9e:	11 f0       	breq	.+4      	; 0x3ca4 <dtoa_prf+0x1e0>
    3ca0:	13 2f       	mov	r17, r19
    3ca2:	0a c0       	rjmp	.+20     	; 0x3cb8 <dtoa_prf+0x1f4>
    3ca4:	f6 01       	movw	r30, r12
    3ca6:	13 2f       	mov	r17, r19
    3ca8:	80 e3       	ldi	r24, 0x30	; 48
    3caa:	02 c0       	rjmp	.+4      	; 0x3cb0 <dtoa_prf+0x1ec>
    3cac:	81 93       	st	Z+, r24
    3cae:	11 50       	subi	r17, 0x01	; 1
    3cb0:	11 23       	and	r17, r17
    3cb2:	e1 f7       	brne	.-8      	; 0x3cac <dtoa_prf+0x1e8>
    3cb4:	c3 0e       	add	r12, r19
    3cb6:	d1 1c       	adc	r13, r1
    3cb8:	09 2d       	mov	r16, r9
    3cba:	06 0f       	add	r16, r22
    3cbc:	ba 80       	ldd	r11, Y+2	; 0x02
    3cbe:	90 e1       	ldi	r25, 0x10	; 16
    3cc0:	89 2e       	mov	r8, r25
    3cc2:	91 2c       	mov	r9, r1
    3cc4:	8e 20       	and	r8, r14
    3cc6:	9f 20       	and	r9, r15
    3cc8:	e4 fe       	sbrs	r14, 4
    3cca:	04 c0       	rjmp	.+8      	; 0x3cd4 <dtoa_prf+0x210>
    3ccc:	f1 e3       	ldi	r31, 0x31	; 49
    3cce:	bf 16       	cp	r11, r31
    3cd0:	09 f4       	brne	.+2      	; 0x3cd4 <dtoa_prf+0x210>
    3cd2:	01 50       	subi	r16, 0x01	; 1
    3cd4:	10 16       	cp	r1, r16
    3cd6:	14 f0       	brlt	.+4      	; 0x3cdc <dtoa_prf+0x218>
    3cd8:	01 e0       	ldi	r16, 0x01	; 1
    3cda:	03 c0       	rjmp	.+6      	; 0x3ce2 <dtoa_prf+0x21e>
    3cdc:	09 30       	cpi	r16, 0x09	; 9
    3cde:	08 f0       	brcs	.+2      	; 0x3ce2 <dtoa_prf+0x21e>
    3ce0:	08 e0       	ldi	r16, 0x08	; 8
    3ce2:	9b 01       	movw	r18, r22
    3ce4:	77 ff       	sbrs	r23, 7
    3ce6:	02 c0       	rjmp	.+4      	; 0x3cec <dtoa_prf+0x228>
    3ce8:	20 e0       	ldi	r18, 0x00	; 0
    3cea:	30 e0       	ldi	r19, 0x00	; 0
    3cec:	cb 01       	movw	r24, r22
    3cee:	01 96       	adiw	r24, 0x01	; 1
    3cf0:	82 1b       	sub	r24, r18
    3cf2:	93 0b       	sbc	r25, r19
    3cf4:	fe 01       	movw	r30, r28
    3cf6:	31 96       	adiw	r30, 0x01	; 1
    3cf8:	e8 0f       	add	r30, r24
    3cfa:	f9 1f       	adc	r31, r25
    3cfc:	8e e2       	ldi	r24, 0x2E	; 46
    3cfe:	f8 2e       	mov	r15, r24
    3d00:	3b 01       	movw	r6, r22
    3d02:	60 1a       	sub	r6, r16
    3d04:	71 08       	sbc	r7, r1
    3d06:	8a 2d       	mov	r24, r10
    3d08:	90 e0       	ldi	r25, 0x00	; 0
    3d0a:	44 27       	eor	r20, r20
    3d0c:	55 27       	eor	r21, r21
    3d0e:	48 1b       	sub	r20, r24
    3d10:	59 0b       	sbc	r21, r25
    3d12:	8f ef       	ldi	r24, 0xFF	; 255
    3d14:	2f 3f       	cpi	r18, 0xFF	; 255
    3d16:	38 07       	cpc	r19, r24
    3d18:	19 f4       	brne	.+6      	; 0x3d20 <dtoa_prf+0x25c>
    3d1a:	d6 01       	movw	r26, r12
    3d1c:	fd 92       	st	X+, r15
    3d1e:	6d 01       	movw	r12, r26
    3d20:	62 17       	cp	r22, r18
    3d22:	73 07       	cpc	r23, r19
    3d24:	2c f0       	brlt	.+10     	; 0x3d30 <dtoa_prf+0x26c>
    3d26:	62 16       	cp	r6, r18
    3d28:	73 06       	cpc	r7, r19
    3d2a:	14 f4       	brge	.+4      	; 0x3d30 <dtoa_prf+0x26c>
    3d2c:	80 81       	ld	r24, Z
    3d2e:	01 c0       	rjmp	.+2      	; 0x3d32 <dtoa_prf+0x26e>
    3d30:	80 e3       	ldi	r24, 0x30	; 48
    3d32:	21 50       	subi	r18, 0x01	; 1
    3d34:	30 40       	sbci	r19, 0x00	; 0
    3d36:	31 96       	adiw	r30, 0x01	; 1
    3d38:	24 17       	cp	r18, r20
    3d3a:	35 07       	cpc	r19, r21
    3d3c:	24 f0       	brlt	.+8      	; 0x3d46 <dtoa_prf+0x282>
    3d3e:	d6 01       	movw	r26, r12
    3d40:	8d 93       	st	X+, r24
    3d42:	6d 01       	movw	r12, r26
    3d44:	e6 cf       	rjmp	.-52     	; 0x3d12 <dtoa_prf+0x24e>
    3d46:	26 17       	cp	r18, r22
    3d48:	37 07       	cpc	r19, r23
    3d4a:	49 f4       	brne	.+18     	; 0x3d5e <dtoa_prf+0x29a>
    3d4c:	b5 e3       	ldi	r27, 0x35	; 53
    3d4e:	bb 15       	cp	r27, r11
    3d50:	28 f0       	brcs	.+10     	; 0x3d5c <dtoa_prf+0x298>
    3d52:	bb 16       	cp	r11, r27
    3d54:	21 f4       	brne	.+8      	; 0x3d5e <dtoa_prf+0x29a>
    3d56:	81 14       	cp	r8, r1
    3d58:	91 04       	cpc	r9, r1
    3d5a:	09 f4       	brne	.+2      	; 0x3d5e <dtoa_prf+0x29a>
    3d5c:	81 e3       	ldi	r24, 0x31	; 49
    3d5e:	f6 01       	movw	r30, r12
    3d60:	81 93       	st	Z+, r24
    3d62:	d6 01       	movw	r26, r12
    3d64:	81 2f       	mov	r24, r17
    3d66:	90 e2       	ldi	r25, 0x20	; 32
    3d68:	02 c0       	rjmp	.+4      	; 0x3d6e <dtoa_prf+0x2aa>
    3d6a:	9c 93       	st	X, r25
    3d6c:	81 50       	subi	r24, 0x01	; 1
    3d6e:	11 96       	adiw	r26, 0x01	; 1
    3d70:	88 23       	and	r24, r24
    3d72:	d9 f7       	brne	.-10     	; 0x3d6a <dtoa_prf+0x2a6>
    3d74:	e1 0f       	add	r30, r17
    3d76:	f1 1d       	adc	r31, r1
    3d78:	10 82       	st	Z, r1
    3d7a:	20 e0       	ldi	r18, 0x00	; 0
    3d7c:	30 e0       	ldi	r19, 0x00	; 0
    3d7e:	c9 01       	movw	r24, r18
    3d80:	29 96       	adiw	r28, 0x09	; 9
    3d82:	ee e0       	ldi	r30, 0x0E	; 14
    3d84:	0c 94 09 1d 	jmp	0x3a12	; 0x3a12 <__epilogue_restores__+0x8>

00003d88 <__ftoa_engine>:
    3d88:	28 30       	cpi	r18, 0x08	; 8
    3d8a:	08 f0       	brcs	.+2      	; 0x3d8e <__ftoa_engine+0x6>
    3d8c:	27 e0       	ldi	r18, 0x07	; 7
    3d8e:	33 27       	eor	r19, r19
    3d90:	da 01       	movw	r26, r20
    3d92:	99 0f       	add	r25, r25
    3d94:	31 1d       	adc	r19, r1
    3d96:	87 fd       	sbrc	r24, 7
    3d98:	91 60       	ori	r25, 0x01	; 1
    3d9a:	00 96       	adiw	r24, 0x00	; 0
    3d9c:	61 05       	cpc	r22, r1
    3d9e:	71 05       	cpc	r23, r1
    3da0:	39 f4       	brne	.+14     	; 0x3db0 <__ftoa_engine+0x28>
    3da2:	32 60       	ori	r19, 0x02	; 2
    3da4:	2e 5f       	subi	r18, 0xFE	; 254
    3da6:	3d 93       	st	X+, r19
    3da8:	30 e3       	ldi	r19, 0x30	; 48
    3daa:	2a 95       	dec	r18
    3dac:	e1 f7       	brne	.-8      	; 0x3da6 <__ftoa_engine+0x1e>
    3dae:	08 95       	ret
    3db0:	9f 3f       	cpi	r25, 0xFF	; 255
    3db2:	30 f0       	brcs	.+12     	; 0x3dc0 <__ftoa_engine+0x38>
    3db4:	80 38       	cpi	r24, 0x80	; 128
    3db6:	71 05       	cpc	r23, r1
    3db8:	61 05       	cpc	r22, r1
    3dba:	09 f0       	breq	.+2      	; 0x3dbe <__ftoa_engine+0x36>
    3dbc:	3c 5f       	subi	r19, 0xFC	; 252
    3dbe:	3c 5f       	subi	r19, 0xFC	; 252
    3dc0:	3d 93       	st	X+, r19
    3dc2:	91 30       	cpi	r25, 0x01	; 1
    3dc4:	08 f0       	brcs	.+2      	; 0x3dc8 <__ftoa_engine+0x40>
    3dc6:	80 68       	ori	r24, 0x80	; 128
    3dc8:	91 1d       	adc	r25, r1
    3dca:	df 93       	push	r29
    3dcc:	cf 93       	push	r28
    3dce:	1f 93       	push	r17
    3dd0:	0f 93       	push	r16
    3dd2:	ff 92       	push	r15
    3dd4:	ef 92       	push	r14
    3dd6:	19 2f       	mov	r17, r25
    3dd8:	98 7f       	andi	r25, 0xF8	; 248
    3dda:	96 95       	lsr	r25
    3ddc:	e9 2f       	mov	r30, r25
    3dde:	96 95       	lsr	r25
    3de0:	96 95       	lsr	r25
    3de2:	e9 0f       	add	r30, r25
    3de4:	ff 27       	eor	r31, r31
    3de6:	e2 55       	subi	r30, 0x52	; 82
    3de8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dea:	99 27       	eor	r25, r25
    3dec:	33 27       	eor	r19, r19
    3dee:	ee 24       	eor	r14, r14
    3df0:	ff 24       	eor	r15, r15
    3df2:	a7 01       	movw	r20, r14
    3df4:	e7 01       	movw	r28, r14
    3df6:	05 90       	lpm	r0, Z+
    3df8:	08 94       	sec
    3dfa:	07 94       	ror	r0
    3dfc:	28 f4       	brcc	.+10     	; 0x3e08 <__ftoa_engine+0x80>
    3dfe:	36 0f       	add	r19, r22
    3e00:	e7 1e       	adc	r14, r23
    3e02:	f8 1e       	adc	r15, r24
    3e04:	49 1f       	adc	r20, r25
    3e06:	51 1d       	adc	r21, r1
    3e08:	66 0f       	add	r22, r22
    3e0a:	77 1f       	adc	r23, r23
    3e0c:	88 1f       	adc	r24, r24
    3e0e:	99 1f       	adc	r25, r25
    3e10:	06 94       	lsr	r0
    3e12:	a1 f7       	brne	.-24     	; 0x3dfc <__ftoa_engine+0x74>
    3e14:	05 90       	lpm	r0, Z+
    3e16:	07 94       	ror	r0
    3e18:	28 f4       	brcc	.+10     	; 0x3e24 <__ftoa_engine+0x9c>
    3e1a:	e7 0e       	add	r14, r23
    3e1c:	f8 1e       	adc	r15, r24
    3e1e:	49 1f       	adc	r20, r25
    3e20:	56 1f       	adc	r21, r22
    3e22:	c1 1d       	adc	r28, r1
    3e24:	77 0f       	add	r23, r23
    3e26:	88 1f       	adc	r24, r24
    3e28:	99 1f       	adc	r25, r25
    3e2a:	66 1f       	adc	r22, r22
    3e2c:	06 94       	lsr	r0
    3e2e:	a1 f7       	brne	.-24     	; 0x3e18 <__ftoa_engine+0x90>
    3e30:	05 90       	lpm	r0, Z+
    3e32:	07 94       	ror	r0
    3e34:	28 f4       	brcc	.+10     	; 0x3e40 <__ftoa_engine+0xb8>
    3e36:	f8 0e       	add	r15, r24
    3e38:	49 1f       	adc	r20, r25
    3e3a:	56 1f       	adc	r21, r22
    3e3c:	c7 1f       	adc	r28, r23
    3e3e:	d1 1d       	adc	r29, r1
    3e40:	88 0f       	add	r24, r24
    3e42:	99 1f       	adc	r25, r25
    3e44:	66 1f       	adc	r22, r22
    3e46:	77 1f       	adc	r23, r23
    3e48:	06 94       	lsr	r0
    3e4a:	a1 f7       	brne	.-24     	; 0x3e34 <__ftoa_engine+0xac>
    3e4c:	05 90       	lpm	r0, Z+
    3e4e:	07 94       	ror	r0
    3e50:	20 f4       	brcc	.+8      	; 0x3e5a <__ftoa_engine+0xd2>
    3e52:	49 0f       	add	r20, r25
    3e54:	56 1f       	adc	r21, r22
    3e56:	c7 1f       	adc	r28, r23
    3e58:	d8 1f       	adc	r29, r24
    3e5a:	99 0f       	add	r25, r25
    3e5c:	66 1f       	adc	r22, r22
    3e5e:	77 1f       	adc	r23, r23
    3e60:	88 1f       	adc	r24, r24
    3e62:	06 94       	lsr	r0
    3e64:	a9 f7       	brne	.-22     	; 0x3e50 <__ftoa_engine+0xc8>
    3e66:	84 91       	lpm	r24, Z+
    3e68:	10 95       	com	r17
    3e6a:	17 70       	andi	r17, 0x07	; 7
    3e6c:	41 f0       	breq	.+16     	; 0x3e7e <__ftoa_engine+0xf6>
    3e6e:	d6 95       	lsr	r29
    3e70:	c7 95       	ror	r28
    3e72:	57 95       	ror	r21
    3e74:	47 95       	ror	r20
    3e76:	f7 94       	ror	r15
    3e78:	e7 94       	ror	r14
    3e7a:	1a 95       	dec	r17
    3e7c:	c1 f7       	brne	.-16     	; 0x3e6e <__ftoa_engine+0xe6>
    3e7e:	e4 e5       	ldi	r30, 0x54	; 84
    3e80:	f0 e0       	ldi	r31, 0x00	; 0
    3e82:	68 94       	set
    3e84:	15 90       	lpm	r1, Z+
    3e86:	15 91       	lpm	r17, Z+
    3e88:	35 91       	lpm	r19, Z+
    3e8a:	65 91       	lpm	r22, Z+
    3e8c:	95 91       	lpm	r25, Z+
    3e8e:	05 90       	lpm	r0, Z+
    3e90:	7f e2       	ldi	r23, 0x2F	; 47
    3e92:	73 95       	inc	r23
    3e94:	e1 18       	sub	r14, r1
    3e96:	f1 0a       	sbc	r15, r17
    3e98:	43 0b       	sbc	r20, r19
    3e9a:	56 0b       	sbc	r21, r22
    3e9c:	c9 0b       	sbc	r28, r25
    3e9e:	d0 09       	sbc	r29, r0
    3ea0:	c0 f7       	brcc	.-16     	; 0x3e92 <__ftoa_engine+0x10a>
    3ea2:	e1 0c       	add	r14, r1
    3ea4:	f1 1e       	adc	r15, r17
    3ea6:	43 1f       	adc	r20, r19
    3ea8:	56 1f       	adc	r21, r22
    3eaa:	c9 1f       	adc	r28, r25
    3eac:	d0 1d       	adc	r29, r0
    3eae:	7e f4       	brtc	.+30     	; 0x3ece <__ftoa_engine+0x146>
    3eb0:	70 33       	cpi	r23, 0x30	; 48
    3eb2:	11 f4       	brne	.+4      	; 0x3eb8 <__ftoa_engine+0x130>
    3eb4:	8a 95       	dec	r24
    3eb6:	e6 cf       	rjmp	.-52     	; 0x3e84 <__ftoa_engine+0xfc>
    3eb8:	e8 94       	clt
    3eba:	01 50       	subi	r16, 0x01	; 1
    3ebc:	30 f0       	brcs	.+12     	; 0x3eca <__ftoa_engine+0x142>
    3ebe:	08 0f       	add	r16, r24
    3ec0:	0a f4       	brpl	.+2      	; 0x3ec4 <__ftoa_engine+0x13c>
    3ec2:	00 27       	eor	r16, r16
    3ec4:	02 17       	cp	r16, r18
    3ec6:	08 f4       	brcc	.+2      	; 0x3eca <__ftoa_engine+0x142>
    3ec8:	20 2f       	mov	r18, r16
    3eca:	23 95       	inc	r18
    3ecc:	02 2f       	mov	r16, r18
    3ece:	7a 33       	cpi	r23, 0x3A	; 58
    3ed0:	28 f0       	brcs	.+10     	; 0x3edc <__ftoa_engine+0x154>
    3ed2:	79 e3       	ldi	r23, 0x39	; 57
    3ed4:	7d 93       	st	X+, r23
    3ed6:	2a 95       	dec	r18
    3ed8:	e9 f7       	brne	.-6      	; 0x3ed4 <__ftoa_engine+0x14c>
    3eda:	10 c0       	rjmp	.+32     	; 0x3efc <__ftoa_engine+0x174>
    3edc:	7d 93       	st	X+, r23
    3ede:	2a 95       	dec	r18
    3ee0:	89 f6       	brne	.-94     	; 0x3e84 <__ftoa_engine+0xfc>
    3ee2:	06 94       	lsr	r0
    3ee4:	97 95       	ror	r25
    3ee6:	67 95       	ror	r22
    3ee8:	37 95       	ror	r19
    3eea:	17 95       	ror	r17
    3eec:	17 94       	ror	r1
    3eee:	e1 18       	sub	r14, r1
    3ef0:	f1 0a       	sbc	r15, r17
    3ef2:	43 0b       	sbc	r20, r19
    3ef4:	56 0b       	sbc	r21, r22
    3ef6:	c9 0b       	sbc	r28, r25
    3ef8:	d0 09       	sbc	r29, r0
    3efa:	98 f0       	brcs	.+38     	; 0x3f22 <__ftoa_engine+0x19a>
    3efc:	23 95       	inc	r18
    3efe:	7e 91       	ld	r23, -X
    3f00:	73 95       	inc	r23
    3f02:	7a 33       	cpi	r23, 0x3A	; 58
    3f04:	08 f0       	brcs	.+2      	; 0x3f08 <__ftoa_engine+0x180>
    3f06:	70 e3       	ldi	r23, 0x30	; 48
    3f08:	7c 93       	st	X, r23
    3f0a:	20 13       	cpse	r18, r16
    3f0c:	b8 f7       	brcc	.-18     	; 0x3efc <__ftoa_engine+0x174>
    3f0e:	7e 91       	ld	r23, -X
    3f10:	70 61       	ori	r23, 0x10	; 16
    3f12:	7d 93       	st	X+, r23
    3f14:	30 f0       	brcs	.+12     	; 0x3f22 <__ftoa_engine+0x19a>
    3f16:	83 95       	inc	r24
    3f18:	71 e3       	ldi	r23, 0x31	; 49
    3f1a:	7d 93       	st	X+, r23
    3f1c:	70 e3       	ldi	r23, 0x30	; 48
    3f1e:	2a 95       	dec	r18
    3f20:	e1 f7       	brne	.-8      	; 0x3f1a <__ftoa_engine+0x192>
    3f22:	11 24       	eor	r1, r1
    3f24:	ef 90       	pop	r14
    3f26:	ff 90       	pop	r15
    3f28:	0f 91       	pop	r16
    3f2a:	1f 91       	pop	r17
    3f2c:	cf 91       	pop	r28
    3f2e:	df 91       	pop	r29
    3f30:	99 27       	eor	r25, r25
    3f32:	87 fd       	sbrc	r24, 7
    3f34:	90 95       	com	r25
    3f36:	08 95       	ret

00003f38 <strrev>:
    3f38:	dc 01       	movw	r26, r24
    3f3a:	fc 01       	movw	r30, r24
    3f3c:	67 2f       	mov	r22, r23
    3f3e:	71 91       	ld	r23, Z+
    3f40:	77 23       	and	r23, r23
    3f42:	e1 f7       	brne	.-8      	; 0x3f3c <strrev+0x4>
    3f44:	32 97       	sbiw	r30, 0x02	; 2
    3f46:	04 c0       	rjmp	.+8      	; 0x3f50 <strrev+0x18>
    3f48:	7c 91       	ld	r23, X
    3f4a:	6d 93       	st	X+, r22
    3f4c:	70 83       	st	Z, r23
    3f4e:	62 91       	ld	r22, -Z
    3f50:	ae 17       	cp	r26, r30
    3f52:	bf 07       	cpc	r27, r31
    3f54:	c8 f3       	brcs	.-14     	; 0x3f48 <strrev+0x10>
    3f56:	08 95       	ret

00003f58 <__udivmodhi4>:
    3f58:	aa 1b       	sub	r26, r26
    3f5a:	bb 1b       	sub	r27, r27
    3f5c:	51 e1       	ldi	r21, 0x11	; 17
    3f5e:	07 c0       	rjmp	.+14     	; 0x3f6e <__udivmodhi4_ep>

00003f60 <__udivmodhi4_loop>:
    3f60:	aa 1f       	adc	r26, r26
    3f62:	bb 1f       	adc	r27, r27
    3f64:	a6 17       	cp	r26, r22
    3f66:	b7 07       	cpc	r27, r23
    3f68:	10 f0       	brcs	.+4      	; 0x3f6e <__udivmodhi4_ep>
    3f6a:	a6 1b       	sub	r26, r22
    3f6c:	b7 0b       	sbc	r27, r23

00003f6e <__udivmodhi4_ep>:
    3f6e:	88 1f       	adc	r24, r24
    3f70:	99 1f       	adc	r25, r25
    3f72:	5a 95       	dec	r21
    3f74:	a9 f7       	brne	.-22     	; 0x3f60 <__udivmodhi4_loop>
    3f76:	80 95       	com	r24
    3f78:	90 95       	com	r25
    3f7a:	bc 01       	movw	r22, r24
    3f7c:	cd 01       	movw	r24, r26
    3f7e:	08 95       	ret

00003f80 <_exit>:
    3f80:	f8 94       	cli

00003f82 <__stop_program>:
    3f82:	ff cf       	rjmp	.-2      	; 0x3f82 <__stop_program>
