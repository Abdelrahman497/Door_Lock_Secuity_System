
MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000264c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  0000264c  000026e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  00800090  00800090  00002710  2**0
                  ALLOC
  3 .stab         00002eec  00000000  00000000  00002710  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001512  00000000  00000000  000055fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006c4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006dbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008a07  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000098f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a6a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a800  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000aa8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b25b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 51 0b 	jmp	0x16a2	; 0x16a2 <__vector_4>
      14:	0c 94 1e 0b 	jmp	0x163c	; 0x163c <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 eb 0a 	jmp	0x15d6	; 0x15d6 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 b8 0a 	jmp	0x1570	; 0x1570 <__vector_9>
      28:	0c 94 85 0a 	jmp	0x150a	; 0x150a <__vector_10>
      2c:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e4       	ldi	r30, 0x4C	; 76
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3b       	cpi	r26, 0xB0	; 176
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bf 09 	call	0x137e	; 0x137e <main>
      8a:	0c 94 24 13 	jmp	0x2648	; 0x2648 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ed 12 	jmp	0x25da	; 0x25da <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 09 13 	jmp	0x2612	; 0x2612 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 15 13 	jmp	0x262a	; 0x262a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 15 13 	jmp	0x262a	; 0x262a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ed 12 	jmp	0x25da	; 0x25da <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 09 13 	jmp	0x2612	; 0x2612 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 15 13 	jmp	0x262a	; 0x262a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 15 13 	jmp	0x262a	; 0x262a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 15 13 	jmp	0x262a	; 0x262a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 19 13 	jmp	0x2632	; 0x2632 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_init>:
 *                          Functions Definitions                              *
 *******************************************************************************/

/* Function to initialize the BUZZER pin as output */
void Buzzer_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID , BUZZER_PIN_ID , PIN_OUTPUT);
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <GPIO_setupPinDirection>
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <Buzzer_on>:

/* Function to turn on BUZZER */
void Buzzer_on(void)
{
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin( BUZZER_PORT_ID ,  BUZZER_PIN_ID , LOGIC_HIGH);
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	67 e0       	ldi	r22, 0x07	; 7
     b6a:	41 e0       	ldi	r20, 0x01	; 1
     b6c:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <GPIO_writePin>
}
     b70:	cf 91       	pop	r28
     b72:	df 91       	pop	r29
     b74:	08 95       	ret

00000b76 <Buzzer_off>:

/* Function to turn off BUZZER */
void Buzzer_off(void)
{
     b76:	df 93       	push	r29
     b78:	cf 93       	push	r28
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin( BUZZER_PORT_ID , BUZZER_PIN_ID , LOGIC_LOW);
     b7e:	82 e0       	ldi	r24, 0x02	; 2
     b80:	67 e0       	ldi	r22, 0x07	; 7
     b82:	40 e0       	ldi	r20, 0x00	; 0
     b84:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <GPIO_writePin>
}
     b88:	cf 91       	pop	r28
     b8a:	df 91       	pop	r29
     b8c:	08 95       	ret

00000b8e <Initialise>:
/*
 * Initializes hardware components and communication protocols.
 * DC motor, buzzer, PIR sensor, UART, and TWI (I2C).
 */
void Initialise (void)
{
     b8e:	df 93       	push	r29
     b90:	cf 93       	push	r28
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
     b96:	64 97       	sbiw	r28, 0x14	; 20
     b98:	0f b6       	in	r0, 0x3f	; 63
     b9a:	f8 94       	cli
     b9c:	de bf       	out	0x3e, r29	; 62
     b9e:	0f be       	out	0x3f, r0	; 63
     ba0:	cd bf       	out	0x3d, r28	; 61
	DcMotor_Init();
     ba2:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DcMotor_Init>
	Buzzer_init();
     ba6:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_init>
	PIR_init();
     baa:	0e 94 36 0a 	call	0x146c	; 0x146c <PIR_init>

	/* Enable global interrupts by setting the 7th bit of the SREG register */
	SREG |= (1<<7);
     bae:	af e5       	ldi	r26, 0x5F	; 95
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	ef e5       	ldi	r30, 0x5F	; 95
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 81       	ld	r24, Z
     bb8:	80 68       	ori	r24, 0x80	; 128
     bba:	8c 93       	st	X, r24
	 * 8-bit data
	 * No parity
	 * 1 stop bit
	 * Baud rate: 9600
	 */
	UART_ConfigType ptr = {(uint8)EIGHT_BIT,(uint8)DISABLE,(uint8)ONE_BIT,(uint16)9600};
     bbc:	ce 01       	movw	r24, r28
     bbe:	01 96       	adiw	r24, 0x01	; 1
     bc0:	9c 87       	std	Y+12, r25	; 0x0c
     bc2:	8b 87       	std	Y+11, r24	; 0x0b
     bc4:	ee e6       	ldi	r30, 0x6E	; 110
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	fe 87       	std	Y+14, r31	; 0x0e
     bca:	ed 87       	std	Y+13, r30	; 0x0d
     bcc:	f5 e0       	ldi	r31, 0x05	; 5
     bce:	ff 87       	std	Y+15, r31	; 0x0f
     bd0:	ed 85       	ldd	r30, Y+13	; 0x0d
     bd2:	fe 85       	ldd	r31, Y+14	; 0x0e
     bd4:	00 80       	ld	r0, Z
     bd6:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd8:	9e 85       	ldd	r25, Y+14	; 0x0e
     bda:	01 96       	adiw	r24, 0x01	; 1
     bdc:	9e 87       	std	Y+14, r25	; 0x0e
     bde:	8d 87       	std	Y+13, r24	; 0x0d
     be0:	eb 85       	ldd	r30, Y+11	; 0x0b
     be2:	fc 85       	ldd	r31, Y+12	; 0x0c
     be4:	00 82       	st	Z, r0
     be6:	8b 85       	ldd	r24, Y+11	; 0x0b
     be8:	9c 85       	ldd	r25, Y+12	; 0x0c
     bea:	01 96       	adiw	r24, 0x01	; 1
     bec:	9c 87       	std	Y+12, r25	; 0x0c
     bee:	8b 87       	std	Y+11, r24	; 0x0b
     bf0:	9f 85       	ldd	r25, Y+15	; 0x0f
     bf2:	91 50       	subi	r25, 0x01	; 1
     bf4:	9f 87       	std	Y+15, r25	; 0x0f
     bf6:	ef 85       	ldd	r30, Y+15	; 0x0f
     bf8:	ee 23       	and	r30, r30
     bfa:	51 f7       	brne	.-44     	; 0xbd0 <Initialise+0x42>
	UART_init(&ptr);
     bfc:	ce 01       	movw	r24, r28
     bfe:	01 96       	adiw	r24, 0x01	; 1
     c00:	0e 94 b7 11 	call	0x236e	; 0x236e <UART_init>

	/* Configure TWI (I2C) settings:
	 * Adress : 0b00000110
	 * Mode: FAST_MODE (set the I2C to fast mode)
	 */
	TWI_ConfigType TWI_Config = { 0b00000110 , FAST_MODE };
     c04:	ce 01       	movw	r24, r28
     c06:	06 96       	adiw	r24, 0x06	; 6
     c08:	99 8b       	std	Y+17, r25	; 0x11
     c0a:	88 8b       	std	Y+16, r24	; 0x10
     c0c:	e9 e6       	ldi	r30, 0x69	; 105
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	fb 8b       	std	Y+19, r31	; 0x13
     c12:	ea 8b       	std	Y+18, r30	; 0x12
     c14:	f5 e0       	ldi	r31, 0x05	; 5
     c16:	fc 8b       	std	Y+20, r31	; 0x14
     c18:	ea 89       	ldd	r30, Y+18	; 0x12
     c1a:	fb 89       	ldd	r31, Y+19	; 0x13
     c1c:	00 80       	ld	r0, Z
     c1e:	8a 89       	ldd	r24, Y+18	; 0x12
     c20:	9b 89       	ldd	r25, Y+19	; 0x13
     c22:	01 96       	adiw	r24, 0x01	; 1
     c24:	9b 8b       	std	Y+19, r25	; 0x13
     c26:	8a 8b       	std	Y+18, r24	; 0x12
     c28:	e8 89       	ldd	r30, Y+16	; 0x10
     c2a:	f9 89       	ldd	r31, Y+17	; 0x11
     c2c:	00 82       	st	Z, r0
     c2e:	88 89       	ldd	r24, Y+16	; 0x10
     c30:	99 89       	ldd	r25, Y+17	; 0x11
     c32:	01 96       	adiw	r24, 0x01	; 1
     c34:	99 8b       	std	Y+17, r25	; 0x11
     c36:	88 8b       	std	Y+16, r24	; 0x10
     c38:	9c 89       	ldd	r25, Y+20	; 0x14
     c3a:	91 50       	subi	r25, 0x01	; 1
     c3c:	9c 8b       	std	Y+20, r25	; 0x14
     c3e:	ec 89       	ldd	r30, Y+20	; 0x14
     c40:	ee 23       	and	r30, r30
     c42:	51 f7       	brne	.-44     	; 0xc18 <Initialise+0x8a>
	TWI_init(&TWI_Config);
     c44:	ce 01       	movw	r24, r28
     c46:	06 96       	adiw	r24, 0x06	; 6
     c48:	0e 94 19 11 	call	0x2232	; 0x2232 <TWI_init>

}
     c4c:	64 96       	adiw	r28, 0x14	; 20
     c4e:	0f b6       	in	r0, 0x3f	; 63
     c50:	f8 94       	cli
     c52:	de bf       	out	0x3e, r29	; 62
     c54:	0f be       	out	0x3f, r0	; 63
     c56:	cd bf       	out	0x3d, r28	; 61
     c58:	cf 91       	pop	r28
     c5a:	df 91       	pop	r29
     c5c:	08 95       	ret

00000c5e <Recive_Password>:

/* Receives a password via UART and stores it in the given array. */
void Recive_Password (uint8 array[])
{
     c5e:	0f 93       	push	r16
     c60:	1f 93       	push	r17
     c62:	df 93       	push	r29
     c64:	cf 93       	push	r28
     c66:	00 d0       	rcall	.+0      	; 0xc68 <Recive_Password+0xa>
     c68:	cd b7       	in	r28, 0x3d	; 61
     c6a:	de b7       	in	r29, 0x3e	; 62
     c6c:	9a 83       	std	Y+2, r25	; 0x02
     c6e:	89 83       	std	Y+1, r24	; 0x01
	/*Loop to recive password sent by (HMI MCU) */
	for (i=0 ; i<size ; i++)
     c70:	10 92 90 00 	sts	0x0090, r1
     c74:	12 c0       	rjmp	.+36     	; 0xc9a <Recive_Password+0x3c>
	{
		/* Receive a byte from UART and store it in the array */
		array[i] = UART_recieveByte();
     c76:	80 91 90 00 	lds	r24, 0x0090
     c7a:	28 2f       	mov	r18, r24
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	89 81       	ldd	r24, Y+1	; 0x01
     c80:	9a 81       	ldd	r25, Y+2	; 0x02
     c82:	8c 01       	movw	r16, r24
     c84:	02 0f       	add	r16, r18
     c86:	13 1f       	adc	r17, r19
     c88:	0e 94 50 12 	call	0x24a0	; 0x24a0 <UART_recieveByte>
     c8c:	f8 01       	movw	r30, r16
     c8e:	80 83       	st	Z, r24

/* Receives a password via UART and stores it in the given array. */
void Recive_Password (uint8 array[])
{
	/*Loop to recive password sent by (HMI MCU) */
	for (i=0 ; i<size ; i++)
     c90:	80 91 90 00 	lds	r24, 0x0090
     c94:	8f 5f       	subi	r24, 0xFF	; 255
     c96:	80 93 90 00 	sts	0x0090, r24
     c9a:	80 91 90 00 	lds	r24, 0x0090
     c9e:	85 30       	cpi	r24, 0x05	; 5
     ca0:	50 f3       	brcs	.-44     	; 0xc76 <Recive_Password+0x18>
	{
		/* Receive a byte from UART and store it in the array */
		array[i] = UART_recieveByte();
	}
}
     ca2:	0f 90       	pop	r0
     ca4:	0f 90       	pop	r0
     ca6:	cf 91       	pop	r28
     ca8:	df 91       	pop	r29
     caa:	1f 91       	pop	r17
     cac:	0f 91       	pop	r16
     cae:	08 95       	ret

00000cb0 <Check_Passwords_Match>:
/*
 * Compares two passwords and sends the result via UART.
 * Repeats the process until the passwords match.
 */
void Check_Passwords_Match(void)
{
     cb0:	df 93       	push	r29
     cb2:	cf 93       	push	r28
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
	do
	{
		match = 1;  /* Assume passwords match initially*/
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	80 93 68 00 	sts	0x0068, r24

		/* Loop to compare each byte in both passwords */
		for (i = 0; i < size; i++)
     cbe:	10 92 90 00 	sts	0x0090, r1
     cc2:	1a c0       	rjmp	.+52     	; 0xcf8 <Check_Passwords_Match+0x48>
		{
			if (pass_Recived[i] != pass_check_Recived[i])
     cc4:	80 91 90 00 	lds	r24, 0x0090
     cc8:	88 2f       	mov	r24, r24
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	fc 01       	movw	r30, r24
     cce:	ef 55       	subi	r30, 0x5F	; 95
     cd0:	ff 4f       	sbci	r31, 0xFF	; 255
     cd2:	20 81       	ld	r18, Z
     cd4:	80 91 90 00 	lds	r24, 0x0090
     cd8:	88 2f       	mov	r24, r24
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	fc 01       	movw	r30, r24
     cde:	e4 56       	subi	r30, 0x64	; 100
     ce0:	ff 4f       	sbci	r31, 0xFF	; 255
     ce2:	80 81       	ld	r24, Z
     ce4:	28 17       	cp	r18, r24
     ce6:	19 f0       	breq	.+6      	; 0xcee <Check_Passwords_Match+0x3e>
			{
				match = 0;  /* Set flag to indicate mismatch */
     ce8:	10 92 68 00 	sts	0x0068, r1
     cec:	09 c0       	rjmp	.+18     	; 0xd00 <Check_Passwords_Match+0x50>
	do
	{
		match = 1;  /* Assume passwords match initially*/

		/* Loop to compare each byte in both passwords */
		for (i = 0; i < size; i++)
     cee:	80 91 90 00 	lds	r24, 0x0090
     cf2:	8f 5f       	subi	r24, 0xFF	; 255
     cf4:	80 93 90 00 	sts	0x0090, r24
     cf8:	80 91 90 00 	lds	r24, 0x0090
     cfc:	85 30       	cpi	r24, 0x05	; 5
     cfe:	10 f3       	brcs	.-60     	; 0xcc4 <Check_Passwords_Match+0x14>
				break;      /* Exit loop on first mismatch */
			}
		}

		/* Send result based on match flag */
		if (match)
     d00:	80 91 68 00 	lds	r24, 0x0068
     d04:	88 23       	and	r24, r24
     d06:	21 f0       	breq	.+8      	; 0xd10 <Check_Passwords_Match+0x60>
		{
			UART_sendByte(SUCCESS); 	 /* Send SUCCESS if all matched */
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	0e 94 39 12 	call	0x2472	; 0x2472 <UART_sendByte>
     d0e:	0b c0       	rjmp	.+22     	; 0xd26 <Check_Passwords_Match+0x76>
		}
		else
		{
			UART_sendByte(FAIL);   		 /* Send SUCCESS if all matched */
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	0e 94 39 12 	call	0x2472	; 0x2472 <UART_sendByte>
			Recive_Password(pass_Recived);
     d16:	81 ea       	ldi	r24, 0xA1	; 161
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	0e 94 2f 06 	call	0xc5e	; 0xc5e <Recive_Password>
			Recive_Password(pass_check_Recived);
     d1e:	8c e9       	ldi	r24, 0x9C	; 156
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	0e 94 2f 06 	call	0xc5e	; 0xc5e <Recive_Password>

		}

	} while (!match);  /* Repeat until passwords match */
     d26:	80 91 68 00 	lds	r24, 0x0068
     d2a:	88 23       	and	r24, r24
     d2c:	29 f2       	breq	.-118    	; 0xcb8 <Check_Passwords_Match+0x8>
}
     d2e:	cf 91       	pop	r28
     d30:	df 91       	pop	r29
     d32:	08 95       	ret

00000d34 <Save_Password_EEPROM>:

/* Saves the received password to EEPROM if passwords match. */
void Save_Password_EEPROM (void)
{
     d34:	df 93       	push	r29
     d36:	cf 93       	push	r28
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
     d3c:	6f 97       	sbiw	r28, 0x1f	; 31
     d3e:	0f b6       	in	r0, 0x3f	; 63
     d40:	f8 94       	cli
     d42:	de bf       	out	0x3e, r29	; 62
     d44:	0f be       	out	0x3f, r0	; 63
     d46:	cd bf       	out	0x3d, r28	; 61
	if (match)  /* Check if passwords matched */
     d48:	80 91 68 00 	lds	r24, 0x0068
     d4c:	88 23       	and	r24, r24
     d4e:	09 f4       	brne	.+2      	; 0xd52 <Save_Password_EEPROM+0x1e>
     d50:	23 c1       	rjmp	.+582    	; 0xf98 <Save_Password_EEPROM+0x264>
	{
		uint16 address = 0x0311;  /* Starting address for password storage */
     d52:	81 e1       	ldi	r24, 0x11	; 17
     d54:	93 e0       	ldi	r25, 0x03	; 3
     d56:	9f 8f       	std	Y+31, r25	; 0x1f
     d58:	8e 8f       	std	Y+30, r24	; 0x1e

		for (i = 0; i < size; i++)
     d5a:	10 92 90 00 	sts	0x0090, r1
     d5e:	89 c0       	rjmp	.+274    	; 0xe72 <Save_Password_EEPROM+0x13e>
		{
			EEPROM_writeByte(address, pass_Recived[i]);  /* Write each byte to EEPROM */
     d60:	80 91 90 00 	lds	r24, 0x0090
     d64:	88 2f       	mov	r24, r24
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	fc 01       	movw	r30, r24
     d6a:	ef 55       	subi	r30, 0x5F	; 95
     d6c:	ff 4f       	sbci	r31, 0xFF	; 255
     d6e:	20 81       	ld	r18, Z
     d70:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d72:	9f 8d       	ldd	r25, Y+31	; 0x1f
     d74:	62 2f       	mov	r22, r18
     d76:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <EEPROM_writeByte>
			address++;  /* Move to the next address for each byte */
     d7a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d7c:	9f 8d       	ldd	r25, Y+31	; 0x1f
     d7e:	01 96       	adiw	r24, 0x01	; 1
     d80:	9f 8f       	std	Y+31, r25	; 0x1f
     d82:	8e 8f       	std	Y+30, r24	; 0x1e
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	a0 e2       	ldi	r26, 0x20	; 32
     d8a:	b1 e4       	ldi	r27, 0x41	; 65
     d8c:	89 8f       	std	Y+25, r24	; 0x19
     d8e:	9a 8f       	std	Y+26, r25	; 0x1a
     d90:	ab 8f       	std	Y+27, r26	; 0x1b
     d92:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d94:	69 8d       	ldd	r22, Y+25	; 0x19
     d96:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d98:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d9c:	20 e0       	ldi	r18, 0x00	; 0
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	4a ef       	ldi	r20, 0xFA	; 250
     da2:	54 e4       	ldi	r21, 0x44	; 68
     da4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     da8:	dc 01       	movw	r26, r24
     daa:	cb 01       	movw	r24, r22
     dac:	8d 8b       	std	Y+21, r24	; 0x15
     dae:	9e 8b       	std	Y+22, r25	; 0x16
     db0:	af 8b       	std	Y+23, r26	; 0x17
     db2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     db4:	6d 89       	ldd	r22, Y+21	; 0x15
     db6:	7e 89       	ldd	r23, Y+22	; 0x16
     db8:	8f 89       	ldd	r24, Y+23	; 0x17
     dba:	98 8d       	ldd	r25, Y+24	; 0x18
     dbc:	20 e0       	ldi	r18, 0x00	; 0
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	40 e8       	ldi	r20, 0x80	; 128
     dc2:	5f e3       	ldi	r21, 0x3F	; 63
     dc4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dc8:	88 23       	and	r24, r24
     dca:	2c f4       	brge	.+10     	; 0xdd6 <Save_Password_EEPROM+0xa2>
		__ticks = 1;
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	9c 8b       	std	Y+20, r25	; 0x14
     dd2:	8b 8b       	std	Y+19, r24	; 0x13
     dd4:	3f c0       	rjmp	.+126    	; 0xe54 <Save_Password_EEPROM+0x120>
	else if (__tmp > 65535)
     dd6:	6d 89       	ldd	r22, Y+21	; 0x15
     dd8:	7e 89       	ldd	r23, Y+22	; 0x16
     dda:	8f 89       	ldd	r24, Y+23	; 0x17
     ddc:	98 8d       	ldd	r25, Y+24	; 0x18
     dde:	20 e0       	ldi	r18, 0x00	; 0
     de0:	3f ef       	ldi	r19, 0xFF	; 255
     de2:	4f e7       	ldi	r20, 0x7F	; 127
     de4:	57 e4       	ldi	r21, 0x47	; 71
     de6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dea:	18 16       	cp	r1, r24
     dec:	4c f5       	brge	.+82     	; 0xe40 <Save_Password_EEPROM+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dee:	69 8d       	ldd	r22, Y+25	; 0x19
     df0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     df2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     df4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	40 e2       	ldi	r20, 0x20	; 32
     dfc:	51 e4       	ldi	r21, 0x41	; 65
     dfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e02:	dc 01       	movw	r26, r24
     e04:	cb 01       	movw	r24, r22
     e06:	bc 01       	movw	r22, r24
     e08:	cd 01       	movw	r24, r26
     e0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e0e:	dc 01       	movw	r26, r24
     e10:	cb 01       	movw	r24, r22
     e12:	9c 8b       	std	Y+20, r25	; 0x14
     e14:	8b 8b       	std	Y+19, r24	; 0x13
     e16:	0f c0       	rjmp	.+30     	; 0xe36 <Save_Password_EEPROM+0x102>
     e18:	88 ec       	ldi	r24, 0xC8	; 200
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	9a 8b       	std	Y+18, r25	; 0x12
     e1e:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e20:	89 89       	ldd	r24, Y+17	; 0x11
     e22:	9a 89       	ldd	r25, Y+18	; 0x12
     e24:	01 97       	sbiw	r24, 0x01	; 1
     e26:	f1 f7       	brne	.-4      	; 0xe24 <Save_Password_EEPROM+0xf0>
     e28:	9a 8b       	std	Y+18, r25	; 0x12
     e2a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e2c:	8b 89       	ldd	r24, Y+19	; 0x13
     e2e:	9c 89       	ldd	r25, Y+20	; 0x14
     e30:	01 97       	sbiw	r24, 0x01	; 1
     e32:	9c 8b       	std	Y+20, r25	; 0x14
     e34:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e36:	8b 89       	ldd	r24, Y+19	; 0x13
     e38:	9c 89       	ldd	r25, Y+20	; 0x14
     e3a:	00 97       	sbiw	r24, 0x00	; 0
     e3c:	69 f7       	brne	.-38     	; 0xe18 <Save_Password_EEPROM+0xe4>
     e3e:	14 c0       	rjmp	.+40     	; 0xe68 <Save_Password_EEPROM+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e40:	6d 89       	ldd	r22, Y+21	; 0x15
     e42:	7e 89       	ldd	r23, Y+22	; 0x16
     e44:	8f 89       	ldd	r24, Y+23	; 0x17
     e46:	98 8d       	ldd	r25, Y+24	; 0x18
     e48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e4c:	dc 01       	movw	r26, r24
     e4e:	cb 01       	movw	r24, r22
     e50:	9c 8b       	std	Y+20, r25	; 0x14
     e52:	8b 8b       	std	Y+19, r24	; 0x13
     e54:	8b 89       	ldd	r24, Y+19	; 0x13
     e56:	9c 89       	ldd	r25, Y+20	; 0x14
     e58:	98 8b       	std	Y+16, r25	; 0x10
     e5a:	8f 87       	std	Y+15, r24	; 0x0f
     e5c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e5e:	98 89       	ldd	r25, Y+16	; 0x10
     e60:	01 97       	sbiw	r24, 0x01	; 1
     e62:	f1 f7       	brne	.-4      	; 0xe60 <Save_Password_EEPROM+0x12c>
     e64:	98 8b       	std	Y+16, r25	; 0x10
     e66:	8f 87       	std	Y+15, r24	; 0x0f
{
	if (match)  /* Check if passwords matched */
	{
		uint16 address = 0x0311;  /* Starting address for password storage */

		for (i = 0; i < size; i++)
     e68:	80 91 90 00 	lds	r24, 0x0090
     e6c:	8f 5f       	subi	r24, 0xFF	; 255
     e6e:	80 93 90 00 	sts	0x0090, r24
     e72:	80 91 90 00 	lds	r24, 0x0090
     e76:	85 30       	cpi	r24, 0x05	; 5
     e78:	08 f4       	brcc	.+2      	; 0xe7c <Save_Password_EEPROM+0x148>
     e7a:	72 cf       	rjmp	.-284    	; 0xd60 <Save_Password_EEPROM+0x2c>
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	a0 e2       	ldi	r26, 0x20	; 32
     e82:	b1 e4       	ldi	r27, 0x41	; 65
     e84:	8b 87       	std	Y+11, r24	; 0x0b
     e86:	9c 87       	std	Y+12, r25	; 0x0c
     e88:	ad 87       	std	Y+13, r26	; 0x0d
     e8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e8c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e8e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e90:	8d 85       	ldd	r24, Y+13	; 0x0d
     e92:	9e 85       	ldd	r25, Y+14	; 0x0e
     e94:	20 e0       	ldi	r18, 0x00	; 0
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	4a ef       	ldi	r20, 0xFA	; 250
     e9a:	54 e4       	ldi	r21, 0x44	; 68
     e9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ea0:	dc 01       	movw	r26, r24
     ea2:	cb 01       	movw	r24, r22
     ea4:	8f 83       	std	Y+7, r24	; 0x07
     ea6:	98 87       	std	Y+8, r25	; 0x08
     ea8:	a9 87       	std	Y+9, r26	; 0x09
     eaa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     eac:	6f 81       	ldd	r22, Y+7	; 0x07
     eae:	78 85       	ldd	r23, Y+8	; 0x08
     eb0:	89 85       	ldd	r24, Y+9	; 0x09
     eb2:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	40 e8       	ldi	r20, 0x80	; 128
     eba:	5f e3       	ldi	r21, 0x3F	; 63
     ebc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ec0:	88 23       	and	r24, r24
     ec2:	2c f4       	brge	.+10     	; 0xece <Save_Password_EEPROM+0x19a>
		__ticks = 1;
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	9e 83       	std	Y+6, r25	; 0x06
     eca:	8d 83       	std	Y+5, r24	; 0x05
     ecc:	3f c0       	rjmp	.+126    	; 0xf4c <Save_Password_EEPROM+0x218>
	else if (__tmp > 65535)
     ece:	6f 81       	ldd	r22, Y+7	; 0x07
     ed0:	78 85       	ldd	r23, Y+8	; 0x08
     ed2:	89 85       	ldd	r24, Y+9	; 0x09
     ed4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	3f ef       	ldi	r19, 0xFF	; 255
     eda:	4f e7       	ldi	r20, 0x7F	; 127
     edc:	57 e4       	ldi	r21, 0x47	; 71
     ede:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ee2:	18 16       	cp	r1, r24
     ee4:	4c f5       	brge	.+82     	; 0xf38 <Save_Password_EEPROM+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ee6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ee8:	7c 85       	ldd	r23, Y+12	; 0x0c
     eea:	8d 85       	ldd	r24, Y+13	; 0x0d
     eec:	9e 85       	ldd	r25, Y+14	; 0x0e
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	40 e2       	ldi	r20, 0x20	; 32
     ef4:	51 e4       	ldi	r21, 0x41	; 65
     ef6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     efa:	dc 01       	movw	r26, r24
     efc:	cb 01       	movw	r24, r22
     efe:	bc 01       	movw	r22, r24
     f00:	cd 01       	movw	r24, r26
     f02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f06:	dc 01       	movw	r26, r24
     f08:	cb 01       	movw	r24, r22
     f0a:	9e 83       	std	Y+6, r25	; 0x06
     f0c:	8d 83       	std	Y+5, r24	; 0x05
     f0e:	0f c0       	rjmp	.+30     	; 0xf2e <Save_Password_EEPROM+0x1fa>
     f10:	88 ec       	ldi	r24, 0xC8	; 200
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	9c 83       	std	Y+4, r25	; 0x04
     f16:	8b 83       	std	Y+3, r24	; 0x03
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	9c 81       	ldd	r25, Y+4	; 0x04
     f1c:	01 97       	sbiw	r24, 0x01	; 1
     f1e:	f1 f7       	brne	.-4      	; 0xf1c <Save_Password_EEPROM+0x1e8>
     f20:	9c 83       	std	Y+4, r25	; 0x04
     f22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f24:	8d 81       	ldd	r24, Y+5	; 0x05
     f26:	9e 81       	ldd	r25, Y+6	; 0x06
     f28:	01 97       	sbiw	r24, 0x01	; 1
     f2a:	9e 83       	std	Y+6, r25	; 0x06
     f2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f2e:	8d 81       	ldd	r24, Y+5	; 0x05
     f30:	9e 81       	ldd	r25, Y+6	; 0x06
     f32:	00 97       	sbiw	r24, 0x00	; 0
     f34:	69 f7       	brne	.-38     	; 0xf10 <Save_Password_EEPROM+0x1dc>
     f36:	14 c0       	rjmp	.+40     	; 0xf60 <Save_Password_EEPROM+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f38:	6f 81       	ldd	r22, Y+7	; 0x07
     f3a:	78 85       	ldd	r23, Y+8	; 0x08
     f3c:	89 85       	ldd	r24, Y+9	; 0x09
     f3e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f44:	dc 01       	movw	r26, r24
     f46:	cb 01       	movw	r24, r22
     f48:	9e 83       	std	Y+6, r25	; 0x06
     f4a:	8d 83       	std	Y+5, r24	; 0x05
     f4c:	8d 81       	ldd	r24, Y+5	; 0x05
     f4e:	9e 81       	ldd	r25, Y+6	; 0x06
     f50:	9a 83       	std	Y+2, r25	; 0x02
     f52:	89 83       	std	Y+1, r24	; 0x01
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	9a 81       	ldd	r25, Y+2	; 0x02
     f58:	01 97       	sbiw	r24, 0x01	; 1
     f5a:	f1 f7       	brne	.-4      	; 0xf58 <Save_Password_EEPROM+0x224>
     f5c:	9a 83       	std	Y+2, r25	; 0x02
     f5e:	89 83       	std	Y+1, r24	; 0x01
			address++;  /* Move to the next address for each byte */
			_delay_ms(10);
		}
		_delay_ms(10);
		/*Reset address to the starting point to read back the password */
		address = 0x0311;
     f60:	81 e1       	ldi	r24, 0x11	; 17
     f62:	93 e0       	ldi	r25, 0x03	; 3
     f64:	9f 8f       	std	Y+31, r25	; 0x1f
     f66:	8e 8f       	std	Y+30, r24	; 0x1e

		/* Read the password back from EEPROM into the new array */
		for (uint8 i = 0; i < size; i++,address++)
     f68:	1d 8e       	std	Y+29, r1	; 0x1d
     f6a:	13 c0       	rjmp	.+38     	; 0xf92 <Save_Password_EEPROM+0x25e>
		{
			EEPROM_readByte(address, &saved_Password[i]); /* Read each byte from EEPROM */
     f6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f6e:	88 2f       	mov	r24, r24
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	9c 01       	movw	r18, r24
     f74:	25 55       	subi	r18, 0x55	; 85
     f76:	3f 4f       	sbci	r19, 0xFF	; 255
     f78:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f7a:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f7c:	b9 01       	movw	r22, r18
     f7e:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <EEPROM_readByte>
		_delay_ms(10);
		/*Reset address to the starting point to read back the password */
		address = 0x0311;

		/* Read the password back from EEPROM into the new array */
		for (uint8 i = 0; i < size; i++,address++)
     f82:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f84:	8f 5f       	subi	r24, 0xFF	; 255
     f86:	8d 8f       	std	Y+29, r24	; 0x1d
     f88:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f8a:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f8c:	01 96       	adiw	r24, 0x01	; 1
     f8e:	9f 8f       	std	Y+31, r25	; 0x1f
     f90:	8e 8f       	std	Y+30, r24	; 0x1e
     f92:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f94:	85 30       	cpi	r24, 0x05	; 5
     f96:	50 f3       	brcs	.-44     	; 0xf6c <Save_Password_EEPROM+0x238>
		{
			EEPROM_readByte(address, &saved_Password[i]); /* Read each byte from EEPROM */
		}
	}
}
     f98:	6f 96       	adiw	r28, 0x1f	; 31
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	f8 94       	cli
     f9e:	de bf       	out	0x3e, r29	; 62
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	cd bf       	out	0x3d, r28	; 61
     fa4:	cf 91       	pop	r28
     fa6:	df 91       	pop	r29
     fa8:	08 95       	ret

00000faa <Recive_Open_Door>:
/*
 * Receives a password and checks it against the saved password.
 * If the password matches, it activates the motor and checks for PIR input.
 */
void Recive_Open_Door(void)
{
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	cd b7       	in	r28, 0x3d	; 61
     fb0:	de b7       	in	r29, 0x3e	; 62
     fb2:	a4 97       	sbiw	r28, 0x24	; 36
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	f8 94       	cli
     fb8:	de bf       	out	0x3e, r29	; 62
     fba:	0f be       	out	0x3f, r0	; 63
     fbc:	cd bf       	out	0x3d, r28	; 61
	/* Receive the password entered by the user */
	Recive_Password (Pass_Entered_Recived);
     fbe:	86 ea       	ldi	r24, 0xA6	; 166
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	0e 94 2f 06 	call	0xc5e	; 0xc5e <Recive_Password>
	match = 1;
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	80 93 68 00 	sts	0x0068, r24

	/* Loop to compare each byte in both passwords */
	for (i = 0; i < size; i++)
     fcc:	10 92 90 00 	sts	0x0090, r1
     fd0:	1a c0       	rjmp	.+52     	; 0x1006 <Recive_Open_Door+0x5c>
	{
		if (saved_Password[i] != Pass_Entered_Recived[i])
     fd2:	80 91 90 00 	lds	r24, 0x0090
     fd6:	88 2f       	mov	r24, r24
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	fc 01       	movw	r30, r24
     fdc:	e5 55       	subi	r30, 0x55	; 85
     fde:	ff 4f       	sbci	r31, 0xFF	; 255
     fe0:	20 81       	ld	r18, Z
     fe2:	80 91 90 00 	lds	r24, 0x0090
     fe6:	88 2f       	mov	r24, r24
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	fc 01       	movw	r30, r24
     fec:	ea 55       	subi	r30, 0x5A	; 90
     fee:	ff 4f       	sbci	r31, 0xFF	; 255
     ff0:	80 81       	ld	r24, Z
     ff2:	28 17       	cp	r18, r24
     ff4:	19 f0       	breq	.+6      	; 0xffc <Recive_Open_Door+0x52>
		{
			match = 0;  /* Set flag to indicate mismatch */
     ff6:	10 92 68 00 	sts	0x0068, r1
     ffa:	09 c0       	rjmp	.+18     	; 0x100e <Recive_Open_Door+0x64>
	/* Receive the password entered by the user */
	Recive_Password (Pass_Entered_Recived);
	match = 1;

	/* Loop to compare each byte in both passwords */
	for (i = 0; i < size; i++)
     ffc:	80 91 90 00 	lds	r24, 0x0090
    1000:	8f 5f       	subi	r24, 0xFF	; 255
    1002:	80 93 90 00 	sts	0x0090, r24
    1006:	80 91 90 00 	lds	r24, 0x0090
    100a:	85 30       	cpi	r24, 0x05	; 5
    100c:	10 f3       	brcs	.-60     	; 0xfd2 <Recive_Open_Door+0x28>
			break;      /* Exit loop on first mismatch */
		}
	}

	/* Send result based on match flag */
	if (match)
    100e:	80 91 68 00 	lds	r24, 0x0068
    1012:	88 23       	and	r24, r24
    1014:	09 f4       	brne	.+2      	; 0x1018 <Recive_Open_Door+0x6e>
    1016:	7f c0       	rjmp	.+254    	; 0x1116 <Recive_Open_Door+0x16c>
	{
		UART_sendByte(SUCCESS); 	 /* Send SUCCESS if all matched */
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	0e 94 39 12 	call	0x2472	; 0x2472 <UART_sendByte>

		/* Initialize timer for motor rotation */
		Timer_ConfigType ptr = {0,3910,Timer_1,Prescale_1024,Compare_Mode};
    101e:	ce 01       	movw	r24, r28
    1020:	01 96       	adiw	r24, 0x01	; 1
    1022:	9f 8b       	std	Y+23, r25	; 0x17
    1024:	8e 8b       	std	Y+22, r24	; 0x16
    1026:	e1 e8       	ldi	r30, 0x81	; 129
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	f9 8f       	std	Y+25, r31	; 0x19
    102c:	e8 8f       	std	Y+24, r30	; 0x18
    102e:	f7 e0       	ldi	r31, 0x07	; 7
    1030:	fa 8f       	std	Y+26, r31	; 0x1a
    1032:	e8 8d       	ldd	r30, Y+24	; 0x18
    1034:	f9 8d       	ldd	r31, Y+25	; 0x19
    1036:	00 80       	ld	r0, Z
    1038:	88 8d       	ldd	r24, Y+24	; 0x18
    103a:	99 8d       	ldd	r25, Y+25	; 0x19
    103c:	01 96       	adiw	r24, 0x01	; 1
    103e:	99 8f       	std	Y+25, r25	; 0x19
    1040:	88 8f       	std	Y+24, r24	; 0x18
    1042:	ee 89       	ldd	r30, Y+22	; 0x16
    1044:	ff 89       	ldd	r31, Y+23	; 0x17
    1046:	00 82       	st	Z, r0
    1048:	8e 89       	ldd	r24, Y+22	; 0x16
    104a:	9f 89       	ldd	r25, Y+23	; 0x17
    104c:	01 96       	adiw	r24, 0x01	; 1
    104e:	9f 8b       	std	Y+23, r25	; 0x17
    1050:	8e 8b       	std	Y+22, r24	; 0x16
    1052:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1054:	91 50       	subi	r25, 0x01	; 1
    1056:	9a 8f       	std	Y+26, r25	; 0x1a
    1058:	ea 8d       	ldd	r30, Y+26	; 0x1a
    105a:	ee 23       	and	r30, r30
    105c:	51 f7       	brne	.-44     	; 0x1032 <Recive_Open_Door+0x88>
		Timer_init(&ptr);
    105e:	ce 01       	movw	r24, r28
    1060:	01 96       	adiw	r24, 0x01	; 1
    1062:	0e 94 84 0b 	call	0x1708	; 0x1708 <Timer_init>
		Timer_setCallBack( Rotate_Motor_CW , Timer_1);
    1066:	81 ed       	ldi	r24, 0xD1	; 209
    1068:	98 e0       	ldi	r25, 0x08	; 8
    106a:	61 e0       	ldi	r22, 0x01	; 1
    106c:	0e 94 ef 0c 	call	0x19de	; 0x19de <Timer_setCallBack>

		/* Wait for the timer to complete */
		while(!Flag);
    1070:	80 91 94 00 	lds	r24, 0x0094
    1074:	88 23       	and	r24, r24
    1076:	e1 f3       	breq	.-8      	; 0x1070 <Recive_Open_Door+0xc6>
		Flag=0;
    1078:	10 92 94 00 	sts	0x0094, r1
		Attempt=0;
    107c:	10 92 92 00 	sts	0x0092, r1

		/* Check the state of the PIR sensor */
		PIR = PIR_getState();
    1080:	0e 94 42 0a 	call	0x1484	; 0x1484 <PIR_getState>
    1084:	80 93 93 00 	sts	0x0093, r24
		if (PIR == 1)
    1088:	80 91 93 00 	lds	r24, 0x0093
    108c:	81 30       	cpi	r24, 0x01	; 1
    108e:	81 f4       	brne	.+32     	; 0x10b0 <Recive_Open_Door+0x106>
		{
			UART_sendByte(SUCCESS); 	 /* Send SUCCESS if all matched */
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	0e 94 39 12 	call	0x2472	; 0x2472 <UART_sendByte>
    1096:	04 c0       	rjmp	.+8      	; 0x10a0 <Recive_Open_Door+0xf6>

			/* Wait until PIR no longer detects movement */
			while(PIR==1)
			{
				PIR = PIR_getState();
    1098:	0e 94 42 0a 	call	0x1484	; 0x1484 <PIR_getState>
    109c:	80 93 93 00 	sts	0x0093, r24
		if (PIR == 1)
		{
			UART_sendByte(SUCCESS); 	 /* Send SUCCESS if all matched */

			/* Wait until PIR no longer detects movement */
			while(PIR==1)
    10a0:	80 91 93 00 	lds	r24, 0x0093
    10a4:	81 30       	cpi	r24, 0x01	; 1
    10a6:	c1 f3       	breq	.-16     	; 0x1098 <Recive_Open_Door+0xee>
			{
				PIR = PIR_getState();
			}
			/* Indicate completion */
			UART_sendByte(DONE);
    10a8:	82 e0       	ldi	r24, 0x02	; 2
    10aa:	0e 94 39 12 	call	0x2472	; 0x2472 <UART_sendByte>
    10ae:	03 c0       	rjmp	.+6      	; 0x10b6 <Recive_Open_Door+0x10c>
		}
		else
		{
			/* Send FAIL if no movement detected */
			UART_sendByte(FAIL);
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	0e 94 39 12 	call	0x2472	; 0x2472 <UART_sendByte>
		}

		/* Initialize timer for motor rotation in the opposite direction */
		Timer_ConfigType ptr2 = {0,3910,Timer_1,Prescale_1024,Compare_Mode};
    10b6:	ce 01       	movw	r24, r28
    10b8:	08 96       	adiw	r24, 0x08	; 8
    10ba:	9c 8f       	std	Y+28, r25	; 0x1c
    10bc:	8b 8f       	std	Y+27, r24	; 0x1b
    10be:	ea e7       	ldi	r30, 0x7A	; 122
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	fe 8f       	std	Y+30, r31	; 0x1e
    10c4:	ed 8f       	std	Y+29, r30	; 0x1d
    10c6:	f7 e0       	ldi	r31, 0x07	; 7
    10c8:	ff 8f       	std	Y+31, r31	; 0x1f
    10ca:	ed 8d       	ldd	r30, Y+29	; 0x1d
    10cc:	fe 8d       	ldd	r31, Y+30	; 0x1e
    10ce:	00 80       	ld	r0, Z
    10d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10d4:	01 96       	adiw	r24, 0x01	; 1
    10d6:	9e 8f       	std	Y+30, r25	; 0x1e
    10d8:	8d 8f       	std	Y+29, r24	; 0x1d
    10da:	eb 8d       	ldd	r30, Y+27	; 0x1b
    10dc:	fc 8d       	ldd	r31, Y+28	; 0x1c
    10de:	00 82       	st	Z, r0
    10e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10e4:	01 96       	adiw	r24, 0x01	; 1
    10e6:	9c 8f       	std	Y+28, r25	; 0x1c
    10e8:	8b 8f       	std	Y+27, r24	; 0x1b
    10ea:	9f 8d       	ldd	r25, Y+31	; 0x1f
    10ec:	91 50       	subi	r25, 0x01	; 1
    10ee:	9f 8f       	std	Y+31, r25	; 0x1f
    10f0:	ef 8d       	ldd	r30, Y+31	; 0x1f
    10f2:	ee 23       	and	r30, r30
    10f4:	51 f7       	brne	.-44     	; 0x10ca <Recive_Open_Door+0x120>
		Timer_init(&ptr2);
    10f6:	ce 01       	movw	r24, r28
    10f8:	08 96       	adiw	r24, 0x08	; 8
    10fa:	0e 94 84 0b 	call	0x1708	; 0x1708 <Timer_init>
		Timer_setCallBack( Rotate_Motor_ACW , Timer_1);
    10fe:	83 ef       	ldi	r24, 0xF3	; 243
    1100:	98 e0       	ldi	r25, 0x08	; 8
    1102:	61 e0       	ldi	r22, 0x01	; 1
    1104:	0e 94 ef 0c 	call	0x19de	; 0x19de <Timer_setCallBack>

		/* Wait for the timer to complete */
		while(!Flag);
    1108:	80 91 94 00 	lds	r24, 0x0094
    110c:	88 23       	and	r24, r24
    110e:	e1 f3       	breq	.-8      	; 0x1108 <Recive_Open_Door+0x15e>
		Flag=0;
    1110:	10 92 94 00 	sts	0x0094, r1
    1114:	3d c0       	rjmp	.+122    	; 0x1190 <Recive_Open_Door+0x1e6>
	}
	else
	{
		UART_sendByte(FAIL);   		 /* Send Fail if all miss matched */
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	0e 94 39 12 	call	0x2472	; 0x2472 <UART_sendByte>
		Attempt++;					 /* Increment the attempt count */
    111c:	80 91 92 00 	lds	r24, 0x0092
    1120:	8f 5f       	subi	r24, 0xFF	; 255
    1122:	80 93 92 00 	sts	0x0092, r24

		/* Check if the maximum attempts have been reached */
		if (Attempt == 3)
    1126:	80 91 92 00 	lds	r24, 0x0092
    112a:	83 30       	cpi	r24, 0x03	; 3
    112c:	89 f5       	brne	.+98     	; 0x1190 <Recive_Open_Door+0x1e6>
		{
			/* Initialize timer for buzzer alert */
			Timer_ConfigType ptr = {0,3910,Timer_1,Prescale_1024,Compare_Mode};
    112e:	ce 01       	movw	r24, r28
    1130:	0f 96       	adiw	r24, 0x0f	; 15
    1132:	99 a3       	std	Y+33, r25	; 0x21
    1134:	88 a3       	std	Y+32, r24	; 0x20
    1136:	e3 e7       	ldi	r30, 0x73	; 115
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	fb a3       	std	Y+35, r31	; 0x23
    113c:	ea a3       	std	Y+34, r30	; 0x22
    113e:	f7 e0       	ldi	r31, 0x07	; 7
    1140:	fc a3       	std	Y+36, r31	; 0x24
    1142:	ea a1       	ldd	r30, Y+34	; 0x22
    1144:	fb a1       	ldd	r31, Y+35	; 0x23
    1146:	00 80       	ld	r0, Z
    1148:	8a a1       	ldd	r24, Y+34	; 0x22
    114a:	9b a1       	ldd	r25, Y+35	; 0x23
    114c:	01 96       	adiw	r24, 0x01	; 1
    114e:	9b a3       	std	Y+35, r25	; 0x23
    1150:	8a a3       	std	Y+34, r24	; 0x22
    1152:	e8 a1       	ldd	r30, Y+32	; 0x20
    1154:	f9 a1       	ldd	r31, Y+33	; 0x21
    1156:	00 82       	st	Z, r0
    1158:	88 a1       	ldd	r24, Y+32	; 0x20
    115a:	99 a1       	ldd	r25, Y+33	; 0x21
    115c:	01 96       	adiw	r24, 0x01	; 1
    115e:	99 a3       	std	Y+33, r25	; 0x21
    1160:	88 a3       	std	Y+32, r24	; 0x20
    1162:	9c a1       	ldd	r25, Y+36	; 0x24
    1164:	91 50       	subi	r25, 0x01	; 1
    1166:	9c a3       	std	Y+36, r25	; 0x24
    1168:	ec a1       	ldd	r30, Y+36	; 0x24
    116a:	ee 23       	and	r30, r30
    116c:	51 f7       	brne	.-44     	; 0x1142 <Recive_Open_Door+0x198>
			Timer_init(&ptr);
    116e:	ce 01       	movw	r24, r28
    1170:	0f 96       	adiw	r24, 0x0f	; 15
    1172:	0e 94 84 0b 	call	0x1708	; 0x1708 <Timer_init>
			Timer_setCallBack( Turn_Buzzer , Timer_1);
    1176:	85 e1       	ldi	r24, 0x15	; 21
    1178:	99 e0       	ldi	r25, 0x09	; 9
    117a:	61 e0       	ldi	r22, 0x01	; 1
    117c:	0e 94 ef 0c 	call	0x19de	; 0x19de <Timer_setCallBack>

			/* Wait for the timer to complete */
			while(!Flag);
    1180:	80 91 94 00 	lds	r24, 0x0094
    1184:	88 23       	and	r24, r24
    1186:	e1 f3       	breq	.-8      	; 0x1180 <Recive_Open_Door+0x1d6>
			Flag=0;
    1188:	10 92 94 00 	sts	0x0094, r1
			Attempt=0;  /* Reset attempt count */
    118c:	10 92 92 00 	sts	0x0092, r1
		}
	}
}
    1190:	a4 96       	adiw	r28, 0x24	; 36
    1192:	0f b6       	in	r0, 0x3f	; 63
    1194:	f8 94       	cli
    1196:	de bf       	out	0x3e, r29	; 62
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	cd bf       	out	0x3d, r28	; 61
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	08 95       	ret

000011a2 <Rotate_Motor_CW>:
/*
 * Rotates the motor clockwise for a specified duration.
 * It`s Call Back function for timer 1
 */
void Rotate_Motor_CW (void)
{
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
	count++;	 /* Increment the rotation count */
    11aa:	80 91 91 00 	lds	r24, 0x0091
    11ae:	8f 5f       	subi	r24, 0xFF	; 255
    11b0:	80 93 91 00 	sts	0x0091, r24
	Flag=0;  	 /* Reset the flag */
    11b4:	10 92 94 00 	sts	0x0094, r1

	/* Rotate the motor clockwise at maximum duty cycle */
	DcMotor_Rotate(CW , MAX_DUTY_CYCLE_100);
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	6f ef       	ldi	r22, 0xFF	; 255
    11bc:	0e 94 fe 09 	call	0x13fc	; 0x13fc <DcMotor_Rotate>

	 /* Stop the motor after a specified count */
	if (count == 15)
    11c0:	80 91 91 00 	lds	r24, 0x0091
    11c4:	8f 30       	cpi	r24, 0x0F	; 15
    11c6:	61 f4       	brne	.+24     	; 0x11e0 <Rotate_Motor_CW+0x3e>
	{
		DcMotor_Rotate(STOP , DUTY_CYCLE_0); /* Stop the motor */
    11c8:	82 e0       	ldi	r24, 0x02	; 2
    11ca:	60 e0       	ldi	r22, 0x00	; 0
    11cc:	0e 94 fe 09 	call	0x13fc	; 0x13fc <DcMotor_Rotate>
		Timer_deInit(Timer_1); /* De-initialize the timer */
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	0e 94 8d 0c 	call	0x191a	; 0x191a <Timer_deInit>
		count = 0; /* Reset count */
    11d6:	10 92 91 00 	sts	0x0091, r1
		Flag=1; /* Set flag to indicate completion */
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	80 93 94 00 	sts	0x0094, r24
	}
}
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	08 95       	ret

000011e6 <Rotate_Motor_ACW>:
/*
 * Rotates the motor counterclockwise for a specified duration.
 * It`s Call Back function for timer 1
 */
void Rotate_Motor_ACW (void)
{
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
	count++;	/* Increment the rotation count */
    11ee:	80 91 91 00 	lds	r24, 0x0091
    11f2:	8f 5f       	subi	r24, 0xFF	; 255
    11f4:	80 93 91 00 	sts	0x0091, r24
	Flag=0;		/* Reset the flag */
    11f8:	10 92 94 00 	sts	0x0094, r1

    /* Rotate the motor counterclockwise at maximum duty cycle */
	DcMotor_Rotate(ACW , MAX_DUTY_CYCLE_100);
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	6f ef       	ldi	r22, 0xFF	; 255
    1200:	0e 94 fe 09 	call	0x13fc	; 0x13fc <DcMotor_Rotate>

	/* Stop the motor after a specified count */
	if (count == 15)
    1204:	80 91 91 00 	lds	r24, 0x0091
    1208:	8f 30       	cpi	r24, 0x0F	; 15
    120a:	61 f4       	brne	.+24     	; 0x1224 <Rotate_Motor_ACW+0x3e>
	{
		DcMotor_Rotate(STOP , DUTY_CYCLE_0); /* Stop the motor */
    120c:	82 e0       	ldi	r24, 0x02	; 2
    120e:	60 e0       	ldi	r22, 0x00	; 0
    1210:	0e 94 fe 09 	call	0x13fc	; 0x13fc <DcMotor_Rotate>
		Timer_deInit(Timer_1); /* De-initialize the timer */
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	0e 94 8d 0c 	call	0x191a	; 0x191a <Timer_deInit>
		count = 0; /* Reset count */
    121a:	10 92 91 00 	sts	0x0091, r1
		Flag=1;	   /* Set flag to indicate completion */
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	80 93 94 00 	sts	0x0094, r24
	}
}
    1224:	cf 91       	pop	r28
    1226:	df 91       	pop	r29
    1228:	08 95       	ret

0000122a <Turn_Buzzer>:
/*
 * Activates the buzzer for a specified duration.
 * It`s Call Back function for timer 1
 */
void Turn_Buzzer (void)
{
    122a:	df 93       	push	r29
    122c:	cf 93       	push	r28
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
	count++; /* Increment the buzzer count */
    1232:	80 91 91 00 	lds	r24, 0x0091
    1236:	8f 5f       	subi	r24, 0xFF	; 255
    1238:	80 93 91 00 	sts	0x0091, r24
	Flag=0;  /* Reset the flag */
    123c:	10 92 94 00 	sts	0x0094, r1

	Buzzer_on(); /* Turn on the buzzer */
    1240:	0e 94 af 05 	call	0xb5e	; 0xb5e <Buzzer_on>

	 /* Turn off the buzzer after a specified count */
	if (count == 60)
    1244:	80 91 91 00 	lds	r24, 0x0091
    1248:	8c 33       	cpi	r24, 0x3C	; 60
    124a:	51 f4       	brne	.+20     	; 0x1260 <Turn_Buzzer+0x36>
	{
		Buzzer_off(); /* Turn off the buzzer */
    124c:	0e 94 bb 05 	call	0xb76	; 0xb76 <Buzzer_off>
		Timer_deInit(Timer_1); /* De-initialize the timer */
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	0e 94 8d 0c 	call	0x191a	; 0x191a <Timer_deInit>
		count = 0; /* Reset count */
    1256:	10 92 91 00 	sts	0x0091, r1
		Flag=1;  /* Set flag to indicate completion */
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	80 93 94 00 	sts	0x0094, r24
	}
}
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	08 95       	ret

00001266 <Recive_Change_Password>:
 * Receives a new password and checks it against
 * the saved password in EEPROM.
 * If it matches, updates the password in EEPROM.
 */
void Recive_Change_Password (void)
{
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	2c 97       	sbiw	r28, 0x0c	; 12
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	f8 94       	cli
    1274:	de bf       	out	0x3e, r29	; 62
    1276:	0f be       	out	0x3f, r0	; 63
    1278:	cd bf       	out	0x3d, r28	; 61
	 /* Receive the password entered by the user */
	Recive_Password (Pass_Entered_Recived);
    127a:	86 ea       	ldi	r24, 0xA6	; 166
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <Recive_Password>
	match = 1; /* Assume passwords match initially */
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	80 93 68 00 	sts	0x0068, r24

	/* Loop to compare each byte in both passwords */
	for (i = 0; i < size; i++)
    1288:	10 92 90 00 	sts	0x0090, r1
    128c:	1a c0       	rjmp	.+52     	; 0x12c2 <Recive_Change_Password+0x5c>
	{
		if (saved_Password[i] != Pass_Entered_Recived[i])
    128e:	80 91 90 00 	lds	r24, 0x0090
    1292:	88 2f       	mov	r24, r24
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	fc 01       	movw	r30, r24
    1298:	e5 55       	subi	r30, 0x55	; 85
    129a:	ff 4f       	sbci	r31, 0xFF	; 255
    129c:	20 81       	ld	r18, Z
    129e:	80 91 90 00 	lds	r24, 0x0090
    12a2:	88 2f       	mov	r24, r24
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	fc 01       	movw	r30, r24
    12a8:	ea 55       	subi	r30, 0x5A	; 90
    12aa:	ff 4f       	sbci	r31, 0xFF	; 255
    12ac:	80 81       	ld	r24, Z
    12ae:	28 17       	cp	r18, r24
    12b0:	19 f0       	breq	.+6      	; 0x12b8 <Recive_Change_Password+0x52>
		{
			match = 0;  /* Set flag to indicate mismatch */
    12b2:	10 92 68 00 	sts	0x0068, r1
    12b6:	09 c0       	rjmp	.+18     	; 0x12ca <Recive_Change_Password+0x64>
	 /* Receive the password entered by the user */
	Recive_Password (Pass_Entered_Recived);
	match = 1; /* Assume passwords match initially */

	/* Loop to compare each byte in both passwords */
	for (i = 0; i < size; i++)
    12b8:	80 91 90 00 	lds	r24, 0x0090
    12bc:	8f 5f       	subi	r24, 0xFF	; 255
    12be:	80 93 90 00 	sts	0x0090, r24
    12c2:	80 91 90 00 	lds	r24, 0x0090
    12c6:	85 30       	cpi	r24, 0x05	; 5
    12c8:	10 f3       	brcs	.-60     	; 0x128e <Recive_Change_Password+0x28>
			break;      /* Exit loop on first mismatch */
		}
	}

	/* Send result based on match flag */
	if (match)
    12ca:	80 91 68 00 	lds	r24, 0x0068
    12ce:	88 23       	and	r24, r24
    12d0:	91 f0       	breq	.+36     	; 0x12f6 <Recive_Change_Password+0x90>
	{
		UART_sendByte(SUCCESS); 	 /* Send SUCCESS if all matched */
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	0e 94 39 12 	call	0x2472	; 0x2472 <UART_sendByte>

		/* Receive new password and confirmation */
		Recive_Password(pass_Recived);
    12d8:	81 ea       	ldi	r24, 0xA1	; 161
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	0e 94 2f 06 	call	0xc5e	; 0xc5e <Recive_Password>
		Recive_Password(pass_check_Recived);
    12e0:	8c e9       	ldi	r24, 0x9C	; 156
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	0e 94 2f 06 	call	0xc5e	; 0xc5e <Recive_Password>

		 /* Check if new passwords match and save to EEPROM */
		Check_Passwords_Match ();
    12e8:	0e 94 58 06 	call	0xcb0	; 0xcb0 <Check_Passwords_Match>
		Save_Password_EEPROM ();
    12ec:	0e 94 9a 06 	call	0xd34	; 0xd34 <Save_Password_EEPROM>

		Attempt=0; /* Reset attempt count */
    12f0:	10 92 92 00 	sts	0x0092, r1
    12f4:	3b c0       	rjmp	.+118    	; 0x136c <Recive_Change_Password+0x106>
	}
	else
	{

		UART_sendByte(FAIL);   		 /* Send Fail if all miss matched */
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	0e 94 39 12 	call	0x2472	; 0x2472 <UART_sendByte>
		Attempt++;					 /* Increment the attempt count */
    12fc:	80 91 92 00 	lds	r24, 0x0092
    1300:	8f 5f       	subi	r24, 0xFF	; 255
    1302:	80 93 92 00 	sts	0x0092, r24

		/* Check if the maximum attempts have been reached */
		if (Attempt == 3)
    1306:	80 91 92 00 	lds	r24, 0x0092
    130a:	83 30       	cpi	r24, 0x03	; 3
    130c:	79 f5       	brne	.+94     	; 0x136c <Recive_Change_Password+0x106>
		{
			/* Initialize timer for buzzer alert */
			Timer_ConfigType ptr = {0,3910,Timer_1,Prescale_1024,Compare_Mode};
    130e:	ce 01       	movw	r24, r28
    1310:	01 96       	adiw	r24, 0x01	; 1
    1312:	99 87       	std	Y+9, r25	; 0x09
    1314:	88 87       	std	Y+8, r24	; 0x08
    1316:	e8 e8       	ldi	r30, 0x88	; 136
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	fb 87       	std	Y+11, r31	; 0x0b
    131c:	ea 87       	std	Y+10, r30	; 0x0a
    131e:	f7 e0       	ldi	r31, 0x07	; 7
    1320:	fc 87       	std	Y+12, r31	; 0x0c
    1322:	ea 85       	ldd	r30, Y+10	; 0x0a
    1324:	fb 85       	ldd	r31, Y+11	; 0x0b
    1326:	00 80       	ld	r0, Z
    1328:	8a 85       	ldd	r24, Y+10	; 0x0a
    132a:	9b 85       	ldd	r25, Y+11	; 0x0b
    132c:	01 96       	adiw	r24, 0x01	; 1
    132e:	9b 87       	std	Y+11, r25	; 0x0b
    1330:	8a 87       	std	Y+10, r24	; 0x0a
    1332:	e8 85       	ldd	r30, Y+8	; 0x08
    1334:	f9 85       	ldd	r31, Y+9	; 0x09
    1336:	00 82       	st	Z, r0
    1338:	88 85       	ldd	r24, Y+8	; 0x08
    133a:	99 85       	ldd	r25, Y+9	; 0x09
    133c:	01 96       	adiw	r24, 0x01	; 1
    133e:	99 87       	std	Y+9, r25	; 0x09
    1340:	88 87       	std	Y+8, r24	; 0x08
    1342:	9c 85       	ldd	r25, Y+12	; 0x0c
    1344:	91 50       	subi	r25, 0x01	; 1
    1346:	9c 87       	std	Y+12, r25	; 0x0c
    1348:	ec 85       	ldd	r30, Y+12	; 0x0c
    134a:	ee 23       	and	r30, r30
    134c:	51 f7       	brne	.-44     	; 0x1322 <Recive_Change_Password+0xbc>
			Timer_init(&ptr);
    134e:	ce 01       	movw	r24, r28
    1350:	01 96       	adiw	r24, 0x01	; 1
    1352:	0e 94 84 0b 	call	0x1708	; 0x1708 <Timer_init>
			Timer_setCallBack( Turn_Buzzer , Timer_1);
    1356:	85 e1       	ldi	r24, 0x15	; 21
    1358:	99 e0       	ldi	r25, 0x09	; 9
    135a:	61 e0       	ldi	r22, 0x01	; 1
    135c:	0e 94 ef 0c 	call	0x19de	; 0x19de <Timer_setCallBack>

			/* Wait for the timer to complete */
			while(!Flag);
    1360:	80 91 94 00 	lds	r24, 0x0094
    1364:	88 23       	and	r24, r24
    1366:	e1 f3       	breq	.-8      	; 0x1360 <Recive_Change_Password+0xfa>
			Flag=0; /* Reset the flag */
    1368:	10 92 94 00 	sts	0x0094, r1
		}
	}
}
    136c:	2c 96       	adiw	r28, 0x0c	; 12
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	f8 94       	cli
    1372:	de bf       	out	0x3e, r29	; 62
    1374:	0f be       	out	0x3f, r0	; 63
    1376:	cd bf       	out	0x3d, r28	; 61
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	08 95       	ret

0000137e <main>:
/*******************************************************************************
 *                              Main Functions                                 *
 *******************************************************************************/

int main (void)
{
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
	Initialise();
    1386:	0e 94 c7 05 	call	0xb8e	; 0xb8e <Initialise>
	Recive_Password(pass_Recived);
    138a:	81 ea       	ldi	r24, 0xA1	; 161
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <Recive_Password>
	Recive_Password(pass_check_Recived);
    1392:	8c e9       	ldi	r24, 0x9C	; 156
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	0e 94 2f 06 	call	0xc5e	; 0xc5e <Recive_Password>
	Check_Passwords_Match ();
    139a:	0e 94 58 06 	call	0xcb0	; 0xcb0 <Check_Passwords_Match>
	Save_Password_EEPROM ();
    139e:	0e 94 9a 06 	call	0xd34	; 0xd34 <Save_Password_EEPROM>

	while (1)
	{
		Choose=UART_recieveByte();
    13a2:	0e 94 50 12 	call	0x24a0	; 0x24a0 <UART_recieveByte>
    13a6:	80 93 95 00 	sts	0x0095, r24

		if(Choose == OPEN)
    13aa:	80 91 95 00 	lds	r24, 0x0095
    13ae:	86 30       	cpi	r24, 0x06	; 6
    13b0:	19 f4       	brne	.+6      	; 0x13b8 <main+0x3a>
		{
			Recive_Open_Door();
    13b2:	0e 94 d5 07 	call	0xfaa	; 0xfaa <Recive_Open_Door>
    13b6:	f5 cf       	rjmp	.-22     	; 0x13a2 <main+0x24>
		}
		else if (Choose == CHANGE)
    13b8:	80 91 95 00 	lds	r24, 0x0095
    13bc:	87 30       	cpi	r24, 0x07	; 7
    13be:	89 f7       	brne	.-30     	; 0x13a2 <main+0x24>
		{
			Recive_Change_Password();
    13c0:	0e 94 33 09 	call	0x1266	; 0x1266 <Recive_Change_Password>
    13c4:	ee cf       	rjmp	.-36     	; 0x13a2 <main+0x24>

000013c6 <DcMotor_Init>:
 *                          Functions Definitions                              *
 *******************************************************************************/

/* Initializes the DC motor */
void DcMotor_Init(void)
{
    13c6:	df 93       	push	r29
    13c8:	cf 93       	push	r28
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(MOTOR_IN_PORT_ID,MOTOR_IN1_PIN_ID,PIN_OUTPUT) ;
    13ce:	83 e0       	ldi	r24, 0x03	; 3
    13d0:	66 e0       	ldi	r22, 0x06	; 6
    13d2:	41 e0       	ldi	r20, 0x01	; 1
    13d4:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_IN_PORT_ID,MOTOR_IN2_PIN_ID,PIN_OUTPUT) ;
    13d8:	83 e0       	ldi	r24, 0x03	; 3
    13da:	67 e0       	ldi	r22, 0x07	; 7
    13dc:	41 e0       	ldi	r20, 0x01	; 1
    13de:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <GPIO_setupPinDirection>

	/* Turn off the motor */
	GPIO_writePin(MOTOR_IN_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
    13e2:	83 e0       	ldi	r24, 0x03	; 3
    13e4:	66 e0       	ldi	r22, 0x06	; 6
    13e6:	40 e0       	ldi	r20, 0x00	; 0
    13e8:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <GPIO_writePin>
	GPIO_writePin(MOTOR_IN_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    13ec:	83 e0       	ldi	r24, 0x03	; 3
    13ee:	67 e0       	ldi	r22, 0x07	; 7
    13f0:	40 e0       	ldi	r20, 0x00	; 0
    13f2:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <GPIO_writePin>
}
    13f6:	cf 91       	pop	r28
    13f8:	df 91       	pop	r29
    13fa:	08 95       	ret

000013fc <DcMotor_Rotate>:

/* state The desired state of the motor (STOP, CW, ACW).
 * Controls the DC motor's rotation and speed.
 */
void DcMotor_Rotate(DcMotor_State state, uint8 speed)
{
    13fc:	df 93       	push	r29
    13fe:	cf 93       	push	r28
    1400:	00 d0       	rcall	.+0      	; 0x1402 <DcMotor_Rotate+0x6>
    1402:	cd b7       	in	r28, 0x3d	; 61
    1404:	de b7       	in	r29, 0x3e	; 62
    1406:	89 83       	std	Y+1, r24	; 0x01
    1408:	6a 83       	std	Y+2, r22	; 0x02

		PWM_Timer0_Start(speed);
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <PWM_Timer0_Start>

		if (state == CW)
    1410:	89 81       	ldd	r24, Y+1	; 0x01
    1412:	88 23       	and	r24, r24
    1414:	59 f4       	brne	.+22     	; 0x142c <DcMotor_Rotate+0x30>
		{
			/* Turn on the motor clock wise direction */

			GPIO_writePin(MOTOR_IN_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_HIGH);
    1416:	83 e0       	ldi	r24, 0x03	; 3
    1418:	66 e0       	ldi	r22, 0x06	; 6
    141a:	41 e0       	ldi	r20, 0x01	; 1
    141c:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <GPIO_writePin>
			GPIO_writePin(MOTOR_IN_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    1420:	83 e0       	ldi	r24, 0x03	; 3
    1422:	67 e0       	ldi	r22, 0x07	; 7
    1424:	40 e0       	ldi	r20, 0x00	; 0
    1426:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <GPIO_writePin>
    142a:	1b c0       	rjmp	.+54     	; 0x1462 <DcMotor_Rotate+0x66>

		}
		else if (state == ACW)
    142c:	89 81       	ldd	r24, Y+1	; 0x01
    142e:	81 30       	cpi	r24, 0x01	; 1
    1430:	59 f4       	brne	.+22     	; 0x1448 <DcMotor_Rotate+0x4c>
		{
			/* Turn on the motor anti clock wise direction */
			GPIO_writePin(MOTOR_IN_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
    1432:	83 e0       	ldi	r24, 0x03	; 3
    1434:	66 e0       	ldi	r22, 0x06	; 6
    1436:	40 e0       	ldi	r20, 0x00	; 0
    1438:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <GPIO_writePin>
			GPIO_writePin(MOTOR_IN_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_HIGH);
    143c:	83 e0       	ldi	r24, 0x03	; 3
    143e:	67 e0       	ldi	r22, 0x07	; 7
    1440:	41 e0       	ldi	r20, 0x01	; 1
    1442:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <GPIO_writePin>
    1446:	0d c0       	rjmp	.+26     	; 0x1462 <DcMotor_Rotate+0x66>

		}
		else if (state == STOP)
    1448:	89 81       	ldd	r24, Y+1	; 0x01
    144a:	82 30       	cpi	r24, 0x02	; 2
    144c:	51 f4       	brne	.+20     	; 0x1462 <DcMotor_Rotate+0x66>
		{
			/* Turn off the motor */
			GPIO_writePin(MOTOR_IN_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
    144e:	83 e0       	ldi	r24, 0x03	; 3
    1450:	66 e0       	ldi	r22, 0x06	; 6
    1452:	40 e0       	ldi	r20, 0x00	; 0
    1454:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <GPIO_writePin>
			GPIO_writePin(MOTOR_IN_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    1458:	83 e0       	ldi	r24, 0x03	; 3
    145a:	67 e0       	ldi	r22, 0x07	; 7
    145c:	40 e0       	ldi	r20, 0x00	; 0
    145e:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <GPIO_writePin>

		}

}
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	08 95       	ret

0000146c <PIR_init>:
 *                          Functions Definitions                              *
 *******************************************************************************/

/* Configures the pin connected to the PIR sensor*/
void PIR_init(void)
{
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
	/* Set the PIR sensor pin as input */
	GPIO_setupPinDirection(PIR_PORT_ID , PIR_PIN_ID , PIN_INPUT);
    1474:	82 e0       	ldi	r24, 0x02	; 2
    1476:	62 e0       	ldi	r22, 0x02	; 2
    1478:	40 e0       	ldi	r20, 0x00	; 0
    147a:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <GPIO_setupPinDirection>
}
    147e:	cf 91       	pop	r28
    1480:	df 91       	pop	r29
    1482:	08 95       	ret

00001484 <PIR_getState>:

/* This function reads and returns the current state of the PIR sensor */
uint8  PIR_getState(void)
{
    1484:	df 93       	push	r29
    1486:	cf 93       	push	r28
    1488:	0f 92       	push	r0
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
	uint8 value = 0;
    148e:	19 82       	std	Y+1, r1	; 0x01
	  /* Read the value from the PIR sensor pin */
	value = GPIO_readPin( PIR_PORT_ID , PIR_PIN_ID );
    1490:	82 e0       	ldi	r24, 0x02	; 2
    1492:	62 e0       	ldi	r22, 0x02	; 2
    1494:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <GPIO_readPin>
    1498:	89 83       	std	Y+1, r24	; 0x01

	return value;
    149a:	89 81       	ldd	r24, Y+1	; 0x01
}
    149c:	0f 90       	pop	r0
    149e:	cf 91       	pop	r28
    14a0:	df 91       	pop	r29
    14a2:	08 95       	ret

000014a4 <__vector_11>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    14a4:	1f 92       	push	r1
    14a6:	0f 92       	push	r0
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	0f 92       	push	r0
    14ac:	11 24       	eor	r1, r1
    14ae:	2f 93       	push	r18
    14b0:	3f 93       	push	r19
    14b2:	4f 93       	push	r20
    14b4:	5f 93       	push	r21
    14b6:	6f 93       	push	r22
    14b8:	7f 93       	push	r23
    14ba:	8f 93       	push	r24
    14bc:	9f 93       	push	r25
    14be:	af 93       	push	r26
    14c0:	bf 93       	push	r27
    14c2:	ef 93       	push	r30
    14c4:	ff 93       	push	r31
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
    14ce:	80 91 96 00 	lds	r24, 0x0096
    14d2:	90 91 97 00 	lds	r25, 0x0097
    14d6:	00 97       	sbiw	r24, 0x00	; 0
    14d8:	29 f0       	breq	.+10     	; 0x14e4 <__vector_11+0x40>
	{
		(*g_callBackPtr0)();
    14da:	e0 91 96 00 	lds	r30, 0x0096
    14de:	f0 91 97 00 	lds	r31, 0x0097
    14e2:	09 95       	icall
	}
}
    14e4:	cf 91       	pop	r28
    14e6:	df 91       	pop	r29
    14e8:	ff 91       	pop	r31
    14ea:	ef 91       	pop	r30
    14ec:	bf 91       	pop	r27
    14ee:	af 91       	pop	r26
    14f0:	9f 91       	pop	r25
    14f2:	8f 91       	pop	r24
    14f4:	7f 91       	pop	r23
    14f6:	6f 91       	pop	r22
    14f8:	5f 91       	pop	r21
    14fa:	4f 91       	pop	r20
    14fc:	3f 91       	pop	r19
    14fe:	2f 91       	pop	r18
    1500:	0f 90       	pop	r0
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	0f 90       	pop	r0
    1506:	1f 90       	pop	r1
    1508:	18 95       	reti

0000150a <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    150a:	1f 92       	push	r1
    150c:	0f 92       	push	r0
    150e:	0f b6       	in	r0, 0x3f	; 63
    1510:	0f 92       	push	r0
    1512:	11 24       	eor	r1, r1
    1514:	2f 93       	push	r18
    1516:	3f 93       	push	r19
    1518:	4f 93       	push	r20
    151a:	5f 93       	push	r21
    151c:	6f 93       	push	r22
    151e:	7f 93       	push	r23
    1520:	8f 93       	push	r24
    1522:	9f 93       	push	r25
    1524:	af 93       	push	r26
    1526:	bf 93       	push	r27
    1528:	ef 93       	push	r30
    152a:	ff 93       	push	r31
    152c:	df 93       	push	r29
    152e:	cf 93       	push	r28
    1530:	cd b7       	in	r28, 0x3d	; 61
    1532:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
    1534:	80 91 96 00 	lds	r24, 0x0096
    1538:	90 91 97 00 	lds	r25, 0x0097
    153c:	00 97       	sbiw	r24, 0x00	; 0
    153e:	29 f0       	breq	.+10     	; 0x154a <__vector_10+0x40>
	{
		(*g_callBackPtr0)();
    1540:	e0 91 96 00 	lds	r30, 0x0096
    1544:	f0 91 97 00 	lds	r31, 0x0097
    1548:	09 95       	icall
	}
}
    154a:	cf 91       	pop	r28
    154c:	df 91       	pop	r29
    154e:	ff 91       	pop	r31
    1550:	ef 91       	pop	r30
    1552:	bf 91       	pop	r27
    1554:	af 91       	pop	r26
    1556:	9f 91       	pop	r25
    1558:	8f 91       	pop	r24
    155a:	7f 91       	pop	r23
    155c:	6f 91       	pop	r22
    155e:	5f 91       	pop	r21
    1560:	4f 91       	pop	r20
    1562:	3f 91       	pop	r19
    1564:	2f 91       	pop	r18
    1566:	0f 90       	pop	r0
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	0f 90       	pop	r0
    156c:	1f 90       	pop	r1
    156e:	18 95       	reti

00001570 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    1570:	1f 92       	push	r1
    1572:	0f 92       	push	r0
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	0f 92       	push	r0
    1578:	11 24       	eor	r1, r1
    157a:	2f 93       	push	r18
    157c:	3f 93       	push	r19
    157e:	4f 93       	push	r20
    1580:	5f 93       	push	r21
    1582:	6f 93       	push	r22
    1584:	7f 93       	push	r23
    1586:	8f 93       	push	r24
    1588:	9f 93       	push	r25
    158a:	af 93       	push	r26
    158c:	bf 93       	push	r27
    158e:	ef 93       	push	r30
    1590:	ff 93       	push	r31
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
    159a:	80 91 98 00 	lds	r24, 0x0098
    159e:	90 91 99 00 	lds	r25, 0x0099
    15a2:	00 97       	sbiw	r24, 0x00	; 0
    15a4:	29 f0       	breq	.+10     	; 0x15b0 <__vector_9+0x40>
	{

		(*g_callBackPtr1)();
    15a6:	e0 91 98 00 	lds	r30, 0x0098
    15aa:	f0 91 99 00 	lds	r31, 0x0099
    15ae:	09 95       	icall
	}
}
    15b0:	cf 91       	pop	r28
    15b2:	df 91       	pop	r29
    15b4:	ff 91       	pop	r31
    15b6:	ef 91       	pop	r30
    15b8:	bf 91       	pop	r27
    15ba:	af 91       	pop	r26
    15bc:	9f 91       	pop	r25
    15be:	8f 91       	pop	r24
    15c0:	7f 91       	pop	r23
    15c2:	6f 91       	pop	r22
    15c4:	5f 91       	pop	r21
    15c6:	4f 91       	pop	r20
    15c8:	3f 91       	pop	r19
    15ca:	2f 91       	pop	r18
    15cc:	0f 90       	pop	r0
    15ce:	0f be       	out	0x3f, r0	; 63
    15d0:	0f 90       	pop	r0
    15d2:	1f 90       	pop	r1
    15d4:	18 95       	reti

000015d6 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    15d6:	1f 92       	push	r1
    15d8:	0f 92       	push	r0
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	0f 92       	push	r0
    15de:	11 24       	eor	r1, r1
    15e0:	2f 93       	push	r18
    15e2:	3f 93       	push	r19
    15e4:	4f 93       	push	r20
    15e6:	5f 93       	push	r21
    15e8:	6f 93       	push	r22
    15ea:	7f 93       	push	r23
    15ec:	8f 93       	push	r24
    15ee:	9f 93       	push	r25
    15f0:	af 93       	push	r26
    15f2:	bf 93       	push	r27
    15f4:	ef 93       	push	r30
    15f6:	ff 93       	push	r31
    15f8:	df 93       	push	r29
    15fa:	cf 93       	push	r28
    15fc:	cd b7       	in	r28, 0x3d	; 61
    15fe:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
    1600:	80 91 98 00 	lds	r24, 0x0098
    1604:	90 91 99 00 	lds	r25, 0x0099
    1608:	00 97       	sbiw	r24, 0x00	; 0
    160a:	29 f0       	breq	.+10     	; 0x1616 <__vector_7+0x40>
	{
		(*g_callBackPtr1)();
    160c:	e0 91 98 00 	lds	r30, 0x0098
    1610:	f0 91 99 00 	lds	r31, 0x0099
    1614:	09 95       	icall
	}
}
    1616:	cf 91       	pop	r28
    1618:	df 91       	pop	r29
    161a:	ff 91       	pop	r31
    161c:	ef 91       	pop	r30
    161e:	bf 91       	pop	r27
    1620:	af 91       	pop	r26
    1622:	9f 91       	pop	r25
    1624:	8f 91       	pop	r24
    1626:	7f 91       	pop	r23
    1628:	6f 91       	pop	r22
    162a:	5f 91       	pop	r21
    162c:	4f 91       	pop	r20
    162e:	3f 91       	pop	r19
    1630:	2f 91       	pop	r18
    1632:	0f 90       	pop	r0
    1634:	0f be       	out	0x3f, r0	; 63
    1636:	0f 90       	pop	r0
    1638:	1f 90       	pop	r1
    163a:	18 95       	reti

0000163c <__vector_5>:

ISR(TIMER2_OVF_vect)
{
    163c:	1f 92       	push	r1
    163e:	0f 92       	push	r0
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	0f 92       	push	r0
    1644:	11 24       	eor	r1, r1
    1646:	2f 93       	push	r18
    1648:	3f 93       	push	r19
    164a:	4f 93       	push	r20
    164c:	5f 93       	push	r21
    164e:	6f 93       	push	r22
    1650:	7f 93       	push	r23
    1652:	8f 93       	push	r24
    1654:	9f 93       	push	r25
    1656:	af 93       	push	r26
    1658:	bf 93       	push	r27
    165a:	ef 93       	push	r30
    165c:	ff 93       	push	r31
    165e:	df 93       	push	r29
    1660:	cf 93       	push	r28
    1662:	cd b7       	in	r28, 0x3d	; 61
    1664:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
    1666:	80 91 9a 00 	lds	r24, 0x009A
    166a:	90 91 9b 00 	lds	r25, 0x009B
    166e:	00 97       	sbiw	r24, 0x00	; 0
    1670:	29 f0       	breq	.+10     	; 0x167c <__vector_5+0x40>
	{

		(*g_callBackPtr2)();
    1672:	e0 91 9a 00 	lds	r30, 0x009A
    1676:	f0 91 9b 00 	lds	r31, 0x009B
    167a:	09 95       	icall
	}
}
    167c:	cf 91       	pop	r28
    167e:	df 91       	pop	r29
    1680:	ff 91       	pop	r31
    1682:	ef 91       	pop	r30
    1684:	bf 91       	pop	r27
    1686:	af 91       	pop	r26
    1688:	9f 91       	pop	r25
    168a:	8f 91       	pop	r24
    168c:	7f 91       	pop	r23
    168e:	6f 91       	pop	r22
    1690:	5f 91       	pop	r21
    1692:	4f 91       	pop	r20
    1694:	3f 91       	pop	r19
    1696:	2f 91       	pop	r18
    1698:	0f 90       	pop	r0
    169a:	0f be       	out	0x3f, r0	; 63
    169c:	0f 90       	pop	r0
    169e:	1f 90       	pop	r1
    16a0:	18 95       	reti

000016a2 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    16a2:	1f 92       	push	r1
    16a4:	0f 92       	push	r0
    16a6:	0f b6       	in	r0, 0x3f	; 63
    16a8:	0f 92       	push	r0
    16aa:	11 24       	eor	r1, r1
    16ac:	2f 93       	push	r18
    16ae:	3f 93       	push	r19
    16b0:	4f 93       	push	r20
    16b2:	5f 93       	push	r21
    16b4:	6f 93       	push	r22
    16b6:	7f 93       	push	r23
    16b8:	8f 93       	push	r24
    16ba:	9f 93       	push	r25
    16bc:	af 93       	push	r26
    16be:	bf 93       	push	r27
    16c0:	ef 93       	push	r30
    16c2:	ff 93       	push	r31
    16c4:	df 93       	push	r29
    16c6:	cf 93       	push	r28
    16c8:	cd b7       	in	r28, 0x3d	; 61
    16ca:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
    16cc:	80 91 9a 00 	lds	r24, 0x009A
    16d0:	90 91 9b 00 	lds	r25, 0x009B
    16d4:	00 97       	sbiw	r24, 0x00	; 0
    16d6:	29 f0       	breq	.+10     	; 0x16e2 <__vector_4+0x40>
	{
		(*g_callBackPtr2)();
    16d8:	e0 91 9a 00 	lds	r30, 0x009A
    16dc:	f0 91 9b 00 	lds	r31, 0x009B
    16e0:	09 95       	icall
	}
}
    16e2:	cf 91       	pop	r28
    16e4:	df 91       	pop	r29
    16e6:	ff 91       	pop	r31
    16e8:	ef 91       	pop	r30
    16ea:	bf 91       	pop	r27
    16ec:	af 91       	pop	r26
    16ee:	9f 91       	pop	r25
    16f0:	8f 91       	pop	r24
    16f2:	7f 91       	pop	r23
    16f4:	6f 91       	pop	r22
    16f6:	5f 91       	pop	r21
    16f8:	4f 91       	pop	r20
    16fa:	3f 91       	pop	r19
    16fc:	2f 91       	pop	r18
    16fe:	0f 90       	pop	r0
    1700:	0f be       	out	0x3f, r0	; 63
    1702:	0f 90       	pop	r0
    1704:	1f 90       	pop	r1
    1706:	18 95       	reti

00001708 <Timer_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/

/*  Initializes the timer with the specified settings. */
void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    1708:	df 93       	push	r29
    170a:	cf 93       	push	r28
    170c:	00 d0       	rcall	.+0      	; 0x170e <Timer_init+0x6>
    170e:	00 d0       	rcall	.+0      	; 0x1710 <Timer_init+0x8>
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
    1714:	9c 83       	std	Y+4, r25	; 0x04
    1716:	8b 83       	std	Y+3, r24	; 0x03
	uint8 timer_ID = Config_Ptr -> timer_ID ;
    1718:	eb 81       	ldd	r30, Y+3	; 0x03
    171a:	fc 81       	ldd	r31, Y+4	; 0x04
    171c:	84 81       	ldd	r24, Z+4	; 0x04
    171e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 timer_Mode = Config_Ptr -> timer_mode;
    1720:	eb 81       	ldd	r30, Y+3	; 0x03
    1722:	fc 81       	ldd	r31, Y+4	; 0x04
    1724:	86 81       	ldd	r24, Z+6	; 0x06
    1726:	89 83       	std	Y+1, r24	; 0x01


	/* Timer0 configuration */
	if (timer_ID == Timer_0)
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	88 23       	and	r24, r24
    172c:	09 f0       	breq	.+2      	; 0x1730 <Timer_init+0x28>
    172e:	49 c0       	rjmp	.+146    	; 0x17c2 <Timer_init+0xba>
	{
		/* normal mode configuration */
		if(timer_Mode == Normal_Mode)
    1730:	89 81       	ldd	r24, Y+1	; 0x01
    1732:	88 23       	and	r24, r24
    1734:	e1 f4       	brne	.+56     	; 0x176e <Timer_init+0x66>
		{
			TCNT0 = Config_Ptr -> timer_InitialValue ; /* Set Timer initial value */
    1736:	a2 e5       	ldi	r26, 0x52	; 82
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	eb 81       	ldd	r30, Y+3	; 0x03
    173c:	fc 81       	ldd	r31, Y+4	; 0x04
    173e:	80 81       	ld	r24, Z
    1740:	91 81       	ldd	r25, Z+1	; 0x01
    1742:	8c 93       	st	X, r24

			TIMSK = (1<<TOIE0); /* Enable Timer0 Overflow Interrupt */
    1744:	e9 e5       	ldi	r30, 0x59	; 89
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	80 83       	st	Z, r24
			 * 1. Non PWM mode FOC0=1
			 * 2. Normal Mode WGM01=0 & WGM00=0
			 * 3. Normal Mode COM00=0 & COM01=0
			 * 4. clock = F_CPU/prescaler
			 */
			TCCR0 = (1<<FOC0) ;
    174c:	e3 e5       	ldi	r30, 0x53	; 83
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 e8       	ldi	r24, 0x80	; 128
    1752:	80 83       	st	Z, r24
			TCCR0 = (TCCR0 & 0XF8) | (Config_Ptr->timer_clock);
    1754:	a3 e5       	ldi	r26, 0x53	; 83
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	e3 e5       	ldi	r30, 0x53	; 83
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	98 2f       	mov	r25, r24
    1760:	98 7f       	andi	r25, 0xF8	; 248
    1762:	eb 81       	ldd	r30, Y+3	; 0x03
    1764:	fc 81       	ldd	r31, Y+4	; 0x04
    1766:	85 81       	ldd	r24, Z+5	; 0x05
    1768:	89 2b       	or	r24, r25
    176a:	8c 93       	st	X, r24
    176c:	cf c0       	rjmp	.+414    	; 0x190c <Timer_init+0x204>
		}

		/* compare mode configuration */
		else if (timer_Mode == Compare_Mode)
    176e:	89 81       	ldd	r24, Y+1	; 0x01
    1770:	81 30       	cpi	r24, 0x01	; 1
    1772:	09 f0       	breq	.+2      	; 0x1776 <Timer_init+0x6e>
    1774:	cb c0       	rjmp	.+406    	; 0x190c <Timer_init+0x204>
		{
			TCNT0 = Config_Ptr -> timer_InitialValue ; /* Set Timer Initial Value 0 */
    1776:	a2 e5       	ldi	r26, 0x52	; 82
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	eb 81       	ldd	r30, Y+3	; 0x03
    177c:	fc 81       	ldd	r31, Y+4	; 0x04
    177e:	80 81       	ld	r24, Z
    1780:	91 81       	ldd	r25, Z+1	; 0x01
    1782:	8c 93       	st	X, r24
			OCR0 = Config_Ptr -> timer_compare_MatchValue; /* Set Compare Value */
    1784:	ac e5       	ldi	r26, 0x5C	; 92
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	eb 81       	ldd	r30, Y+3	; 0x03
    178a:	fc 81       	ldd	r31, Y+4	; 0x04
    178c:	82 81       	ldd	r24, Z+2	; 0x02
    178e:	93 81       	ldd	r25, Z+3	; 0x03
    1790:	8c 93       	st	X, r24

			TIMSK |= (1<<OCIE0); /* Enable Timer0 Compare Interrupt */
    1792:	a9 e5       	ldi	r26, 0x59	; 89
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	e9 e5       	ldi	r30, 0x59	; 89
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	82 60       	ori	r24, 0x02	; 2
    179e:	8c 93       	st	X, r24
			 * 1. Non PWM mode FOC0=1
			 * 2. CTC Mode WGM01=1 & WGM00=0
			 * 3. No need for OC0 in this example so COM00=0 & COM01=0
			 * 4. clock = F_CPU/prescaler
			 */
			TCCR0 = (1<<FOC0) | (1<<WGM01);
    17a0:	e3 e5       	ldi	r30, 0x53	; 83
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	88 e8       	ldi	r24, 0x88	; 136
    17a6:	80 83       	st	Z, r24
			TCCR0 = (TCCR0 & 0XF8) | (Config_Ptr->timer_clock);
    17a8:	a3 e5       	ldi	r26, 0x53	; 83
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e3 e5       	ldi	r30, 0x53	; 83
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	98 2f       	mov	r25, r24
    17b4:	98 7f       	andi	r25, 0xF8	; 248
    17b6:	eb 81       	ldd	r30, Y+3	; 0x03
    17b8:	fc 81       	ldd	r31, Y+4	; 0x04
    17ba:	85 81       	ldd	r24, Z+5	; 0x05
    17bc:	89 2b       	or	r24, r25
    17be:	8c 93       	st	X, r24
    17c0:	a5 c0       	rjmp	.+330    	; 0x190c <Timer_init+0x204>
		}
	}

	/* Timer1 configuration */
	else if (timer_ID == Timer_1)
    17c2:	8a 81       	ldd	r24, Y+2	; 0x02
    17c4:	81 30       	cpi	r24, 0x01	; 1
    17c6:	09 f0       	breq	.+2      	; 0x17ca <Timer_init+0xc2>
    17c8:	56 c0       	rjmp	.+172    	; 0x1876 <Timer_init+0x16e>
	{
		/* normal mode configuration */
		if(timer_Mode == Normal_Mode)
    17ca:	89 81       	ldd	r24, Y+1	; 0x01
    17cc:	88 23       	and	r24, r24
    17ce:	09 f5       	brne	.+66     	; 0x1812 <Timer_init+0x10a>
		{
			TCNT1 = Config_Ptr -> timer_InitialValue ;		/* Set timer1 initial count  */
    17d0:	ac e4       	ldi	r26, 0x4C	; 76
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	eb 81       	ldd	r30, Y+3	; 0x03
    17d6:	fc 81       	ldd	r31, Y+4	; 0x04
    17d8:	80 81       	ld	r24, Z
    17da:	91 81       	ldd	r25, Z+1	; 0x01
    17dc:	11 96       	adiw	r26, 0x01	; 1
    17de:	9c 93       	st	X, r25
    17e0:	8e 93       	st	-X, r24

			TIMSK |= (1<<TOIE1) ; /* Enable Timer1 Overflow Interrupt */
    17e2:	a9 e5       	ldi	r26, 0x59	; 89
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	e9 e5       	ldi	r30, 0x59	; 89
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	84 60       	ori	r24, 0x04	; 4
    17ee:	8c 93       	st	X, r24
			/* Configure timer control register TCCR1A
			 * 1. Normal Mode COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
			 * 2. Non PWM FOC1A=1 FOC1B=1
			 * 3. Normal Mode WGM10=0 WGM11=0
			 */
			TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    17f0:	ef e4       	ldi	r30, 0x4F	; 79
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	8c e0       	ldi	r24, 0x0C	; 12
    17f6:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1B
			 * 1. Normal Mode WGM12=0 WGM13=0
			 * 2. Prescaler = F_CPU/Prescaler
			 */
			TCCR1B = (TCCR1B & 0XF8) | (Config_Ptr->timer_clock);
    17f8:	ae e4       	ldi	r26, 0x4E	; 78
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	ee e4       	ldi	r30, 0x4E	; 78
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	98 2f       	mov	r25, r24
    1804:	98 7f       	andi	r25, 0xF8	; 248
    1806:	eb 81       	ldd	r30, Y+3	; 0x03
    1808:	fc 81       	ldd	r31, Y+4	; 0x04
    180a:	85 81       	ldd	r24, Z+5	; 0x05
    180c:	89 2b       	or	r24, r25
    180e:	8c 93       	st	X, r24
    1810:	7d c0       	rjmp	.+250    	; 0x190c <Timer_init+0x204>
		}

		/* compare mode configuration */
		else if (timer_Mode == Compare_Mode)
    1812:	89 81       	ldd	r24, Y+1	; 0x01
    1814:	81 30       	cpi	r24, 0x01	; 1
    1816:	09 f0       	breq	.+2      	; 0x181a <Timer_init+0x112>
    1818:	79 c0       	rjmp	.+242    	; 0x190c <Timer_init+0x204>
		{
			TCNT1 = Config_Ptr -> timer_InitialValue ;		/* Set timer1 initial count  */
    181a:	ac e4       	ldi	r26, 0x4C	; 76
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	eb 81       	ldd	r30, Y+3	; 0x03
    1820:	fc 81       	ldd	r31, Y+4	; 0x04
    1822:	80 81       	ld	r24, Z
    1824:	91 81       	ldd	r25, Z+1	; 0x01
    1826:	11 96       	adiw	r26, 0x01	; 1
    1828:	9c 93       	st	X, r25
    182a:	8e 93       	st	-X, r24

			OCR1A = Config_Ptr -> timer_compare_MatchValue;    /* Set the Compare value */
    182c:	aa e4       	ldi	r26, 0x4A	; 74
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	eb 81       	ldd	r30, Y+3	; 0x03
    1832:	fc 81       	ldd	r31, Y+4	; 0x04
    1834:	82 81       	ldd	r24, Z+2	; 0x02
    1836:	93 81       	ldd	r25, Z+3	; 0x03
    1838:	11 96       	adiw	r26, 0x01	; 1
    183a:	9c 93       	st	X, r25
    183c:	8e 93       	st	-X, r24

			TIMSK |= (1<<OCIE1A) ; /* Enable Timer1 Compare A Interrupt */
    183e:	a9 e5       	ldi	r26, 0x59	; 89
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	e9 e5       	ldi	r30, 0x59	; 89
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	80 61       	ori	r24, 0x10	; 16
    184a:	8c 93       	st	X, r24
			/* Configure timer control register TCCR1A
			 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
			 * 2. FOC1A=1 FOC1B=1
			 * 3. CTC Mode WGM10=0 WGM11=0 (Mode Number 4)
			 */
			TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    184c:	ef e4       	ldi	r30, 0x4F	; 79
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	8c e0       	ldi	r24, 0x0C	; 12
    1852:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1B
			 * 1. CTC Mode WGM12=1 WGM13=0 (Mode Number 4)
			 * 2. Prescaler = F_CPU/Prescaler
			 */
			TCCR1B = (1<<WGM12);
    1854:	ee e4       	ldi	r30, 0x4E	; 78
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	88 e0       	ldi	r24, 0x08	; 8
    185a:	80 83       	st	Z, r24
			TCCR1B = (TCCR1B & 0XF8) | (Config_Ptr->timer_clock);
    185c:	ae e4       	ldi	r26, 0x4E	; 78
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	ee e4       	ldi	r30, 0x4E	; 78
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	98 2f       	mov	r25, r24
    1868:	98 7f       	andi	r25, 0xF8	; 248
    186a:	eb 81       	ldd	r30, Y+3	; 0x03
    186c:	fc 81       	ldd	r31, Y+4	; 0x04
    186e:	85 81       	ldd	r24, Z+5	; 0x05
    1870:	89 2b       	or	r24, r25
    1872:	8c 93       	st	X, r24
    1874:	4b c0       	rjmp	.+150    	; 0x190c <Timer_init+0x204>
		}
	}

	/* Timer2 configuration */
	else if (timer_ID == Timer_2)
    1876:	8a 81       	ldd	r24, Y+2	; 0x02
    1878:	82 30       	cpi	r24, 0x02	; 2
    187a:	09 f0       	breq	.+2      	; 0x187e <Timer_init+0x176>
    187c:	47 c0       	rjmp	.+142    	; 0x190c <Timer_init+0x204>
	{
		/* normal mode configuration */
		if(timer_Mode == Normal_Mode)
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	88 23       	and	r24, r24
    1882:	e1 f4       	brne	.+56     	; 0x18bc <Timer_init+0x1b4>
		{
			TCNT2 = Config_Ptr -> timer_InitialValue ; /* Set Timer initial value */
    1884:	a4 e4       	ldi	r26, 0x44	; 68
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	eb 81       	ldd	r30, Y+3	; 0x03
    188a:	fc 81       	ldd	r31, Y+4	; 0x04
    188c:	80 81       	ld	r24, Z
    188e:	91 81       	ldd	r25, Z+1	; 0x01
    1890:	8c 93       	st	X, r24

			TIMSK = (1<<TOIE2); /* Enable Timer2 Overflow Interrupt */
    1892:	e9 e5       	ldi	r30, 0x59	; 89
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 e4       	ldi	r24, 0x40	; 64
    1898:	80 83       	st	Z, r24
			 * 1. Non PWM mode FOC2=1
			 * 2. Normal Mode WGM21=0 & WGM20=0
			 * 3. Normal Mode COM20=0 & COM21=0
			 * 4. clock = F_CPU/prescaler
			 */
			TCCR2 = (1<<FOC2) ;
    189a:	e5 e4       	ldi	r30, 0x45	; 69
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 e8       	ldi	r24, 0x80	; 128
    18a0:	80 83       	st	Z, r24
			TCCR2 = (TCCR2 & 0XF8) | (Config_Ptr->timer_clock);
    18a2:	a5 e4       	ldi	r26, 0x45	; 69
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	e5 e4       	ldi	r30, 0x45	; 69
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	98 2f       	mov	r25, r24
    18ae:	98 7f       	andi	r25, 0xF8	; 248
    18b0:	eb 81       	ldd	r30, Y+3	; 0x03
    18b2:	fc 81       	ldd	r31, Y+4	; 0x04
    18b4:	85 81       	ldd	r24, Z+5	; 0x05
    18b6:	89 2b       	or	r24, r25
    18b8:	8c 93       	st	X, r24
    18ba:	28 c0       	rjmp	.+80     	; 0x190c <Timer_init+0x204>
		}

		/* compare mode configuration */
		else if (timer_Mode == Compare_Mode)
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
    18be:	81 30       	cpi	r24, 0x01	; 1
    18c0:	29 f5       	brne	.+74     	; 0x190c <Timer_init+0x204>
		{
			TCNT2 = Config_Ptr -> timer_InitialValue ; /* Set Timer Initial Value  */
    18c2:	a4 e4       	ldi	r26, 0x44	; 68
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	eb 81       	ldd	r30, Y+3	; 0x03
    18c8:	fc 81       	ldd	r31, Y+4	; 0x04
    18ca:	80 81       	ld	r24, Z
    18cc:	91 81       	ldd	r25, Z+1	; 0x01
    18ce:	8c 93       	st	X, r24
			OCR2 = Config_Ptr -> timer_compare_MatchValue; /* Set Compare Value */
    18d0:	a3 e4       	ldi	r26, 0x43	; 67
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	eb 81       	ldd	r30, Y+3	; 0x03
    18d6:	fc 81       	ldd	r31, Y+4	; 0x04
    18d8:	82 81       	ldd	r24, Z+2	; 0x02
    18da:	93 81       	ldd	r25, Z+3	; 0x03
    18dc:	8c 93       	st	X, r24

			TIMSK |= (1<<OCIE2); /* Enable Timer2 Compare Interrupt */
    18de:	a9 e5       	ldi	r26, 0x59	; 89
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	e9 e5       	ldi	r30, 0x59	; 89
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	80 68       	ori	r24, 0x80	; 128
    18ea:	8c 93       	st	X, r24
			 * 1. Non PWM mode FOC2=1
			 * 2. CTC Mode WGM21=1 & WGM20=0
			 * 3. No need for OC2 so COM20=0 & COM21=0
			 * 4. clock = F_CPU/prescaler
			 */
			TCCR2 = (1<<FOC2) | (1<<WGM21);
    18ec:	e5 e4       	ldi	r30, 0x45	; 69
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	88 e8       	ldi	r24, 0x88	; 136
    18f2:	80 83       	st	Z, r24
			TCCR2 = (TCCR2 & 0XF8) | (Config_Ptr->timer_clock);
    18f4:	a5 e4       	ldi	r26, 0x45	; 69
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	e5 e4       	ldi	r30, 0x45	; 69
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	98 2f       	mov	r25, r24
    1900:	98 7f       	andi	r25, 0xF8	; 248
    1902:	eb 81       	ldd	r30, Y+3	; 0x03
    1904:	fc 81       	ldd	r31, Y+4	; 0x04
    1906:	85 81       	ldd	r24, Z+5	; 0x05
    1908:	89 2b       	or	r24, r25
    190a:	8c 93       	st	X, r24
		}
	}
}
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	cf 91       	pop	r28
    1916:	df 91       	pop	r29
    1918:	08 95       	ret

0000191a <Timer_deInit>:

/* Disables the specified timer and resets its settings. */
void Timer_deInit(Timer_ID_Type timer_type)
{
    191a:	df 93       	push	r29
    191c:	cf 93       	push	r28
    191e:	00 d0       	rcall	.+0      	; 0x1920 <Timer_deInit+0x6>
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
    1924:	8a 83       	std	Y+2, r24	; 0x02
	uint8 timer_ID = timer_type;
    1926:	8a 81       	ldd	r24, Y+2	; 0x02
    1928:	89 83       	std	Y+1, r24	; 0x01

	/* Timer0 deinit */
	if (timer_ID == Timer_0)
    192a:	89 81       	ldd	r24, Y+1	; 0x01
    192c:	88 23       	and	r24, r24
    192e:	c1 f4       	brne	.+48     	; 0x1960 <Timer_deInit+0x46>
	{
		TCNT0 = 0; /* Reset Timer value */
    1930:	e2 e5       	ldi	r30, 0x52	; 82
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	10 82       	st	Z, r1
		OCR0  = 0; /* Reset Compare value */
    1936:	ec e5       	ldi	r30, 0x5C	; 92
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	10 82       	st	Z, r1
		TIMSK &=~ (1<<TOIE0); /* Disable Timer0 Overflow Interrupt */
    193c:	a9 e5       	ldi	r26, 0x59	; 89
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	e9 e5       	ldi	r30, 0x59	; 89
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	8e 7f       	andi	r24, 0xFE	; 254
    1948:	8c 93       	st	X, r24
		TIMSK &=~ (1<<OCIE0); /* Disable Timer0 Compare Interrupt */
    194a:	a9 e5       	ldi	r26, 0x59	; 89
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	e9 e5       	ldi	r30, 0x59	; 89
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	8d 7f       	andi	r24, 0xFD	; 253
    1956:	8c 93       	st	X, r24
		TCCR0 = 0 ; /* Clear Register */
    1958:	e3 e5       	ldi	r30, 0x53	; 83
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	10 82       	st	Z, r1
    195e:	3a c0       	rjmp	.+116    	; 0x19d4 <Timer_deInit+0xba>
	}

	/* Timer1 deinit */
	else if (timer_ID == Timer_1)
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	81 30       	cpi	r24, 0x01	; 1
    1964:	e9 f4       	brne	.+58     	; 0x19a0 <Timer_deInit+0x86>
	{
		TCNT1 = 0;		 /* Reset Timer value */
    1966:	ec e4       	ldi	r30, 0x4C	; 76
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	11 82       	std	Z+1, r1	; 0x01
    196c:	10 82       	st	Z, r1
		OCR1A = 0;       /* Reset Compare value */
    196e:	ea e4       	ldi	r30, 0x4A	; 74
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	11 82       	std	Z+1, r1	; 0x01
    1974:	10 82       	st	Z, r1
		TIMSK &=~ (1<<TOIE1) ;   /* Disable Timer1 Overflow Interrupt */
    1976:	a9 e5       	ldi	r26, 0x59	; 89
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	e9 e5       	ldi	r30, 0x59	; 89
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	8b 7f       	andi	r24, 0xFB	; 251
    1982:	8c 93       	st	X, r24
		TIMSK &=~ (1<<OCIE1A) ;  /* Disable Timer1 Compare A Interrupt */
    1984:	a9 e5       	ldi	r26, 0x59	; 89
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	e9 e5       	ldi	r30, 0x59	; 89
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	8f 7e       	andi	r24, 0xEF	; 239
    1990:	8c 93       	st	X, r24
		TCCR1A = 0; /* Clear Register */
    1992:	ef e4       	ldi	r30, 0x4F	; 79
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	10 82       	st	Z, r1
		TCCR1B = 0; /* Clear Register */
    1998:	ee e4       	ldi	r30, 0x4E	; 78
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	10 82       	st	Z, r1
    199e:	1a c0       	rjmp	.+52     	; 0x19d4 <Timer_deInit+0xba>
	}

	/* Timer2 deinit */
	else if (timer_ID == Timer_2)
    19a0:	89 81       	ldd	r24, Y+1	; 0x01
    19a2:	82 30       	cpi	r24, 0x02	; 2
    19a4:	b9 f4       	brne	.+46     	; 0x19d4 <Timer_deInit+0xba>
	{
		TCNT2 = 0; /* Reset Timer value */
    19a6:	e4 e4       	ldi	r30, 0x44	; 68
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	10 82       	st	Z, r1
		OCR2  = 0; /* Reset Compare value */
    19ac:	e3 e4       	ldi	r30, 0x43	; 67
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	10 82       	st	Z, r1
		TIMSK &=~ (1<<TOIE2); /* Disable Timer2 Overflow Interrupt */
    19b2:	a9 e5       	ldi	r26, 0x59	; 89
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	e9 e5       	ldi	r30, 0x59	; 89
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	8f 7b       	andi	r24, 0xBF	; 191
    19be:	8c 93       	st	X, r24
		TIMSK &=~ (1<<OCIE2); /* Disable Timer2 Compare Interrupt */
    19c0:	a9 e5       	ldi	r26, 0x59	; 89
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	e9 e5       	ldi	r30, 0x59	; 89
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	8f 77       	andi	r24, 0x7F	; 127
    19cc:	8c 93       	st	X, r24
		TCCR2 = 0 ; /* Clear Register */
    19ce:	e5 e4       	ldi	r30, 0x45	; 69
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	10 82       	st	Z, r1
	}
}
    19d4:	0f 90       	pop	r0
    19d6:	0f 90       	pop	r0
    19d8:	cf 91       	pop	r28
    19da:	df 91       	pop	r29
    19dc:	08 95       	ret

000019de <Timer_setCallBack>:

/* Sets a callback function for the specified timer's interrupt. */
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID )
{
    19de:	df 93       	push	r29
    19e0:	cf 93       	push	r28
    19e2:	00 d0       	rcall	.+0      	; 0x19e4 <Timer_setCallBack+0x6>
    19e4:	00 d0       	rcall	.+0      	; 0x19e6 <Timer_setCallBack+0x8>
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
    19ea:	9b 83       	std	Y+3, r25	; 0x03
    19ec:	8a 83       	std	Y+2, r24	; 0x02
    19ee:	6c 83       	std	Y+4, r22	; 0x04
	uint8 timer_ID = a_timer_ID;
    19f0:	8c 81       	ldd	r24, Y+4	; 0x04
    19f2:	89 83       	std	Y+1, r24	; 0x01

	/* Timer0 callback */
	if (timer_ID == Timer_0)
    19f4:	89 81       	ldd	r24, Y+1	; 0x01
    19f6:	88 23       	and	r24, r24
    19f8:	39 f4       	brne	.+14     	; 0x1a08 <Timer_setCallBack+0x2a>
	{
		g_callBackPtr0 = a_ptr;
    19fa:	8a 81       	ldd	r24, Y+2	; 0x02
    19fc:	9b 81       	ldd	r25, Y+3	; 0x03
    19fe:	90 93 97 00 	sts	0x0097, r25
    1a02:	80 93 96 00 	sts	0x0096, r24
    1a06:	13 c0       	rjmp	.+38     	; 0x1a2e <Timer_setCallBack+0x50>
	}

	/* Timer1 callback */
	else if (timer_ID == Timer_1)
    1a08:	89 81       	ldd	r24, Y+1	; 0x01
    1a0a:	81 30       	cpi	r24, 0x01	; 1
    1a0c:	39 f4       	brne	.+14     	; 0x1a1c <Timer_setCallBack+0x3e>
	{
		g_callBackPtr1 = a_ptr;
    1a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a10:	9b 81       	ldd	r25, Y+3	; 0x03
    1a12:	90 93 99 00 	sts	0x0099, r25
    1a16:	80 93 98 00 	sts	0x0098, r24
    1a1a:	09 c0       	rjmp	.+18     	; 0x1a2e <Timer_setCallBack+0x50>

	}

	/* Timer2 callback */
	else if (timer_ID == Timer_2)
    1a1c:	89 81       	ldd	r24, Y+1	; 0x01
    1a1e:	82 30       	cpi	r24, 0x02	; 2
    1a20:	31 f4       	brne	.+12     	; 0x1a2e <Timer_setCallBack+0x50>
	{
		g_callBackPtr2 = a_ptr;
    1a22:	8a 81       	ldd	r24, Y+2	; 0x02
    1a24:	9b 81       	ldd	r25, Y+3	; 0x03
    1a26:	90 93 9b 00 	sts	0x009B, r25
    1a2a:	80 93 9a 00 	sts	0x009A, r24

	}
}
    1a2e:	0f 90       	pop	r0
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	0f 90       	pop	r0
    1a36:	cf 91       	pop	r28
    1a38:	df 91       	pop	r29
    1a3a:	08 95       	ret

00001a3c <PWM_Timer0_Start>:
/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/

void PWM_Timer0_Start(uint8 duty_cycle)
 {
    1a3c:	df 93       	push	r29
    1a3e:	cf 93       	push	r28
    1a40:	0f 92       	push	r0
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
    1a46:	89 83       	std	Y+1, r24	; 0x01
		TCNT0 = 0; /* Set Timer Initial Value to 0 */
    1a48:	e2 e5       	ldi	r30, 0x52	; 82
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	10 82       	st	Z, r1

	 	OCR0  = duty_cycle; /* Set Compare Value */
    1a4e:	ec e5       	ldi	r30, 0x5C	; 92
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
    1a54:	80 83       	st	Z, r24

	 	DDRB  |= (1<<PB3); /* Configure PB3/OC0 as output pin */
    1a56:	a7 e3       	ldi	r26, 0x37	; 55
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	e7 e3       	ldi	r30, 0x37	; 55
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	88 60       	ori	r24, 0x08	; 8
    1a62:	8c 93       	st	X, r24
	 	 * 1. Fast PWM mode FOC0=0
	 	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 	 * 4. clock = F_CPU/64 CS00=1 CS01=1 CS02=0
	 	 */
	 	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS00) | (1<<CS01) ;
    1a64:	e3 e5       	ldi	r30, 0x53	; 83
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	8b e6       	ldi	r24, 0x6B	; 107
    1a6a:	80 83       	st	Z, r24
 }
    1a6c:	0f 90       	pop	r0
    1a6e:	cf 91       	pop	r28
    1a70:	df 91       	pop	r29
    1a72:	08 95       	ret

00001a74 <EEPROM_writeByte>:
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1a74:	df 93       	push	r29
    1a76:	cf 93       	push	r28
    1a78:	00 d0       	rcall	.+0      	; 0x1a7a <EEPROM_writeByte+0x6>
    1a7a:	00 d0       	rcall	.+0      	; 0x1a7c <EEPROM_writeByte+0x8>
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
    1a80:	9a 83       	std	Y+2, r25	; 0x02
    1a82:	89 83       	std	Y+1, r24	; 0x01
    1a84:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1a86:	0e 94 50 11 	call	0x22a0	; 0x22a0 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1a8a:	0e 94 a8 11 	call	0x2350	; 0x2350 <TWI_getStatus>
    1a8e:	88 30       	cpi	r24, 0x08	; 8
    1a90:	11 f0       	breq	.+4      	; 0x1a96 <EEPROM_writeByte+0x22>
        return ERROR;
    1a92:	1c 82       	std	Y+4, r1	; 0x04
    1a94:	28 c0       	rjmp	.+80     	; 0x1ae6 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1a96:	89 81       	ldd	r24, Y+1	; 0x01
    1a98:	9a 81       	ldd	r25, Y+2	; 0x02
    1a9a:	80 70       	andi	r24, 0x00	; 0
    1a9c:	97 70       	andi	r25, 0x07	; 7
    1a9e:	88 0f       	add	r24, r24
    1aa0:	89 2f       	mov	r24, r25
    1aa2:	88 1f       	adc	r24, r24
    1aa4:	99 0b       	sbc	r25, r25
    1aa6:	91 95       	neg	r25
    1aa8:	80 6a       	ori	r24, 0xA0	; 160
    1aaa:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1aae:	0e 94 a8 11 	call	0x2350	; 0x2350 <TWI_getStatus>
    1ab2:	88 31       	cpi	r24, 0x18	; 24
    1ab4:	11 f0       	breq	.+4      	; 0x1aba <EEPROM_writeByte+0x46>
        return ERROR; 
    1ab6:	1c 82       	std	Y+4, r1	; 0x04
    1ab8:	16 c0       	rjmp	.+44     	; 0x1ae6 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1aba:	89 81       	ldd	r24, Y+1	; 0x01
    1abc:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1ac0:	0e 94 a8 11 	call	0x2350	; 0x2350 <TWI_getStatus>
    1ac4:	88 32       	cpi	r24, 0x28	; 40
    1ac6:	11 f0       	breq	.+4      	; 0x1acc <EEPROM_writeByte+0x58>
        return ERROR;
    1ac8:	1c 82       	std	Y+4, r1	; 0x04
    1aca:	0d c0       	rjmp	.+26     	; 0x1ae6 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1acc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ace:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1ad2:	0e 94 a8 11 	call	0x2350	; 0x2350 <TWI_getStatus>
    1ad6:	88 32       	cpi	r24, 0x28	; 40
    1ad8:	11 f0       	breq	.+4      	; 0x1ade <EEPROM_writeByte+0x6a>
        return ERROR;
    1ada:	1c 82       	std	Y+4, r1	; 0x04
    1adc:	04 c0       	rjmp	.+8      	; 0x1ae6 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1ade:	0e 94 60 11 	call	0x22c0	; 0x22c0 <TWI_stop>
	
    return SUCCESS;
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	8c 83       	std	Y+4, r24	; 0x04
    1ae6:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	cf 91       	pop	r28
    1af2:	df 91       	pop	r29
    1af4:	08 95       	ret

00001af6 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1af6:	df 93       	push	r29
    1af8:	cf 93       	push	r28
    1afa:	00 d0       	rcall	.+0      	; 0x1afc <EEPROM_readByte+0x6>
    1afc:	00 d0       	rcall	.+0      	; 0x1afe <EEPROM_readByte+0x8>
    1afe:	0f 92       	push	r0
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
    1b04:	9a 83       	std	Y+2, r25	; 0x02
    1b06:	89 83       	std	Y+1, r24	; 0x01
    1b08:	7c 83       	std	Y+4, r23	; 0x04
    1b0a:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1b0c:	0e 94 50 11 	call	0x22a0	; 0x22a0 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1b10:	0e 94 a8 11 	call	0x2350	; 0x2350 <TWI_getStatus>
    1b14:	88 30       	cpi	r24, 0x08	; 8
    1b16:	11 f0       	breq	.+4      	; 0x1b1c <EEPROM_readByte+0x26>
        return ERROR;
    1b18:	1d 82       	std	Y+5, r1	; 0x05
    1b1a:	44 c0       	rjmp	.+136    	; 0x1ba4 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b20:	80 70       	andi	r24, 0x00	; 0
    1b22:	97 70       	andi	r25, 0x07	; 7
    1b24:	88 0f       	add	r24, r24
    1b26:	89 2f       	mov	r24, r25
    1b28:	88 1f       	adc	r24, r24
    1b2a:	99 0b       	sbc	r25, r25
    1b2c:	91 95       	neg	r25
    1b2e:	80 6a       	ori	r24, 0xA0	; 160
    1b30:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1b34:	0e 94 a8 11 	call	0x2350	; 0x2350 <TWI_getStatus>
    1b38:	88 31       	cpi	r24, 0x18	; 24
    1b3a:	11 f0       	breq	.+4      	; 0x1b40 <EEPROM_readByte+0x4a>
        return ERROR;
    1b3c:	1d 82       	std	Y+5, r1	; 0x05
    1b3e:	32 c0       	rjmp	.+100    	; 0x1ba4 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
    1b42:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1b46:	0e 94 a8 11 	call	0x2350	; 0x2350 <TWI_getStatus>
    1b4a:	88 32       	cpi	r24, 0x28	; 40
    1b4c:	11 f0       	breq	.+4      	; 0x1b52 <EEPROM_readByte+0x5c>
        return ERROR;
    1b4e:	1d 82       	std	Y+5, r1	; 0x05
    1b50:	29 c0       	rjmp	.+82     	; 0x1ba4 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1b52:	0e 94 50 11 	call	0x22a0	; 0x22a0 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1b56:	0e 94 a8 11 	call	0x2350	; 0x2350 <TWI_getStatus>
    1b5a:	80 31       	cpi	r24, 0x10	; 16
    1b5c:	11 f0       	breq	.+4      	; 0x1b62 <EEPROM_readByte+0x6c>
        return ERROR;
    1b5e:	1d 82       	std	Y+5, r1	; 0x05
    1b60:	21 c0       	rjmp	.+66     	; 0x1ba4 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	9a 81       	ldd	r25, Y+2	; 0x02
    1b66:	80 70       	andi	r24, 0x00	; 0
    1b68:	97 70       	andi	r25, 0x07	; 7
    1b6a:	88 0f       	add	r24, r24
    1b6c:	89 2f       	mov	r24, r25
    1b6e:	88 1f       	adc	r24, r24
    1b70:	99 0b       	sbc	r25, r25
    1b72:	91 95       	neg	r25
    1b74:	81 6a       	ori	r24, 0xA1	; 161
    1b76:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1b7a:	0e 94 a8 11 	call	0x2350	; 0x2350 <TWI_getStatus>
    1b7e:	80 34       	cpi	r24, 0x40	; 64
    1b80:	11 f0       	breq	.+4      	; 0x1b86 <EEPROM_readByte+0x90>
        return ERROR;
    1b82:	1d 82       	std	Y+5, r1	; 0x05
    1b84:	0f c0       	rjmp	.+30     	; 0x1ba4 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1b86:	0e 94 95 11 	call	0x232a	; 0x232a <TWI_readByteWithNACK>
    1b8a:	eb 81       	ldd	r30, Y+3	; 0x03
    1b8c:	fc 81       	ldd	r31, Y+4	; 0x04
    1b8e:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1b90:	0e 94 a8 11 	call	0x2350	; 0x2350 <TWI_getStatus>
    1b94:	88 35       	cpi	r24, 0x58	; 88
    1b96:	11 f0       	breq	.+4      	; 0x1b9c <EEPROM_readByte+0xa6>
        return ERROR;
    1b98:	1d 82       	std	Y+5, r1	; 0x05
    1b9a:	04 c0       	rjmp	.+8      	; 0x1ba4 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1b9c:	0e 94 60 11 	call	0x22c0	; 0x22c0 <TWI_stop>

    return SUCCESS;
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	8d 83       	std	Y+5, r24	; 0x05
    1ba4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1ba6:	0f 90       	pop	r0
    1ba8:	0f 90       	pop	r0
    1baa:	0f 90       	pop	r0
    1bac:	0f 90       	pop	r0
    1bae:	0f 90       	pop	r0
    1bb0:	cf 91       	pop	r28
    1bb2:	df 91       	pop	r29
    1bb4:	08 95       	ret

00001bb6 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1bb6:	df 93       	push	r29
    1bb8:	cf 93       	push	r28
    1bba:	00 d0       	rcall	.+0      	; 0x1bbc <GPIO_setupPinDirection+0x6>
    1bbc:	00 d0       	rcall	.+0      	; 0x1bbe <GPIO_setupPinDirection+0x8>
    1bbe:	0f 92       	push	r0
    1bc0:	cd b7       	in	r28, 0x3d	; 61
    1bc2:	de b7       	in	r29, 0x3e	; 62
    1bc4:	89 83       	std	Y+1, r24	; 0x01
    1bc6:	6a 83       	std	Y+2, r22	; 0x02
    1bc8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1bca:	8a 81       	ldd	r24, Y+2	; 0x02
    1bcc:	88 30       	cpi	r24, 0x08	; 8
    1bce:	08 f0       	brcs	.+2      	; 0x1bd2 <GPIO_setupPinDirection+0x1c>
    1bd0:	d5 c0       	rjmp	.+426    	; 0x1d7c <GPIO_setupPinDirection+0x1c6>
    1bd2:	89 81       	ldd	r24, Y+1	; 0x01
    1bd4:	84 30       	cpi	r24, 0x04	; 4
    1bd6:	08 f0       	brcs	.+2      	; 0x1bda <GPIO_setupPinDirection+0x24>
    1bd8:	d1 c0       	rjmp	.+418    	; 0x1d7c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1bda:	89 81       	ldd	r24, Y+1	; 0x01
    1bdc:	28 2f       	mov	r18, r24
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	3d 83       	std	Y+5, r19	; 0x05
    1be2:	2c 83       	std	Y+4, r18	; 0x04
    1be4:	8c 81       	ldd	r24, Y+4	; 0x04
    1be6:	9d 81       	ldd	r25, Y+5	; 0x05
    1be8:	81 30       	cpi	r24, 0x01	; 1
    1bea:	91 05       	cpc	r25, r1
    1bec:	09 f4       	brne	.+2      	; 0x1bf0 <GPIO_setupPinDirection+0x3a>
    1bee:	43 c0       	rjmp	.+134    	; 0x1c76 <GPIO_setupPinDirection+0xc0>
    1bf0:	2c 81       	ldd	r18, Y+4	; 0x04
    1bf2:	3d 81       	ldd	r19, Y+5	; 0x05
    1bf4:	22 30       	cpi	r18, 0x02	; 2
    1bf6:	31 05       	cpc	r19, r1
    1bf8:	2c f4       	brge	.+10     	; 0x1c04 <GPIO_setupPinDirection+0x4e>
    1bfa:	8c 81       	ldd	r24, Y+4	; 0x04
    1bfc:	9d 81       	ldd	r25, Y+5	; 0x05
    1bfe:	00 97       	sbiw	r24, 0x00	; 0
    1c00:	71 f0       	breq	.+28     	; 0x1c1e <GPIO_setupPinDirection+0x68>
    1c02:	bc c0       	rjmp	.+376    	; 0x1d7c <GPIO_setupPinDirection+0x1c6>
    1c04:	2c 81       	ldd	r18, Y+4	; 0x04
    1c06:	3d 81       	ldd	r19, Y+5	; 0x05
    1c08:	22 30       	cpi	r18, 0x02	; 2
    1c0a:	31 05       	cpc	r19, r1
    1c0c:	09 f4       	brne	.+2      	; 0x1c10 <GPIO_setupPinDirection+0x5a>
    1c0e:	5f c0       	rjmp	.+190    	; 0x1cce <GPIO_setupPinDirection+0x118>
    1c10:	8c 81       	ldd	r24, Y+4	; 0x04
    1c12:	9d 81       	ldd	r25, Y+5	; 0x05
    1c14:	83 30       	cpi	r24, 0x03	; 3
    1c16:	91 05       	cpc	r25, r1
    1c18:	09 f4       	brne	.+2      	; 0x1c1c <GPIO_setupPinDirection+0x66>
    1c1a:	85 c0       	rjmp	.+266    	; 0x1d26 <GPIO_setupPinDirection+0x170>
    1c1c:	af c0       	rjmp	.+350    	; 0x1d7c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	81 30       	cpi	r24, 0x01	; 1
    1c22:	a1 f4       	brne	.+40     	; 0x1c4c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1c24:	aa e3       	ldi	r26, 0x3A	; 58
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	ea e3       	ldi	r30, 0x3A	; 58
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	48 2f       	mov	r20, r24
    1c30:	8a 81       	ldd	r24, Y+2	; 0x02
    1c32:	28 2f       	mov	r18, r24
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	02 2e       	mov	r0, r18
    1c3c:	02 c0       	rjmp	.+4      	; 0x1c42 <GPIO_setupPinDirection+0x8c>
    1c3e:	88 0f       	add	r24, r24
    1c40:	99 1f       	adc	r25, r25
    1c42:	0a 94       	dec	r0
    1c44:	e2 f7       	brpl	.-8      	; 0x1c3e <GPIO_setupPinDirection+0x88>
    1c46:	84 2b       	or	r24, r20
    1c48:	8c 93       	st	X, r24
    1c4a:	98 c0       	rjmp	.+304    	; 0x1d7c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1c4c:	aa e3       	ldi	r26, 0x3A	; 58
    1c4e:	b0 e0       	ldi	r27, 0x00	; 0
    1c50:	ea e3       	ldi	r30, 0x3A	; 58
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	48 2f       	mov	r20, r24
    1c58:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5a:	28 2f       	mov	r18, r24
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	02 2e       	mov	r0, r18
    1c64:	02 c0       	rjmp	.+4      	; 0x1c6a <GPIO_setupPinDirection+0xb4>
    1c66:	88 0f       	add	r24, r24
    1c68:	99 1f       	adc	r25, r25
    1c6a:	0a 94       	dec	r0
    1c6c:	e2 f7       	brpl	.-8      	; 0x1c66 <GPIO_setupPinDirection+0xb0>
    1c6e:	80 95       	com	r24
    1c70:	84 23       	and	r24, r20
    1c72:	8c 93       	st	X, r24
    1c74:	83 c0       	rjmp	.+262    	; 0x1d7c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1c76:	8b 81       	ldd	r24, Y+3	; 0x03
    1c78:	81 30       	cpi	r24, 0x01	; 1
    1c7a:	a1 f4       	brne	.+40     	; 0x1ca4 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1c7c:	a7 e3       	ldi	r26, 0x37	; 55
    1c7e:	b0 e0       	ldi	r27, 0x00	; 0
    1c80:	e7 e3       	ldi	r30, 0x37	; 55
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	48 2f       	mov	r20, r24
    1c88:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8a:	28 2f       	mov	r18, r24
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	02 2e       	mov	r0, r18
    1c94:	02 c0       	rjmp	.+4      	; 0x1c9a <GPIO_setupPinDirection+0xe4>
    1c96:	88 0f       	add	r24, r24
    1c98:	99 1f       	adc	r25, r25
    1c9a:	0a 94       	dec	r0
    1c9c:	e2 f7       	brpl	.-8      	; 0x1c96 <GPIO_setupPinDirection+0xe0>
    1c9e:	84 2b       	or	r24, r20
    1ca0:	8c 93       	st	X, r24
    1ca2:	6c c0       	rjmp	.+216    	; 0x1d7c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1ca4:	a7 e3       	ldi	r26, 0x37	; 55
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	e7 e3       	ldi	r30, 0x37	; 55
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	48 2f       	mov	r20, r24
    1cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb2:	28 2f       	mov	r18, r24
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	02 2e       	mov	r0, r18
    1cbc:	02 c0       	rjmp	.+4      	; 0x1cc2 <GPIO_setupPinDirection+0x10c>
    1cbe:	88 0f       	add	r24, r24
    1cc0:	99 1f       	adc	r25, r25
    1cc2:	0a 94       	dec	r0
    1cc4:	e2 f7       	brpl	.-8      	; 0x1cbe <GPIO_setupPinDirection+0x108>
    1cc6:	80 95       	com	r24
    1cc8:	84 23       	and	r24, r20
    1cca:	8c 93       	st	X, r24
    1ccc:	57 c0       	rjmp	.+174    	; 0x1d7c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1cce:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd0:	81 30       	cpi	r24, 0x01	; 1
    1cd2:	a1 f4       	brne	.+40     	; 0x1cfc <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1cd4:	a4 e3       	ldi	r26, 0x34	; 52
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	e4 e3       	ldi	r30, 0x34	; 52
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	80 81       	ld	r24, Z
    1cde:	48 2f       	mov	r20, r24
    1ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce2:	28 2f       	mov	r18, r24
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	02 2e       	mov	r0, r18
    1cec:	02 c0       	rjmp	.+4      	; 0x1cf2 <GPIO_setupPinDirection+0x13c>
    1cee:	88 0f       	add	r24, r24
    1cf0:	99 1f       	adc	r25, r25
    1cf2:	0a 94       	dec	r0
    1cf4:	e2 f7       	brpl	.-8      	; 0x1cee <GPIO_setupPinDirection+0x138>
    1cf6:	84 2b       	or	r24, r20
    1cf8:	8c 93       	st	X, r24
    1cfa:	40 c0       	rjmp	.+128    	; 0x1d7c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1cfc:	a4 e3       	ldi	r26, 0x34	; 52
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	e4 e3       	ldi	r30, 0x34	; 52
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	48 2f       	mov	r20, r24
    1d08:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0a:	28 2f       	mov	r18, r24
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	02 2e       	mov	r0, r18
    1d14:	02 c0       	rjmp	.+4      	; 0x1d1a <GPIO_setupPinDirection+0x164>
    1d16:	88 0f       	add	r24, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	0a 94       	dec	r0
    1d1c:	e2 f7       	brpl	.-8      	; 0x1d16 <GPIO_setupPinDirection+0x160>
    1d1e:	80 95       	com	r24
    1d20:	84 23       	and	r24, r20
    1d22:	8c 93       	st	X, r24
    1d24:	2b c0       	rjmp	.+86     	; 0x1d7c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1d26:	8b 81       	ldd	r24, Y+3	; 0x03
    1d28:	81 30       	cpi	r24, 0x01	; 1
    1d2a:	a1 f4       	brne	.+40     	; 0x1d54 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1d2c:	a1 e3       	ldi	r26, 0x31	; 49
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	e1 e3       	ldi	r30, 0x31	; 49
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	48 2f       	mov	r20, r24
    1d38:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3a:	28 2f       	mov	r18, r24
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	02 2e       	mov	r0, r18
    1d44:	02 c0       	rjmp	.+4      	; 0x1d4a <GPIO_setupPinDirection+0x194>
    1d46:	88 0f       	add	r24, r24
    1d48:	99 1f       	adc	r25, r25
    1d4a:	0a 94       	dec	r0
    1d4c:	e2 f7       	brpl	.-8      	; 0x1d46 <GPIO_setupPinDirection+0x190>
    1d4e:	84 2b       	or	r24, r20
    1d50:	8c 93       	st	X, r24
    1d52:	14 c0       	rjmp	.+40     	; 0x1d7c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1d54:	a1 e3       	ldi	r26, 0x31	; 49
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	e1 e3       	ldi	r30, 0x31	; 49
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	48 2f       	mov	r20, r24
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
    1d62:	28 2f       	mov	r18, r24
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	02 2e       	mov	r0, r18
    1d6c:	02 c0       	rjmp	.+4      	; 0x1d72 <GPIO_setupPinDirection+0x1bc>
    1d6e:	88 0f       	add	r24, r24
    1d70:	99 1f       	adc	r25, r25
    1d72:	0a 94       	dec	r0
    1d74:	e2 f7       	brpl	.-8      	; 0x1d6e <GPIO_setupPinDirection+0x1b8>
    1d76:	80 95       	com	r24
    1d78:	84 23       	and	r24, r20
    1d7a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1d7c:	0f 90       	pop	r0
    1d7e:	0f 90       	pop	r0
    1d80:	0f 90       	pop	r0
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	cf 91       	pop	r28
    1d88:	df 91       	pop	r29
    1d8a:	08 95       	ret

00001d8c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1d8c:	df 93       	push	r29
    1d8e:	cf 93       	push	r28
    1d90:	00 d0       	rcall	.+0      	; 0x1d92 <GPIO_writePin+0x6>
    1d92:	00 d0       	rcall	.+0      	; 0x1d94 <GPIO_writePin+0x8>
    1d94:	0f 92       	push	r0
    1d96:	cd b7       	in	r28, 0x3d	; 61
    1d98:	de b7       	in	r29, 0x3e	; 62
    1d9a:	89 83       	std	Y+1, r24	; 0x01
    1d9c:	6a 83       	std	Y+2, r22	; 0x02
    1d9e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1da0:	8a 81       	ldd	r24, Y+2	; 0x02
    1da2:	88 30       	cpi	r24, 0x08	; 8
    1da4:	08 f0       	brcs	.+2      	; 0x1da8 <GPIO_writePin+0x1c>
    1da6:	d5 c0       	rjmp	.+426    	; 0x1f52 <GPIO_writePin+0x1c6>
    1da8:	89 81       	ldd	r24, Y+1	; 0x01
    1daa:	84 30       	cpi	r24, 0x04	; 4
    1dac:	08 f0       	brcs	.+2      	; 0x1db0 <GPIO_writePin+0x24>
    1dae:	d1 c0       	rjmp	.+418    	; 0x1f52 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1db0:	89 81       	ldd	r24, Y+1	; 0x01
    1db2:	28 2f       	mov	r18, r24
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	3d 83       	std	Y+5, r19	; 0x05
    1db8:	2c 83       	std	Y+4, r18	; 0x04
    1dba:	8c 81       	ldd	r24, Y+4	; 0x04
    1dbc:	9d 81       	ldd	r25, Y+5	; 0x05
    1dbe:	81 30       	cpi	r24, 0x01	; 1
    1dc0:	91 05       	cpc	r25, r1
    1dc2:	09 f4       	brne	.+2      	; 0x1dc6 <GPIO_writePin+0x3a>
    1dc4:	43 c0       	rjmp	.+134    	; 0x1e4c <GPIO_writePin+0xc0>
    1dc6:	2c 81       	ldd	r18, Y+4	; 0x04
    1dc8:	3d 81       	ldd	r19, Y+5	; 0x05
    1dca:	22 30       	cpi	r18, 0x02	; 2
    1dcc:	31 05       	cpc	r19, r1
    1dce:	2c f4       	brge	.+10     	; 0x1dda <GPIO_writePin+0x4e>
    1dd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd2:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd4:	00 97       	sbiw	r24, 0x00	; 0
    1dd6:	71 f0       	breq	.+28     	; 0x1df4 <GPIO_writePin+0x68>
    1dd8:	bc c0       	rjmp	.+376    	; 0x1f52 <GPIO_writePin+0x1c6>
    1dda:	2c 81       	ldd	r18, Y+4	; 0x04
    1ddc:	3d 81       	ldd	r19, Y+5	; 0x05
    1dde:	22 30       	cpi	r18, 0x02	; 2
    1de0:	31 05       	cpc	r19, r1
    1de2:	09 f4       	brne	.+2      	; 0x1de6 <GPIO_writePin+0x5a>
    1de4:	5f c0       	rjmp	.+190    	; 0x1ea4 <GPIO_writePin+0x118>
    1de6:	8c 81       	ldd	r24, Y+4	; 0x04
    1de8:	9d 81       	ldd	r25, Y+5	; 0x05
    1dea:	83 30       	cpi	r24, 0x03	; 3
    1dec:	91 05       	cpc	r25, r1
    1dee:	09 f4       	brne	.+2      	; 0x1df2 <GPIO_writePin+0x66>
    1df0:	85 c0       	rjmp	.+266    	; 0x1efc <GPIO_writePin+0x170>
    1df2:	af c0       	rjmp	.+350    	; 0x1f52 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1df4:	8b 81       	ldd	r24, Y+3	; 0x03
    1df6:	81 30       	cpi	r24, 0x01	; 1
    1df8:	a1 f4       	brne	.+40     	; 0x1e22 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1dfa:	ab e3       	ldi	r26, 0x3B	; 59
    1dfc:	b0 e0       	ldi	r27, 0x00	; 0
    1dfe:	eb e3       	ldi	r30, 0x3B	; 59
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	48 2f       	mov	r20, r24
    1e06:	8a 81       	ldd	r24, Y+2	; 0x02
    1e08:	28 2f       	mov	r18, r24
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	02 2e       	mov	r0, r18
    1e12:	02 c0       	rjmp	.+4      	; 0x1e18 <GPIO_writePin+0x8c>
    1e14:	88 0f       	add	r24, r24
    1e16:	99 1f       	adc	r25, r25
    1e18:	0a 94       	dec	r0
    1e1a:	e2 f7       	brpl	.-8      	; 0x1e14 <GPIO_writePin+0x88>
    1e1c:	84 2b       	or	r24, r20
    1e1e:	8c 93       	st	X, r24
    1e20:	98 c0       	rjmp	.+304    	; 0x1f52 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1e22:	ab e3       	ldi	r26, 0x3B	; 59
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	eb e3       	ldi	r30, 0x3B	; 59
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	48 2f       	mov	r20, r24
    1e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e30:	28 2f       	mov	r18, r24
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	02 2e       	mov	r0, r18
    1e3a:	02 c0       	rjmp	.+4      	; 0x1e40 <GPIO_writePin+0xb4>
    1e3c:	88 0f       	add	r24, r24
    1e3e:	99 1f       	adc	r25, r25
    1e40:	0a 94       	dec	r0
    1e42:	e2 f7       	brpl	.-8      	; 0x1e3c <GPIO_writePin+0xb0>
    1e44:	80 95       	com	r24
    1e46:	84 23       	and	r24, r20
    1e48:	8c 93       	st	X, r24
    1e4a:	83 c0       	rjmp	.+262    	; 0x1f52 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4e:	81 30       	cpi	r24, 0x01	; 1
    1e50:	a1 f4       	brne	.+40     	; 0x1e7a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1e52:	a8 e3       	ldi	r26, 0x38	; 56
    1e54:	b0 e0       	ldi	r27, 0x00	; 0
    1e56:	e8 e3       	ldi	r30, 0x38	; 56
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	48 2f       	mov	r20, r24
    1e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e60:	28 2f       	mov	r18, r24
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	02 2e       	mov	r0, r18
    1e6a:	02 c0       	rjmp	.+4      	; 0x1e70 <GPIO_writePin+0xe4>
    1e6c:	88 0f       	add	r24, r24
    1e6e:	99 1f       	adc	r25, r25
    1e70:	0a 94       	dec	r0
    1e72:	e2 f7       	brpl	.-8      	; 0x1e6c <GPIO_writePin+0xe0>
    1e74:	84 2b       	or	r24, r20
    1e76:	8c 93       	st	X, r24
    1e78:	6c c0       	rjmp	.+216    	; 0x1f52 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1e7a:	a8 e3       	ldi	r26, 0x38	; 56
    1e7c:	b0 e0       	ldi	r27, 0x00	; 0
    1e7e:	e8 e3       	ldi	r30, 0x38	; 56
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 81       	ld	r24, Z
    1e84:	48 2f       	mov	r20, r24
    1e86:	8a 81       	ldd	r24, Y+2	; 0x02
    1e88:	28 2f       	mov	r18, r24
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	02 2e       	mov	r0, r18
    1e92:	02 c0       	rjmp	.+4      	; 0x1e98 <GPIO_writePin+0x10c>
    1e94:	88 0f       	add	r24, r24
    1e96:	99 1f       	adc	r25, r25
    1e98:	0a 94       	dec	r0
    1e9a:	e2 f7       	brpl	.-8      	; 0x1e94 <GPIO_writePin+0x108>
    1e9c:	80 95       	com	r24
    1e9e:	84 23       	and	r24, r20
    1ea0:	8c 93       	st	X, r24
    1ea2:	57 c0       	rjmp	.+174    	; 0x1f52 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea6:	81 30       	cpi	r24, 0x01	; 1
    1ea8:	a1 f4       	brne	.+40     	; 0x1ed2 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1eaa:	a5 e3       	ldi	r26, 0x35	; 53
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	e5 e3       	ldi	r30, 0x35	; 53
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	48 2f       	mov	r20, r24
    1eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb8:	28 2f       	mov	r18, r24
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	02 2e       	mov	r0, r18
    1ec2:	02 c0       	rjmp	.+4      	; 0x1ec8 <GPIO_writePin+0x13c>
    1ec4:	88 0f       	add	r24, r24
    1ec6:	99 1f       	adc	r25, r25
    1ec8:	0a 94       	dec	r0
    1eca:	e2 f7       	brpl	.-8      	; 0x1ec4 <GPIO_writePin+0x138>
    1ecc:	84 2b       	or	r24, r20
    1ece:	8c 93       	st	X, r24
    1ed0:	40 c0       	rjmp	.+128    	; 0x1f52 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1ed2:	a5 e3       	ldi	r26, 0x35	; 53
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	e5 e3       	ldi	r30, 0x35	; 53
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	48 2f       	mov	r20, r24
    1ede:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee0:	28 2f       	mov	r18, r24
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	02 2e       	mov	r0, r18
    1eea:	02 c0       	rjmp	.+4      	; 0x1ef0 <GPIO_writePin+0x164>
    1eec:	88 0f       	add	r24, r24
    1eee:	99 1f       	adc	r25, r25
    1ef0:	0a 94       	dec	r0
    1ef2:	e2 f7       	brpl	.-8      	; 0x1eec <GPIO_writePin+0x160>
    1ef4:	80 95       	com	r24
    1ef6:	84 23       	and	r24, r20
    1ef8:	8c 93       	st	X, r24
    1efa:	2b c0       	rjmp	.+86     	; 0x1f52 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1efc:	8b 81       	ldd	r24, Y+3	; 0x03
    1efe:	81 30       	cpi	r24, 0x01	; 1
    1f00:	a1 f4       	brne	.+40     	; 0x1f2a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1f02:	a2 e3       	ldi	r26, 0x32	; 50
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	e2 e3       	ldi	r30, 0x32	; 50
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	48 2f       	mov	r20, r24
    1f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f10:	28 2f       	mov	r18, r24
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	02 2e       	mov	r0, r18
    1f1a:	02 c0       	rjmp	.+4      	; 0x1f20 <GPIO_writePin+0x194>
    1f1c:	88 0f       	add	r24, r24
    1f1e:	99 1f       	adc	r25, r25
    1f20:	0a 94       	dec	r0
    1f22:	e2 f7       	brpl	.-8      	; 0x1f1c <GPIO_writePin+0x190>
    1f24:	84 2b       	or	r24, r20
    1f26:	8c 93       	st	X, r24
    1f28:	14 c0       	rjmp	.+40     	; 0x1f52 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1f2a:	a2 e3       	ldi	r26, 0x32	; 50
    1f2c:	b0 e0       	ldi	r27, 0x00	; 0
    1f2e:	e2 e3       	ldi	r30, 0x32	; 50
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	80 81       	ld	r24, Z
    1f34:	48 2f       	mov	r20, r24
    1f36:	8a 81       	ldd	r24, Y+2	; 0x02
    1f38:	28 2f       	mov	r18, r24
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	02 2e       	mov	r0, r18
    1f42:	02 c0       	rjmp	.+4      	; 0x1f48 <GPIO_writePin+0x1bc>
    1f44:	88 0f       	add	r24, r24
    1f46:	99 1f       	adc	r25, r25
    1f48:	0a 94       	dec	r0
    1f4a:	e2 f7       	brpl	.-8      	; 0x1f44 <GPIO_writePin+0x1b8>
    1f4c:	80 95       	com	r24
    1f4e:	84 23       	and	r24, r20
    1f50:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1f52:	0f 90       	pop	r0
    1f54:	0f 90       	pop	r0
    1f56:	0f 90       	pop	r0
    1f58:	0f 90       	pop	r0
    1f5a:	0f 90       	pop	r0
    1f5c:	cf 91       	pop	r28
    1f5e:	df 91       	pop	r29
    1f60:	08 95       	ret

00001f62 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1f62:	df 93       	push	r29
    1f64:	cf 93       	push	r28
    1f66:	00 d0       	rcall	.+0      	; 0x1f68 <GPIO_readPin+0x6>
    1f68:	00 d0       	rcall	.+0      	; 0x1f6a <GPIO_readPin+0x8>
    1f6a:	0f 92       	push	r0
    1f6c:	cd b7       	in	r28, 0x3d	; 61
    1f6e:	de b7       	in	r29, 0x3e	; 62
    1f70:	8a 83       	std	Y+2, r24	; 0x02
    1f72:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1f74:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1f76:	8b 81       	ldd	r24, Y+3	; 0x03
    1f78:	88 30       	cpi	r24, 0x08	; 8
    1f7a:	08 f0       	brcs	.+2      	; 0x1f7e <GPIO_readPin+0x1c>
    1f7c:	84 c0       	rjmp	.+264    	; 0x2086 <GPIO_readPin+0x124>
    1f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f80:	84 30       	cpi	r24, 0x04	; 4
    1f82:	08 f0       	brcs	.+2      	; 0x1f86 <GPIO_readPin+0x24>
    1f84:	80 c0       	rjmp	.+256    	; 0x2086 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1f86:	8a 81       	ldd	r24, Y+2	; 0x02
    1f88:	28 2f       	mov	r18, r24
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	3d 83       	std	Y+5, r19	; 0x05
    1f8e:	2c 83       	std	Y+4, r18	; 0x04
    1f90:	4c 81       	ldd	r20, Y+4	; 0x04
    1f92:	5d 81       	ldd	r21, Y+5	; 0x05
    1f94:	41 30       	cpi	r20, 0x01	; 1
    1f96:	51 05       	cpc	r21, r1
    1f98:	79 f1       	breq	.+94     	; 0x1ff8 <GPIO_readPin+0x96>
    1f9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f9e:	82 30       	cpi	r24, 0x02	; 2
    1fa0:	91 05       	cpc	r25, r1
    1fa2:	34 f4       	brge	.+12     	; 0x1fb0 <GPIO_readPin+0x4e>
    1fa4:	2c 81       	ldd	r18, Y+4	; 0x04
    1fa6:	3d 81       	ldd	r19, Y+5	; 0x05
    1fa8:	21 15       	cp	r18, r1
    1faa:	31 05       	cpc	r19, r1
    1fac:	69 f0       	breq	.+26     	; 0x1fc8 <GPIO_readPin+0x66>
    1fae:	6b c0       	rjmp	.+214    	; 0x2086 <GPIO_readPin+0x124>
    1fb0:	4c 81       	ldd	r20, Y+4	; 0x04
    1fb2:	5d 81       	ldd	r21, Y+5	; 0x05
    1fb4:	42 30       	cpi	r20, 0x02	; 2
    1fb6:	51 05       	cpc	r21, r1
    1fb8:	b9 f1       	breq	.+110    	; 0x2028 <GPIO_readPin+0xc6>
    1fba:	8c 81       	ldd	r24, Y+4	; 0x04
    1fbc:	9d 81       	ldd	r25, Y+5	; 0x05
    1fbe:	83 30       	cpi	r24, 0x03	; 3
    1fc0:	91 05       	cpc	r25, r1
    1fc2:	09 f4       	brne	.+2      	; 0x1fc6 <GPIO_readPin+0x64>
    1fc4:	49 c0       	rjmp	.+146    	; 0x2058 <GPIO_readPin+0xf6>
    1fc6:	5f c0       	rjmp	.+190    	; 0x2086 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1fc8:	e9 e3       	ldi	r30, 0x39	; 57
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	80 81       	ld	r24, Z
    1fce:	28 2f       	mov	r18, r24
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd4:	88 2f       	mov	r24, r24
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	a9 01       	movw	r20, r18
    1fda:	02 c0       	rjmp	.+4      	; 0x1fe0 <GPIO_readPin+0x7e>
    1fdc:	55 95       	asr	r21
    1fde:	47 95       	ror	r20
    1fe0:	8a 95       	dec	r24
    1fe2:	e2 f7       	brpl	.-8      	; 0x1fdc <GPIO_readPin+0x7a>
    1fe4:	ca 01       	movw	r24, r20
    1fe6:	81 70       	andi	r24, 0x01	; 1
    1fe8:	90 70       	andi	r25, 0x00	; 0
    1fea:	88 23       	and	r24, r24
    1fec:	19 f0       	breq	.+6      	; 0x1ff4 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	89 83       	std	Y+1, r24	; 0x01
    1ff2:	49 c0       	rjmp	.+146    	; 0x2086 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ff4:	19 82       	std	Y+1, r1	; 0x01
    1ff6:	47 c0       	rjmp	.+142    	; 0x2086 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1ff8:	e6 e3       	ldi	r30, 0x36	; 54
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	80 81       	ld	r24, Z
    1ffe:	28 2f       	mov	r18, r24
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	8b 81       	ldd	r24, Y+3	; 0x03
    2004:	88 2f       	mov	r24, r24
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	a9 01       	movw	r20, r18
    200a:	02 c0       	rjmp	.+4      	; 0x2010 <GPIO_readPin+0xae>
    200c:	55 95       	asr	r21
    200e:	47 95       	ror	r20
    2010:	8a 95       	dec	r24
    2012:	e2 f7       	brpl	.-8      	; 0x200c <GPIO_readPin+0xaa>
    2014:	ca 01       	movw	r24, r20
    2016:	81 70       	andi	r24, 0x01	; 1
    2018:	90 70       	andi	r25, 0x00	; 0
    201a:	88 23       	and	r24, r24
    201c:	19 f0       	breq	.+6      	; 0x2024 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	89 83       	std	Y+1, r24	; 0x01
    2022:	31 c0       	rjmp	.+98     	; 0x2086 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2024:	19 82       	std	Y+1, r1	; 0x01
    2026:	2f c0       	rjmp	.+94     	; 0x2086 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2028:	e3 e3       	ldi	r30, 0x33	; 51
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
    202e:	28 2f       	mov	r18, r24
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	8b 81       	ldd	r24, Y+3	; 0x03
    2034:	88 2f       	mov	r24, r24
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	a9 01       	movw	r20, r18
    203a:	02 c0       	rjmp	.+4      	; 0x2040 <GPIO_readPin+0xde>
    203c:	55 95       	asr	r21
    203e:	47 95       	ror	r20
    2040:	8a 95       	dec	r24
    2042:	e2 f7       	brpl	.-8      	; 0x203c <GPIO_readPin+0xda>
    2044:	ca 01       	movw	r24, r20
    2046:	81 70       	andi	r24, 0x01	; 1
    2048:	90 70       	andi	r25, 0x00	; 0
    204a:	88 23       	and	r24, r24
    204c:	19 f0       	breq	.+6      	; 0x2054 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	89 83       	std	Y+1, r24	; 0x01
    2052:	19 c0       	rjmp	.+50     	; 0x2086 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2054:	19 82       	std	Y+1, r1	; 0x01
    2056:	17 c0       	rjmp	.+46     	; 0x2086 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2058:	e0 e3       	ldi	r30, 0x30	; 48
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	80 81       	ld	r24, Z
    205e:	28 2f       	mov	r18, r24
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	8b 81       	ldd	r24, Y+3	; 0x03
    2064:	88 2f       	mov	r24, r24
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	a9 01       	movw	r20, r18
    206a:	02 c0       	rjmp	.+4      	; 0x2070 <GPIO_readPin+0x10e>
    206c:	55 95       	asr	r21
    206e:	47 95       	ror	r20
    2070:	8a 95       	dec	r24
    2072:	e2 f7       	brpl	.-8      	; 0x206c <GPIO_readPin+0x10a>
    2074:	ca 01       	movw	r24, r20
    2076:	81 70       	andi	r24, 0x01	; 1
    2078:	90 70       	andi	r25, 0x00	; 0
    207a:	88 23       	and	r24, r24
    207c:	19 f0       	breq	.+6      	; 0x2084 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	89 83       	std	Y+1, r24	; 0x01
    2082:	01 c0       	rjmp	.+2      	; 0x2086 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2084:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2086:	89 81       	ldd	r24, Y+1	; 0x01
}
    2088:	0f 90       	pop	r0
    208a:	0f 90       	pop	r0
    208c:	0f 90       	pop	r0
    208e:	0f 90       	pop	r0
    2090:	0f 90       	pop	r0
    2092:	cf 91       	pop	r28
    2094:	df 91       	pop	r29
    2096:	08 95       	ret

00002098 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2098:	df 93       	push	r29
    209a:	cf 93       	push	r28
    209c:	00 d0       	rcall	.+0      	; 0x209e <GPIO_setupPortDirection+0x6>
    209e:	00 d0       	rcall	.+0      	; 0x20a0 <GPIO_setupPortDirection+0x8>
    20a0:	cd b7       	in	r28, 0x3d	; 61
    20a2:	de b7       	in	r29, 0x3e	; 62
    20a4:	89 83       	std	Y+1, r24	; 0x01
    20a6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    20a8:	89 81       	ldd	r24, Y+1	; 0x01
    20aa:	84 30       	cpi	r24, 0x04	; 4
    20ac:	90 f5       	brcc	.+100    	; 0x2112 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    20ae:	89 81       	ldd	r24, Y+1	; 0x01
    20b0:	28 2f       	mov	r18, r24
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	3c 83       	std	Y+4, r19	; 0x04
    20b6:	2b 83       	std	Y+3, r18	; 0x03
    20b8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ba:	9c 81       	ldd	r25, Y+4	; 0x04
    20bc:	81 30       	cpi	r24, 0x01	; 1
    20be:	91 05       	cpc	r25, r1
    20c0:	d1 f0       	breq	.+52     	; 0x20f6 <GPIO_setupPortDirection+0x5e>
    20c2:	2b 81       	ldd	r18, Y+3	; 0x03
    20c4:	3c 81       	ldd	r19, Y+4	; 0x04
    20c6:	22 30       	cpi	r18, 0x02	; 2
    20c8:	31 05       	cpc	r19, r1
    20ca:	2c f4       	brge	.+10     	; 0x20d6 <GPIO_setupPortDirection+0x3e>
    20cc:	8b 81       	ldd	r24, Y+3	; 0x03
    20ce:	9c 81       	ldd	r25, Y+4	; 0x04
    20d0:	00 97       	sbiw	r24, 0x00	; 0
    20d2:	61 f0       	breq	.+24     	; 0x20ec <GPIO_setupPortDirection+0x54>
    20d4:	1e c0       	rjmp	.+60     	; 0x2112 <GPIO_setupPortDirection+0x7a>
    20d6:	2b 81       	ldd	r18, Y+3	; 0x03
    20d8:	3c 81       	ldd	r19, Y+4	; 0x04
    20da:	22 30       	cpi	r18, 0x02	; 2
    20dc:	31 05       	cpc	r19, r1
    20de:	81 f0       	breq	.+32     	; 0x2100 <GPIO_setupPortDirection+0x68>
    20e0:	8b 81       	ldd	r24, Y+3	; 0x03
    20e2:	9c 81       	ldd	r25, Y+4	; 0x04
    20e4:	83 30       	cpi	r24, 0x03	; 3
    20e6:	91 05       	cpc	r25, r1
    20e8:	81 f0       	breq	.+32     	; 0x210a <GPIO_setupPortDirection+0x72>
    20ea:	13 c0       	rjmp	.+38     	; 0x2112 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    20ec:	ea e3       	ldi	r30, 0x3A	; 58
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	8a 81       	ldd	r24, Y+2	; 0x02
    20f2:	80 83       	st	Z, r24
    20f4:	0e c0       	rjmp	.+28     	; 0x2112 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    20f6:	e7 e3       	ldi	r30, 0x37	; 55
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	8a 81       	ldd	r24, Y+2	; 0x02
    20fc:	80 83       	st	Z, r24
    20fe:	09 c0       	rjmp	.+18     	; 0x2112 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2100:	e4 e3       	ldi	r30, 0x34	; 52
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	8a 81       	ldd	r24, Y+2	; 0x02
    2106:	80 83       	st	Z, r24
    2108:	04 c0       	rjmp	.+8      	; 0x2112 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    210a:	e1 e3       	ldi	r30, 0x31	; 49
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	8a 81       	ldd	r24, Y+2	; 0x02
    2110:	80 83       	st	Z, r24
			break;
		}
	}
}
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	0f 90       	pop	r0
    211a:	cf 91       	pop	r28
    211c:	df 91       	pop	r29
    211e:	08 95       	ret

00002120 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2120:	df 93       	push	r29
    2122:	cf 93       	push	r28
    2124:	00 d0       	rcall	.+0      	; 0x2126 <GPIO_writePort+0x6>
    2126:	00 d0       	rcall	.+0      	; 0x2128 <GPIO_writePort+0x8>
    2128:	cd b7       	in	r28, 0x3d	; 61
    212a:	de b7       	in	r29, 0x3e	; 62
    212c:	89 83       	std	Y+1, r24	; 0x01
    212e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	84 30       	cpi	r24, 0x04	; 4
    2134:	90 f5       	brcc	.+100    	; 0x219a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	28 2f       	mov	r18, r24
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	3c 83       	std	Y+4, r19	; 0x04
    213e:	2b 83       	std	Y+3, r18	; 0x03
    2140:	8b 81       	ldd	r24, Y+3	; 0x03
    2142:	9c 81       	ldd	r25, Y+4	; 0x04
    2144:	81 30       	cpi	r24, 0x01	; 1
    2146:	91 05       	cpc	r25, r1
    2148:	d1 f0       	breq	.+52     	; 0x217e <GPIO_writePort+0x5e>
    214a:	2b 81       	ldd	r18, Y+3	; 0x03
    214c:	3c 81       	ldd	r19, Y+4	; 0x04
    214e:	22 30       	cpi	r18, 0x02	; 2
    2150:	31 05       	cpc	r19, r1
    2152:	2c f4       	brge	.+10     	; 0x215e <GPIO_writePort+0x3e>
    2154:	8b 81       	ldd	r24, Y+3	; 0x03
    2156:	9c 81       	ldd	r25, Y+4	; 0x04
    2158:	00 97       	sbiw	r24, 0x00	; 0
    215a:	61 f0       	breq	.+24     	; 0x2174 <GPIO_writePort+0x54>
    215c:	1e c0       	rjmp	.+60     	; 0x219a <GPIO_writePort+0x7a>
    215e:	2b 81       	ldd	r18, Y+3	; 0x03
    2160:	3c 81       	ldd	r19, Y+4	; 0x04
    2162:	22 30       	cpi	r18, 0x02	; 2
    2164:	31 05       	cpc	r19, r1
    2166:	81 f0       	breq	.+32     	; 0x2188 <GPIO_writePort+0x68>
    2168:	8b 81       	ldd	r24, Y+3	; 0x03
    216a:	9c 81       	ldd	r25, Y+4	; 0x04
    216c:	83 30       	cpi	r24, 0x03	; 3
    216e:	91 05       	cpc	r25, r1
    2170:	81 f0       	breq	.+32     	; 0x2192 <GPIO_writePort+0x72>
    2172:	13 c0       	rjmp	.+38     	; 0x219a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2174:	eb e3       	ldi	r30, 0x3B	; 59
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	8a 81       	ldd	r24, Y+2	; 0x02
    217a:	80 83       	st	Z, r24
    217c:	0e c0       	rjmp	.+28     	; 0x219a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    217e:	e8 e3       	ldi	r30, 0x38	; 56
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	8a 81       	ldd	r24, Y+2	; 0x02
    2184:	80 83       	st	Z, r24
    2186:	09 c0       	rjmp	.+18     	; 0x219a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2188:	e5 e3       	ldi	r30, 0x35	; 53
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	8a 81       	ldd	r24, Y+2	; 0x02
    218e:	80 83       	st	Z, r24
    2190:	04 c0       	rjmp	.+8      	; 0x219a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2192:	e2 e3       	ldi	r30, 0x32	; 50
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	8a 81       	ldd	r24, Y+2	; 0x02
    2198:	80 83       	st	Z, r24
			break;
		}
	}
}
    219a:	0f 90       	pop	r0
    219c:	0f 90       	pop	r0
    219e:	0f 90       	pop	r0
    21a0:	0f 90       	pop	r0
    21a2:	cf 91       	pop	r28
    21a4:	df 91       	pop	r29
    21a6:	08 95       	ret

000021a8 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    21a8:	df 93       	push	r29
    21aa:	cf 93       	push	r28
    21ac:	00 d0       	rcall	.+0      	; 0x21ae <GPIO_readPort+0x6>
    21ae:	00 d0       	rcall	.+0      	; 0x21b0 <GPIO_readPort+0x8>
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
    21b4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    21b6:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    21b8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ba:	84 30       	cpi	r24, 0x04	; 4
    21bc:	90 f5       	brcc	.+100    	; 0x2222 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    21be:	8a 81       	ldd	r24, Y+2	; 0x02
    21c0:	28 2f       	mov	r18, r24
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	3c 83       	std	Y+4, r19	; 0x04
    21c6:	2b 83       	std	Y+3, r18	; 0x03
    21c8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ca:	9c 81       	ldd	r25, Y+4	; 0x04
    21cc:	81 30       	cpi	r24, 0x01	; 1
    21ce:	91 05       	cpc	r25, r1
    21d0:	d1 f0       	breq	.+52     	; 0x2206 <GPIO_readPort+0x5e>
    21d2:	2b 81       	ldd	r18, Y+3	; 0x03
    21d4:	3c 81       	ldd	r19, Y+4	; 0x04
    21d6:	22 30       	cpi	r18, 0x02	; 2
    21d8:	31 05       	cpc	r19, r1
    21da:	2c f4       	brge	.+10     	; 0x21e6 <GPIO_readPort+0x3e>
    21dc:	8b 81       	ldd	r24, Y+3	; 0x03
    21de:	9c 81       	ldd	r25, Y+4	; 0x04
    21e0:	00 97       	sbiw	r24, 0x00	; 0
    21e2:	61 f0       	breq	.+24     	; 0x21fc <GPIO_readPort+0x54>
    21e4:	1e c0       	rjmp	.+60     	; 0x2222 <GPIO_readPort+0x7a>
    21e6:	2b 81       	ldd	r18, Y+3	; 0x03
    21e8:	3c 81       	ldd	r19, Y+4	; 0x04
    21ea:	22 30       	cpi	r18, 0x02	; 2
    21ec:	31 05       	cpc	r19, r1
    21ee:	81 f0       	breq	.+32     	; 0x2210 <GPIO_readPort+0x68>
    21f0:	8b 81       	ldd	r24, Y+3	; 0x03
    21f2:	9c 81       	ldd	r25, Y+4	; 0x04
    21f4:	83 30       	cpi	r24, 0x03	; 3
    21f6:	91 05       	cpc	r25, r1
    21f8:	81 f0       	breq	.+32     	; 0x221a <GPIO_readPort+0x72>
    21fa:	13 c0       	rjmp	.+38     	; 0x2222 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    21fc:	e9 e3       	ldi	r30, 0x39	; 57
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	89 83       	std	Y+1, r24	; 0x01
    2204:	0e c0       	rjmp	.+28     	; 0x2222 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2206:	e6 e3       	ldi	r30, 0x36	; 54
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	80 81       	ld	r24, Z
    220c:	89 83       	std	Y+1, r24	; 0x01
    220e:	09 c0       	rjmp	.+18     	; 0x2222 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2210:	e3 e3       	ldi	r30, 0x33	; 51
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	80 81       	ld	r24, Z
    2216:	89 83       	std	Y+1, r24	; 0x01
    2218:	04 c0       	rjmp	.+8      	; 0x2222 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    221a:	e0 e3       	ldi	r30, 0x30	; 48
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	80 81       	ld	r24, Z
    2220:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2222:	89 81       	ldd	r24, Y+1	; 0x01
}
    2224:	0f 90       	pop	r0
    2226:	0f 90       	pop	r0
    2228:	0f 90       	pop	r0
    222a:	0f 90       	pop	r0
    222c:	cf 91       	pop	r28
    222e:	df 91       	pop	r29
    2230:	08 95       	ret

00002232 <TWI_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    2232:	df 93       	push	r29
    2234:	cf 93       	push	r28
    2236:	00 d0       	rcall	.+0      	; 0x2238 <TWI_init+0x6>
    2238:	0f 92       	push	r0
    223a:	cd b7       	in	r28, 0x3d	; 61
    223c:	de b7       	in	r29, 0x3e	; 62
    223e:	9b 83       	std	Y+3, r25	; 0x03
    2240:	8a 83       	std	Y+2, r24	; 0x02
     * zero pre-scaler TWPS=00
     * and F_CPU = 8Mhz
     */

	uint8 twbr_value;
	TWSR = 0x00;
    2242:	e1 e2       	ldi	r30, 0x21	; 33
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	10 82       	st	Z, r1
	twbr_value = ( ( (F_CPU / Config_Ptr->bit_rate) - 16) / 2 );
    2248:	ea 81       	ldd	r30, Y+2	; 0x02
    224a:	fb 81       	ldd	r31, Y+3	; 0x03
    224c:	21 81       	ldd	r18, Z+1	; 0x01
    224e:	32 81       	ldd	r19, Z+2	; 0x02
    2250:	43 81       	ldd	r20, Z+3	; 0x03
    2252:	54 81       	ldd	r21, Z+4	; 0x04
    2254:	80 e0       	ldi	r24, 0x00	; 0
    2256:	92 e1       	ldi	r25, 0x12	; 18
    2258:	aa e7       	ldi	r26, 0x7A	; 122
    225a:	b0 e0       	ldi	r27, 0x00	; 0
    225c:	bc 01       	movw	r22, r24
    225e:	cd 01       	movw	r24, r26
    2260:	0e 94 cb 12 	call	0x2596	; 0x2596 <__udivmodsi4>
    2264:	da 01       	movw	r26, r20
    2266:	c9 01       	movw	r24, r18
    2268:	40 97       	sbiw	r24, 0x10	; 16
    226a:	a1 09       	sbc	r26, r1
    226c:	b1 09       	sbc	r27, r1
    226e:	b6 95       	lsr	r27
    2270:	a7 95       	ror	r26
    2272:	97 95       	ror	r25
    2274:	87 95       	ror	r24
    2276:	89 83       	std	Y+1, r24	; 0x01
	TWBR = twbr_value;
    2278:	e0 e2       	ldi	r30, 0x20	; 32
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	89 81       	ldd	r24, Y+1	; 0x01
    227e:	80 83       	st	Z, r24

    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = (Config_Ptr->address); // my address = 0x01 :)
    2280:	a2 e2       	ldi	r26, 0x22	; 34
    2282:	b0 e0       	ldi	r27, 0x00	; 0
    2284:	ea 81       	ldd	r30, Y+2	; 0x02
    2286:	fb 81       	ldd	r31, Y+3	; 0x03
    2288:	80 81       	ld	r24, Z
    228a:	8c 93       	st	X, r24

    TWCR = (1<<TWEN); /* enable TWI */
    228c:	e6 e5       	ldi	r30, 0x56	; 86
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	84 e0       	ldi	r24, 0x04	; 4
    2292:	80 83       	st	Z, r24
}
    2294:	0f 90       	pop	r0
    2296:	0f 90       	pop	r0
    2298:	0f 90       	pop	r0
    229a:	cf 91       	pop	r28
    229c:	df 91       	pop	r29
    229e:	08 95       	ret

000022a0 <TWI_start>:

void TWI_start(void)
{
    22a0:	df 93       	push	r29
    22a2:	cf 93       	push	r28
    22a4:	cd b7       	in	r28, 0x3d	; 61
    22a6:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    22a8:	e6 e5       	ldi	r30, 0x56	; 86
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	84 ea       	ldi	r24, 0xA4	; 164
    22ae:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    22b0:	e6 e5       	ldi	r30, 0x56	; 86
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	80 81       	ld	r24, Z
    22b6:	88 23       	and	r24, r24
    22b8:	dc f7       	brge	.-10     	; 0x22b0 <TWI_start+0x10>
}
    22ba:	cf 91       	pop	r28
    22bc:	df 91       	pop	r29
    22be:	08 95       	ret

000022c0 <TWI_stop>:

void TWI_stop(void)
{
    22c0:	df 93       	push	r29
    22c2:	cf 93       	push	r28
    22c4:	cd b7       	in	r28, 0x3d	; 61
    22c6:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    22c8:	e6 e5       	ldi	r30, 0x56	; 86
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	84 e9       	ldi	r24, 0x94	; 148
    22ce:	80 83       	st	Z, r24
}
    22d0:	cf 91       	pop	r28
    22d2:	df 91       	pop	r29
    22d4:	08 95       	ret

000022d6 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    22d6:	df 93       	push	r29
    22d8:	cf 93       	push	r28
    22da:	0f 92       	push	r0
    22dc:	cd b7       	in	r28, 0x3d	; 61
    22de:	de b7       	in	r29, 0x3e	; 62
    22e0:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    22e2:	e3 e2       	ldi	r30, 0x23	; 35
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	89 81       	ldd	r24, Y+1	; 0x01
    22e8:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    22ea:	e6 e5       	ldi	r30, 0x56	; 86
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	84 e8       	ldi	r24, 0x84	; 132
    22f0:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    22f2:	e6 e5       	ldi	r30, 0x56	; 86
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	80 81       	ld	r24, Z
    22f8:	88 23       	and	r24, r24
    22fa:	dc f7       	brge	.-10     	; 0x22f2 <TWI_writeByte+0x1c>
}
    22fc:	0f 90       	pop	r0
    22fe:	cf 91       	pop	r28
    2300:	df 91       	pop	r29
    2302:	08 95       	ret

00002304 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2304:	df 93       	push	r29
    2306:	cf 93       	push	r28
    2308:	cd b7       	in	r28, 0x3d	; 61
    230a:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    230c:	e6 e5       	ldi	r30, 0x56	; 86
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	84 ec       	ldi	r24, 0xC4	; 196
    2312:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2314:	e6 e5       	ldi	r30, 0x56	; 86
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	80 81       	ld	r24, Z
    231a:	88 23       	and	r24, r24
    231c:	dc f7       	brge	.-10     	; 0x2314 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    231e:	e3 e2       	ldi	r30, 0x23	; 35
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	80 81       	ld	r24, Z
}
    2324:	cf 91       	pop	r28
    2326:	df 91       	pop	r29
    2328:	08 95       	ret

0000232a <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    232a:	df 93       	push	r29
    232c:	cf 93       	push	r28
    232e:	cd b7       	in	r28, 0x3d	; 61
    2330:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2332:	e6 e5       	ldi	r30, 0x56	; 86
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	84 e8       	ldi	r24, 0x84	; 132
    2338:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    233a:	e6 e5       	ldi	r30, 0x56	; 86
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	80 81       	ld	r24, Z
    2340:	88 23       	and	r24, r24
    2342:	dc f7       	brge	.-10     	; 0x233a <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2344:	e3 e2       	ldi	r30, 0x23	; 35
    2346:	f0 e0       	ldi	r31, 0x00	; 0
    2348:	80 81       	ld	r24, Z
}
    234a:	cf 91       	pop	r28
    234c:	df 91       	pop	r29
    234e:	08 95       	ret

00002350 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2350:	df 93       	push	r29
    2352:	cf 93       	push	r28
    2354:	0f 92       	push	r0
    2356:	cd b7       	in	r28, 0x3d	; 61
    2358:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    235a:	e1 e2       	ldi	r30, 0x21	; 33
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	80 81       	ld	r24, Z
    2360:	88 7f       	andi	r24, 0xF8	; 248
    2362:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2364:	89 81       	ldd	r24, Y+1	; 0x01
}
    2366:	0f 90       	pop	r0
    2368:	cf 91       	pop	r28
    236a:	df 91       	pop	r29
    236c:	08 95       	ret

0000236e <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    236e:	df 93       	push	r29
    2370:	cf 93       	push	r28
    2372:	00 d0       	rcall	.+0      	; 0x2374 <UART_init+0x6>
    2374:	00 d0       	rcall	.+0      	; 0x2376 <UART_init+0x8>
    2376:	cd b7       	in	r28, 0x3d	; 61
    2378:	de b7       	in	r29, 0x3e	; 62
    237a:	9c 83       	std	Y+4, r25	; 0x04
    237c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    237e:	1a 82       	std	Y+2, r1	; 0x02
    2380:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2382:	eb e2       	ldi	r30, 0x2B	; 43
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	82 e0       	ldi	r24, 0x02	; 2
    2388:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For al bit modes except 9 bit
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    238a:	ea e2       	ldi	r30, 0x2A	; 42
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	88 e1       	ldi	r24, 0x18	; 24
    2390:	80 83       	st	Z, r24
	 * USBS    = 0 OR 1 1-bit or 2-bit (stop bit).
	 * UCSZ1:0 = Choose X-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/

	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
    2392:	e0 e4       	ldi	r30, 0x40	; 64
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	86 e8       	ldi	r24, 0x86	; 134
    2398:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0XF9) | (Config_Ptr->bit_data<<1);
    239a:	a0 e4       	ldi	r26, 0x40	; 64
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	e0 e4       	ldi	r30, 0x40	; 64
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	80 81       	ld	r24, Z
    23a4:	28 2f       	mov	r18, r24
    23a6:	29 7f       	andi	r18, 0xF9	; 249
    23a8:	eb 81       	ldd	r30, Y+3	; 0x03
    23aa:	fc 81       	ldd	r31, Y+4	; 0x04
    23ac:	80 81       	ld	r24, Z
    23ae:	88 2f       	mov	r24, r24
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	88 0f       	add	r24, r24
    23b4:	99 1f       	adc	r25, r25
    23b6:	82 2b       	or	r24, r18
    23b8:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0XF7) | (Config_Ptr->stop_bit<<3);
    23ba:	a0 e4       	ldi	r26, 0x40	; 64
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	e0 e4       	ldi	r30, 0x40	; 64
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	80 81       	ld	r24, Z
    23c4:	28 2f       	mov	r18, r24
    23c6:	27 7f       	andi	r18, 0xF7	; 247
    23c8:	eb 81       	ldd	r30, Y+3	; 0x03
    23ca:	fc 81       	ldd	r31, Y+4	; 0x04
    23cc:	82 81       	ldd	r24, Z+2	; 0x02
    23ce:	88 2f       	mov	r24, r24
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	88 0f       	add	r24, r24
    23d4:	99 1f       	adc	r25, r25
    23d6:	88 0f       	add	r24, r24
    23d8:	99 1f       	adc	r25, r25
    23da:	88 0f       	add	r24, r24
    23dc:	99 1f       	adc	r25, r25
    23de:	82 2b       	or	r24, r18
    23e0:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0XCF) | (Config_Ptr->parity<<4);
    23e2:	a0 e4       	ldi	r26, 0x40	; 64
    23e4:	b0 e0       	ldi	r27, 0x00	; 0
    23e6:	e0 e4       	ldi	r30, 0x40	; 64
    23e8:	f0 e0       	ldi	r31, 0x00	; 0
    23ea:	80 81       	ld	r24, Z
    23ec:	28 2f       	mov	r18, r24
    23ee:	2f 7c       	andi	r18, 0xCF	; 207
    23f0:	eb 81       	ldd	r30, Y+3	; 0x03
    23f2:	fc 81       	ldd	r31, Y+4	; 0x04
    23f4:	81 81       	ldd	r24, Z+1	; 0x01
    23f6:	88 2f       	mov	r24, r24
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	82 95       	swap	r24
    23fc:	92 95       	swap	r25
    23fe:	90 7f       	andi	r25, 0xF0	; 240
    2400:	98 27       	eor	r25, r24
    2402:	80 7f       	andi	r24, 0xF0	; 240
    2404:	98 27       	eor	r25, r24
    2406:	82 2b       	or	r24, r18
    2408:	8c 93       	st	X, r24

	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ( Config_Ptr->baud_rate * 8UL))) - 1);
    240a:	eb 81       	ldd	r30, Y+3	; 0x03
    240c:	fc 81       	ldd	r31, Y+4	; 0x04
    240e:	83 81       	ldd	r24, Z+3	; 0x03
    2410:	94 81       	ldd	r25, Z+4	; 0x04
    2412:	cc 01       	movw	r24, r24
    2414:	a0 e0       	ldi	r26, 0x00	; 0
    2416:	b0 e0       	ldi	r27, 0x00	; 0
    2418:	88 0f       	add	r24, r24
    241a:	99 1f       	adc	r25, r25
    241c:	aa 1f       	adc	r26, r26
    241e:	bb 1f       	adc	r27, r27
    2420:	88 0f       	add	r24, r24
    2422:	99 1f       	adc	r25, r25
    2424:	aa 1f       	adc	r26, r26
    2426:	bb 1f       	adc	r27, r27
    2428:	88 0f       	add	r24, r24
    242a:	99 1f       	adc	r25, r25
    242c:	aa 1f       	adc	r26, r26
    242e:	bb 1f       	adc	r27, r27
    2430:	9c 01       	movw	r18, r24
    2432:	ad 01       	movw	r20, r26
    2434:	80 e0       	ldi	r24, 0x00	; 0
    2436:	92 e1       	ldi	r25, 0x12	; 18
    2438:	aa e7       	ldi	r26, 0x7A	; 122
    243a:	b0 e0       	ldi	r27, 0x00	; 0
    243c:	bc 01       	movw	r22, r24
    243e:	cd 01       	movw	r24, r26
    2440:	0e 94 cb 12 	call	0x2596	; 0x2596 <__udivmodsi4>
    2444:	da 01       	movw	r26, r20
    2446:	c9 01       	movw	r24, r18
    2448:	01 97       	sbiw	r24, 0x01	; 1
    244a:	9a 83       	std	Y+2, r25	; 0x02
    244c:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    244e:	e0 e4       	ldi	r30, 0x40	; 64
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	89 81       	ldd	r24, Y+1	; 0x01
    2454:	9a 81       	ldd	r25, Y+2	; 0x02
    2456:	89 2f       	mov	r24, r25
    2458:	99 27       	eor	r25, r25
    245a:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    245c:	e9 e2       	ldi	r30, 0x29	; 41
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	89 81       	ldd	r24, Y+1	; 0x01
    2462:	80 83       	st	Z, r24
}
    2464:	0f 90       	pop	r0
    2466:	0f 90       	pop	r0
    2468:	0f 90       	pop	r0
    246a:	0f 90       	pop	r0
    246c:	cf 91       	pop	r28
    246e:	df 91       	pop	r29
    2470:	08 95       	ret

00002472 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2472:	df 93       	push	r29
    2474:	cf 93       	push	r28
    2476:	0f 92       	push	r0
    2478:	cd b7       	in	r28, 0x3d	; 61
    247a:	de b7       	in	r29, 0x3e	; 62
    247c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    247e:	eb e2       	ldi	r30, 0x2B	; 43
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	80 81       	ld	r24, Z
    2484:	88 2f       	mov	r24, r24
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	80 72       	andi	r24, 0x20	; 32
    248a:	90 70       	andi	r25, 0x00	; 0
    248c:	00 97       	sbiw	r24, 0x00	; 0
    248e:	b9 f3       	breq	.-18     	; 0x247e <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2490:	ec e2       	ldi	r30, 0x2C	; 44
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	89 81       	ldd	r24, Y+1	; 0x01
    2496:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2498:	0f 90       	pop	r0
    249a:	cf 91       	pop	r28
    249c:	df 91       	pop	r29
    249e:	08 95       	ret

000024a0 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    24a0:	df 93       	push	r29
    24a2:	cf 93       	push	r28
    24a4:	cd b7       	in	r28, 0x3d	; 61
    24a6:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    24a8:	eb e2       	ldi	r30, 0x2B	; 43
    24aa:	f0 e0       	ldi	r31, 0x00	; 0
    24ac:	80 81       	ld	r24, Z
    24ae:	88 23       	and	r24, r24
    24b0:	dc f7       	brge	.-10     	; 0x24a8 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    24b2:	ec e2       	ldi	r30, 0x2C	; 44
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	80 81       	ld	r24, Z
}
    24b8:	cf 91       	pop	r28
    24ba:	df 91       	pop	r29
    24bc:	08 95       	ret

000024be <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    24be:	df 93       	push	r29
    24c0:	cf 93       	push	r28
    24c2:	00 d0       	rcall	.+0      	; 0x24c4 <UART_sendString+0x6>
    24c4:	0f 92       	push	r0
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
    24ca:	9b 83       	std	Y+3, r25	; 0x03
    24cc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    24ce:	19 82       	std	Y+1, r1	; 0x01
    24d0:	0e c0       	rjmp	.+28     	; 0x24ee <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    24d2:	89 81       	ldd	r24, Y+1	; 0x01
    24d4:	28 2f       	mov	r18, r24
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	8a 81       	ldd	r24, Y+2	; 0x02
    24da:	9b 81       	ldd	r25, Y+3	; 0x03
    24dc:	fc 01       	movw	r30, r24
    24de:	e2 0f       	add	r30, r18
    24e0:	f3 1f       	adc	r31, r19
    24e2:	80 81       	ld	r24, Z
    24e4:	0e 94 39 12 	call	0x2472	; 0x2472 <UART_sendByte>
		i++;
    24e8:	89 81       	ldd	r24, Y+1	; 0x01
    24ea:	8f 5f       	subi	r24, 0xFF	; 255
    24ec:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    24ee:	89 81       	ldd	r24, Y+1	; 0x01
    24f0:	28 2f       	mov	r18, r24
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	8a 81       	ldd	r24, Y+2	; 0x02
    24f6:	9b 81       	ldd	r25, Y+3	; 0x03
    24f8:	fc 01       	movw	r30, r24
    24fa:	e2 0f       	add	r30, r18
    24fc:	f3 1f       	adc	r31, r19
    24fe:	80 81       	ld	r24, Z
    2500:	88 23       	and	r24, r24
    2502:	39 f7       	brne	.-50     	; 0x24d2 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2504:	0f 90       	pop	r0
    2506:	0f 90       	pop	r0
    2508:	0f 90       	pop	r0
    250a:	cf 91       	pop	r28
    250c:	df 91       	pop	r29
    250e:	08 95       	ret

00002510 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2510:	0f 93       	push	r16
    2512:	1f 93       	push	r17
    2514:	df 93       	push	r29
    2516:	cf 93       	push	r28
    2518:	00 d0       	rcall	.+0      	; 0x251a <UART_receiveString+0xa>
    251a:	0f 92       	push	r0
    251c:	cd b7       	in	r28, 0x3d	; 61
    251e:	de b7       	in	r29, 0x3e	; 62
    2520:	9b 83       	std	Y+3, r25	; 0x03
    2522:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2524:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2526:	89 81       	ldd	r24, Y+1	; 0x01
    2528:	28 2f       	mov	r18, r24
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	8a 81       	ldd	r24, Y+2	; 0x02
    252e:	9b 81       	ldd	r25, Y+3	; 0x03
    2530:	8c 01       	movw	r16, r24
    2532:	02 0f       	add	r16, r18
    2534:	13 1f       	adc	r17, r19
    2536:	0e 94 50 12 	call	0x24a0	; 0x24a0 <UART_recieveByte>
    253a:	f8 01       	movw	r30, r16
    253c:	80 83       	st	Z, r24
    253e:	0f c0       	rjmp	.+30     	; 0x255e <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2540:	89 81       	ldd	r24, Y+1	; 0x01
    2542:	8f 5f       	subi	r24, 0xFF	; 255
    2544:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2546:	89 81       	ldd	r24, Y+1	; 0x01
    2548:	28 2f       	mov	r18, r24
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	8a 81       	ldd	r24, Y+2	; 0x02
    254e:	9b 81       	ldd	r25, Y+3	; 0x03
    2550:	8c 01       	movw	r16, r24
    2552:	02 0f       	add	r16, r18
    2554:	13 1f       	adc	r17, r19
    2556:	0e 94 50 12 	call	0x24a0	; 0x24a0 <UART_recieveByte>
    255a:	f8 01       	movw	r30, r16
    255c:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    255e:	89 81       	ldd	r24, Y+1	; 0x01
    2560:	28 2f       	mov	r18, r24
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	8a 81       	ldd	r24, Y+2	; 0x02
    2566:	9b 81       	ldd	r25, Y+3	; 0x03
    2568:	fc 01       	movw	r30, r24
    256a:	e2 0f       	add	r30, r18
    256c:	f3 1f       	adc	r31, r19
    256e:	80 81       	ld	r24, Z
    2570:	83 32       	cpi	r24, 0x23	; 35
    2572:	31 f7       	brne	.-52     	; 0x2540 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2574:	89 81       	ldd	r24, Y+1	; 0x01
    2576:	28 2f       	mov	r18, r24
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	8a 81       	ldd	r24, Y+2	; 0x02
    257c:	9b 81       	ldd	r25, Y+3	; 0x03
    257e:	fc 01       	movw	r30, r24
    2580:	e2 0f       	add	r30, r18
    2582:	f3 1f       	adc	r31, r19
    2584:	10 82       	st	Z, r1
}
    2586:	0f 90       	pop	r0
    2588:	0f 90       	pop	r0
    258a:	0f 90       	pop	r0
    258c:	cf 91       	pop	r28
    258e:	df 91       	pop	r29
    2590:	1f 91       	pop	r17
    2592:	0f 91       	pop	r16
    2594:	08 95       	ret

00002596 <__udivmodsi4>:
    2596:	a1 e2       	ldi	r26, 0x21	; 33
    2598:	1a 2e       	mov	r1, r26
    259a:	aa 1b       	sub	r26, r26
    259c:	bb 1b       	sub	r27, r27
    259e:	fd 01       	movw	r30, r26
    25a0:	0d c0       	rjmp	.+26     	; 0x25bc <__udivmodsi4_ep>

000025a2 <__udivmodsi4_loop>:
    25a2:	aa 1f       	adc	r26, r26
    25a4:	bb 1f       	adc	r27, r27
    25a6:	ee 1f       	adc	r30, r30
    25a8:	ff 1f       	adc	r31, r31
    25aa:	a2 17       	cp	r26, r18
    25ac:	b3 07       	cpc	r27, r19
    25ae:	e4 07       	cpc	r30, r20
    25b0:	f5 07       	cpc	r31, r21
    25b2:	20 f0       	brcs	.+8      	; 0x25bc <__udivmodsi4_ep>
    25b4:	a2 1b       	sub	r26, r18
    25b6:	b3 0b       	sbc	r27, r19
    25b8:	e4 0b       	sbc	r30, r20
    25ba:	f5 0b       	sbc	r31, r21

000025bc <__udivmodsi4_ep>:
    25bc:	66 1f       	adc	r22, r22
    25be:	77 1f       	adc	r23, r23
    25c0:	88 1f       	adc	r24, r24
    25c2:	99 1f       	adc	r25, r25
    25c4:	1a 94       	dec	r1
    25c6:	69 f7       	brne	.-38     	; 0x25a2 <__udivmodsi4_loop>
    25c8:	60 95       	com	r22
    25ca:	70 95       	com	r23
    25cc:	80 95       	com	r24
    25ce:	90 95       	com	r25
    25d0:	9b 01       	movw	r18, r22
    25d2:	ac 01       	movw	r20, r24
    25d4:	bd 01       	movw	r22, r26
    25d6:	cf 01       	movw	r24, r30
    25d8:	08 95       	ret

000025da <__prologue_saves__>:
    25da:	2f 92       	push	r2
    25dc:	3f 92       	push	r3
    25de:	4f 92       	push	r4
    25e0:	5f 92       	push	r5
    25e2:	6f 92       	push	r6
    25e4:	7f 92       	push	r7
    25e6:	8f 92       	push	r8
    25e8:	9f 92       	push	r9
    25ea:	af 92       	push	r10
    25ec:	bf 92       	push	r11
    25ee:	cf 92       	push	r12
    25f0:	df 92       	push	r13
    25f2:	ef 92       	push	r14
    25f4:	ff 92       	push	r15
    25f6:	0f 93       	push	r16
    25f8:	1f 93       	push	r17
    25fa:	cf 93       	push	r28
    25fc:	df 93       	push	r29
    25fe:	cd b7       	in	r28, 0x3d	; 61
    2600:	de b7       	in	r29, 0x3e	; 62
    2602:	ca 1b       	sub	r28, r26
    2604:	db 0b       	sbc	r29, r27
    2606:	0f b6       	in	r0, 0x3f	; 63
    2608:	f8 94       	cli
    260a:	de bf       	out	0x3e, r29	; 62
    260c:	0f be       	out	0x3f, r0	; 63
    260e:	cd bf       	out	0x3d, r28	; 61
    2610:	09 94       	ijmp

00002612 <__epilogue_restores__>:
    2612:	2a 88       	ldd	r2, Y+18	; 0x12
    2614:	39 88       	ldd	r3, Y+17	; 0x11
    2616:	48 88       	ldd	r4, Y+16	; 0x10
    2618:	5f 84       	ldd	r5, Y+15	; 0x0f
    261a:	6e 84       	ldd	r6, Y+14	; 0x0e
    261c:	7d 84       	ldd	r7, Y+13	; 0x0d
    261e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2620:	9b 84       	ldd	r9, Y+11	; 0x0b
    2622:	aa 84       	ldd	r10, Y+10	; 0x0a
    2624:	b9 84       	ldd	r11, Y+9	; 0x09
    2626:	c8 84       	ldd	r12, Y+8	; 0x08
    2628:	df 80       	ldd	r13, Y+7	; 0x07
    262a:	ee 80       	ldd	r14, Y+6	; 0x06
    262c:	fd 80       	ldd	r15, Y+5	; 0x05
    262e:	0c 81       	ldd	r16, Y+4	; 0x04
    2630:	1b 81       	ldd	r17, Y+3	; 0x03
    2632:	aa 81       	ldd	r26, Y+2	; 0x02
    2634:	b9 81       	ldd	r27, Y+1	; 0x01
    2636:	ce 0f       	add	r28, r30
    2638:	d1 1d       	adc	r29, r1
    263a:	0f b6       	in	r0, 0x3f	; 63
    263c:	f8 94       	cli
    263e:	de bf       	out	0x3e, r29	; 62
    2640:	0f be       	out	0x3f, r0	; 63
    2642:	cd bf       	out	0x3d, r28	; 61
    2644:	ed 01       	movw	r28, r26
    2646:	08 95       	ret

00002648 <_exit>:
    2648:	f8 94       	cli

0000264a <__stop_program>:
    264a:	ff cf       	rjmp	.-2      	; 0x264a <__stop_program>
